
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071fc  080071fc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007204  08007204  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  20000060  0800726c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca0  0800726c  00020ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f11  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c23  00000000  00000000  00034fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00037c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00038cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026804  00000000  00000000  00039a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016438  00000000  00000000  0006022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe63  00000000  00000000  00076666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb4  00000000  00000000  001664cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070ac 	.word	0x080070ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080070ac 	.word	0x080070ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_SAI_TxCpltCallback>:
uint16_t audio_buf_low[AUDIO_LOW_BUF_SIZE];
uint16_t audio_buf_high[AUDIO_HIGH_BUF_SIZE];
int delay = 0;


void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	static int circ_offset_low = 0;
	static int circ_offset_high = 0;


	if(hsai == &hsai_BlockB1) return;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a41      	ldr	r2, [pc, #260]	; (80006cc <HAL_SAI_TxCpltCallback+0x110>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d07b      	beq.n	80006c4 <HAL_SAI_TxCpltCallback+0x108>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop

	__disable_irq();
	HAL_ADC_Start(&hadc1);
 80005d0:	483f      	ldr	r0, [pc, #252]	; (80006d0 <HAL_SAI_TxCpltCallback+0x114>)
 80005d2:	f001 f961 	bl	8001898 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005d6:	f04f 31ff 	mov.w	r1, #4294967295
 80005da:	483d      	ldr	r0, [pc, #244]	; (80006d0 <HAL_SAI_TxCpltCallback+0x114>)
 80005dc:	f001 fa2a 	bl	8001a34 <HAL_ADC_PollForConversion>
	adc_get[0] = HAL_ADC_GetValue(&hadc1);
 80005e0:	483b      	ldr	r0, [pc, #236]	; (80006d0 <HAL_SAI_TxCpltCallback+0x114>)
 80005e2:	f001 fab2 	bl	8001b4a <HAL_ADC_GetValue>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <HAL_SAI_TxCpltCallback+0x118>)
 80005ec:	801a      	strh	r2, [r3, #0]
//	HAL_ADC_Stop(&hadc1);



	audio_buf_high[circ_offset_high] = (adc_get[0] << 4) - (1 << 15);
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <HAL_SAI_TxCpltCallback+0x118>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <HAL_SAI_TxCpltCallback+0x11c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 80005fe:	b291      	uxth	r1, r2
 8000600:	4a36      	ldr	r2, [pc, #216]	; (80006dc <HAL_SAI_TxCpltCallback+0x120>)
 8000602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	audio_buf_low[circ_offset_low] = (adc_get[0] << 4) - (1 << 15);
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <HAL_SAI_TxCpltCallback+0x118>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	011b      	lsls	r3, r3, #4
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <HAL_SAI_TxCpltCallback+0x124>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8000616:	b291      	uxth	r1, r2
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <HAL_SAI_TxCpltCallback+0x128>)
 800061a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	circ_offset_high = (circ_offset_high + 1) % AUDIO_HIGH_BUF_SIZE;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <HAL_SAI_TxCpltCallback+0x11c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <HAL_SAI_TxCpltCallback+0x12c>)
 8000626:	fb83 1302 	smull	r1, r3, r3, r2
 800062a:	4413      	add	r3, r2
 800062c:	10d9      	asrs	r1, r3, #3
 800062e:	17d3      	asrs	r3, r2, #31
 8000630:	1ac9      	subs	r1, r1, r3
 8000632:	460b      	mov	r3, r1
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	1a5b      	subs	r3, r3, r1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	1ad1      	subs	r1, r2, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	461a      	mov	r2, r3
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <HAL_SAI_TxCpltCallback+0x11c>)
 8000648:	601a      	str	r2, [r3, #0]
	circ_offset_low = (circ_offset_low + 1) % AUDIO_LOW_BUF_SIZE;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <HAL_SAI_TxCpltCallback+0x124>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1c59      	adds	r1, r3, #1
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <HAL_SAI_TxCpltCallback+0x130>)
 8000652:	fb83 2301 	smull	r2, r3, r3, r1
 8000656:	105a      	asrs	r2, r3, #1
 8000658:	17cb      	asrs	r3, r1, #31
 800065a:	1ad2      	subs	r2, r2, r3
 800065c:	4613      	mov	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4413      	add	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	1aca      	subs	r2, r1, r3
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <HAL_SAI_TxCpltCallback+0x124>)
 8000668:	601a      	str	r2, [r3, #0]

	int buf_index;
	//Fill the 12 subwoofers
	for(int i = 0; i < 12; i ++) {
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e024      	b.n	80006ba <HAL_SAI_TxCpltCallback+0xfe>
		buf_index = (delay * i + (AUDIO_LOW_BUF_SIZE >> 1) + circ_offset_low) % AUDIO_LOW_BUF_SIZE;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <HAL_SAI_TxCpltCallback+0x134>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	1d9a      	adds	r2, r3, #6
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_SAI_TxCpltCallback+0x124>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	441a      	add	r2, r3
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_SAI_TxCpltCallback+0x130>)
 8000684:	fb83 1302 	smull	r1, r3, r3, r2
 8000688:	1059      	asrs	r1, r3, #1
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac9      	subs	r1, r1, r3
 800068e:	460b      	mov	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	440b      	add	r3, r1
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	60bb      	str	r3, [r7, #8]
		buf_index = MAX(buf_index, 0);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80006a0:	60bb      	str	r3, [r7, #8]
		sai_fifo_a[i] = audio_buf_low[buf_index];
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_SAI_TxCpltCallback+0x128>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <HAL_SAI_TxCpltCallback+0x138>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 12; i ++) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b0b      	cmp	r3, #11
 80006be:	ddd7      	ble.n	8000670 <HAL_SAI_TxCpltCallback+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	e000      	b.n	80006c6 <HAL_SAI_TxCpltCallback+0x10a>
	if(hsai == &hsai_BlockB1) return;
 80006c4:	bf00      	nop
////	sprintf(msg1, "adc2 is %d\r\n", adc_get[1]);
////	HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
////	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);


}
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000019c 	.word	0x2000019c
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	20000870 	.word	0x20000870
 80006d8:	20000b44 	.word	0x20000b44
 80006dc:	2000090c 	.word	0x2000090c
 80006e0:	20000b48 	.word	0x20000b48
 80006e4:	200008f4 	.word	0x200008f4
 80006e8:	92492493 	.word	0x92492493
 80006ec:	2aaaaaab 	.word	0x2aaaaaab
 80006f0:	20000b3c 	.word	0x20000b3c
 80006f4:	20000874 	.word	0x20000874

080006f8 <write_DAC1>:
uint8_t dac_ctrl1 = 0b10000100;
uint8_t dac_ctrl2 = 0b10000;



void write_DAC1(uint8_t reg, uint8_t* data) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b0ba      	sub	sp, #232	; 0xe8
 80006fc:	af04      	add	r7, sp, #16
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC1_ADDR << 1, reg,
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	b29a      	uxth	r2, r3
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	2301      	movs	r3, #1
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	2108      	movs	r1, #8
 800071a:	4827      	ldr	r0, [pc, #156]	; (80007b8 <write_DAC1+0xc0>)
 800071c:	f002 fbe4 	bl	8002ee8 <HAL_I2C_Mem_Write>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success on DAC1!\r\n";
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <write_DAC1+0xc4>)
 8000728:	f107 040c 	add.w	r4, r7, #12
 800072c:	461d      	mov	r5, r3
 800072e:	6828      	ldr	r0, [r5, #0]
 8000730:	6869      	ldr	r1, [r5, #4]
 8000732:	68aa      	ldr	r2, [r5, #8]
 8000734:	68eb      	ldr	r3, [r5, #12]
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	8a2b      	ldrh	r3, [r5, #16]
 800073a:	7caa      	ldrb	r2, [r5, #18]
 800073c:	8023      	strh	r3, [r4, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	70a3      	strb	r3, [r4, #2]
 8000742:	f107 031f 	add.w	r3, r7, #31
 8000746:	2251      	movs	r2, #81	; 0x51
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f006 f82a 	bl	80067a4 <memset>
	if (ret != HAL_OK) {
 8000750:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01d      	beq.n	8000794 <write_DAC1+0x9c>
		sprintf(str_fail, "Error is %d on DAC1; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <write_DAC1+0xc0>)
 800075a:	f002 fcd9 	bl	8003110 <HAL_I2C_GetError>
 800075e:	4601      	mov	r1, r0
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	460a      	mov	r2, r1
 8000770:	4913      	ldr	r1, [pc, #76]	; (80007c0 <write_DAC1+0xc8>)
 8000772:	f005 fff7 	bl	8006764 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 8000776:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd48 	bl	8000210 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <write_DAC1+0xcc>)
 800078e:	f005 f86d 	bl	800586c <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000792:	e00d      	b.n	80007b0 <write_DAC1+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd39 	bl	8000210 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f107 010c 	add.w	r1, r7, #12
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <write_DAC1+0xcc>)
 80007ac:	f005 f85e 	bl	800586c <HAL_UART_Transmit>
}
 80007b0:	bf00      	nop
 80007b2:	37d8      	adds	r7, #216	; 0xd8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	200000c4 	.word	0x200000c4
 80007bc:	080070f8 	.word	0x080070f8
 80007c0:	080070c4 	.word	0x080070c4
 80007c4:	200002e0 	.word	0x200002e0

080007c8 <write_DAC2>:

void write_DAC2(uint8_t reg, uint8_t* data) {
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b0ba      	sub	sp, #232	; 0xe8
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC2_ADDR << 1, reg,
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2301      	movs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	2148      	movs	r1, #72	; 0x48
 80007ea:	4827      	ldr	r0, [pc, #156]	; (8000888 <write_DAC2+0xc0>)
 80007ec:	f002 fb7c 	bl	8002ee8 <HAL_I2C_Mem_Write>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <write_DAC2+0xc4>)
 80007f8:	f107 040c 	add.w	r4, r7, #12
 80007fc:	461d      	mov	r5, r3
 80007fe:	6828      	ldr	r0, [r5, #0]
 8000800:	6869      	ldr	r1, [r5, #4]
 8000802:	68aa      	ldr	r2, [r5, #8]
 8000804:	68eb      	ldr	r3, [r5, #12]
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	8a2b      	ldrh	r3, [r5, #16]
 800080a:	7caa      	ldrb	r2, [r5, #18]
 800080c:	8023      	strh	r3, [r4, #0]
 800080e:	4613      	mov	r3, r2
 8000810:	70a3      	strb	r3, [r4, #2]
 8000812:	f107 031f 	add.w	r3, r7, #31
 8000816:	2251      	movs	r2, #81	; 0x51
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 ffc2 	bl	80067a4 <memset>
	if (ret != HAL_OK) {
 8000820:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000824:	2b00      	cmp	r3, #0
 8000826:	d01d      	beq.n	8000864 <write_DAC2+0x9c>
		sprintf(str_fail, "Error is %d on DAC2; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <write_DAC2+0xc0>)
 800082a:	f002 fc71 	bl	8003110 <HAL_I2C_GetError>
 800082e:	4601      	mov	r1, r0
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	4913      	ldr	r1, [pc, #76]	; (8000890 <write_DAC2+0xc8>)
 8000842:	f005 ff8f 	bl	8006764 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 8000846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fce0 	bl	8000210 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <write_DAC2+0xcc>)
 800085e:	f005 f805 	bl	800586c <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000862:	e00d      	b.n	8000880 <write_DAC2+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fcd1 	bl	8000210 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	f107 010c 	add.w	r1, r7, #12
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <write_DAC2+0xcc>)
 800087c:	f004 fff6 	bl	800586c <HAL_UART_Transmit>
}
 8000880:	bf00      	nop
 8000882:	37d8      	adds	r7, #216	; 0xd8
 8000884:	46bd      	mov	sp, r7
 8000886:	bdb0      	pop	{r4, r5, r7, pc}
 8000888:	200000c4 	.word	0x200000c4
 800088c:	08007140 	.word	0x08007140
 8000890:	0800710c 	.word	0x0800710c
 8000894:	200002e0 	.word	0x200002e0

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 ff36 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f8a5 	bl	80009f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008a6:	f000 f90b 	bl	8000ac0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 fb09 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ae:	f000 fae1 	bl	8000e74 <MX_DMA_Init>
  MX_SAI1_Init();
 80008b2:	f000 f9cd 	bl	8000c50 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008b6:	f000 faaf 	bl	8000e18 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80008ba:	f000 f989 	bl	8000bd0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80008be:	f000 fa7b 	bl	8000db8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008c2:	f000 f925 	bl	8000b10 <MX_ADC1_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __disable_irq();
//  HAL_ADC_Start_DMA(&hadc1, &adc_get, 2);
  sai_fifo_a[0] = 0x7000U;
 80008ca:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <main+0x120>)
 80008cc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80008d0:	601a      	str	r2, [r3, #0]
  sai_fifo_b[0] = 0x7000U;
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <main+0x124>)
 80008d4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80008d8:	601a      	str	r2, [r3, #0]
  int error;
  error = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint32_t * )&sai_fifo_a, 16);
 80008da:	2210      	movs	r2, #16
 80008dc:	4936      	ldr	r1, [pc, #216]	; (80009b8 <main+0x120>)
 80008de:	4838      	ldr	r0, [pc, #224]	; (80009c0 <main+0x128>)
 80008e0:	f004 fc54 	bl	800518c <HAL_SAI_Transmit_DMA>
 80008e4:	4603      	mov	r3, r0
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  char error_msg[50];
  sprintf(error_msg, "Error is %d on DMA1\r\n", error);
 80008e8:	463b      	mov	r3, r7
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	4935      	ldr	r1, [pc, #212]	; (80009c4 <main+0x12c>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 ff38 	bl	8006764 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc8a 	bl	8000210 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4639      	mov	r1, r7
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <main+0x130>)
 8000908:	f004 ffb0 	bl	800586c <HAL_UART_Transmit>


  error = HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint32_t * )&sai_fifo_b, 16);
 800090c:	2210      	movs	r2, #16
 800090e:	492b      	ldr	r1, [pc, #172]	; (80009bc <main+0x124>)
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <main+0x134>)
 8000912:	f004 fc3b 	bl	800518c <HAL_SAI_Transmit_DMA>
 8000916:	4603      	mov	r3, r0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  sprintf(error_msg, "Error is %d on DMA2\r\n", error);
 800091a:	463b      	mov	r3, r7
 800091c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800091e:	492c      	ldr	r1, [pc, #176]	; (80009d0 <main+0x138>)
 8000920:	4618      	mov	r0, r3
 8000922:	f005 ff1f 	bl	8006764 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000926:	463b      	mov	r3, r7
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc71 	bl	8000210 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	4639      	mov	r1, r7
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	4823      	ldr	r0, [pc, #140]	; (80009c8 <main+0x130>)
 800093a:	f004 ff97 	bl	800586c <HAL_UART_Transmit>

  //HAL_Delay(1000);



  sprintf(error_msg, "UART good!\r\n");
 800093e:	463b      	mov	r3, r7
 8000940:	4924      	ldr	r1, [pc, #144]	; (80009d4 <main+0x13c>)
 8000942:	4618      	mov	r0, r3
 8000944:	f005 ff0e 	bl	8006764 <siprintf>

  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000948:	463b      	mov	r3, r7
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fc60 	bl	8000210 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	4639      	mov	r1, r7
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <main+0x130>)
 800095c:	f004 ff86 	bl	800586c <HAL_UART_Transmit>


  write_DAC1(PLL_CLK_CTRL0, &pll_clk_data);
 8000960:	491d      	ldr	r1, [pc, #116]	; (80009d8 <main+0x140>)
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fec8 	bl	80006f8 <write_DAC1>
  write_DAC1(DAC_MUTE1, &mute_data_DAC1);
 8000968:	491c      	ldr	r1, [pc, #112]	; (80009dc <main+0x144>)
 800096a:	2009      	movs	r0, #9
 800096c:	f7ff fec4 	bl	80006f8 <write_DAC1>
  write_DAC1(DAC_CTRL0, &dac_ctrl0);
 8000970:	491b      	ldr	r1, [pc, #108]	; (80009e0 <main+0x148>)
 8000972:	2006      	movs	r0, #6
 8000974:	f7ff fec0 	bl	80006f8 <write_DAC1>
  write_DAC1(DAC_CTRL1, &dac_ctrl1);
 8000978:	491a      	ldr	r1, [pc, #104]	; (80009e4 <main+0x14c>)
 800097a:	2007      	movs	r0, #7
 800097c:	f7ff febc 	bl	80006f8 <write_DAC1>
  write_DAC1(DAC_CTRL2, &dac_ctrl2);
 8000980:	4919      	ldr	r1, [pc, #100]	; (80009e8 <main+0x150>)
 8000982:	2008      	movs	r0, #8
 8000984:	f7ff feb8 	bl	80006f8 <write_DAC1>

  write_DAC2(PLL_CLK_CTRL0, &pll_clk_data);
 8000988:	4913      	ldr	r1, [pc, #76]	; (80009d8 <main+0x140>)
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff ff1c 	bl	80007c8 <write_DAC2>
write_DAC2(DAC_MUTE1, &mute_data_DAC2);
 8000990:	4916      	ldr	r1, [pc, #88]	; (80009ec <main+0x154>)
 8000992:	2009      	movs	r0, #9
 8000994:	f7ff ff18 	bl	80007c8 <write_DAC2>
write_DAC2(DAC_CTRL0, &dac_ctrl0);
 8000998:	4911      	ldr	r1, [pc, #68]	; (80009e0 <main+0x148>)
 800099a:	2006      	movs	r0, #6
 800099c:	f7ff ff14 	bl	80007c8 <write_DAC2>
write_DAC2(DAC_CTRL1, &dac_ctrl1);
 80009a0:	4910      	ldr	r1, [pc, #64]	; (80009e4 <main+0x14c>)
 80009a2:	2007      	movs	r0, #7
 80009a4:	f7ff ff10 	bl	80007c8 <write_DAC2>
write_DAC2(DAC_CTRL2, &dac_ctrl2);
 80009a8:	490f      	ldr	r1, [pc, #60]	; (80009e8 <main+0x150>)
 80009aa:	2008      	movs	r0, #8
 80009ac:	f7ff ff0c 	bl	80007c8 <write_DAC2>
  __ASM volatile ("cpsie i" : : : "memory");
 80009b0:	b662      	cpsie	i
}
 80009b2:	bf00      	nop

  __enable_irq();



  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x11c>
 80009b6:	bf00      	nop
 80009b8:	20000874 	.word	0x20000874
 80009bc:	200008b4 	.word	0x200008b4
 80009c0:	20000118 	.word	0x20000118
 80009c4:	08007154 	.word	0x08007154
 80009c8:	200002e0 	.word	0x200002e0
 80009cc:	2000019c 	.word	0x2000019c
 80009d0:	0800716c 	.word	0x0800716c
 80009d4:	08007184 	.word	0x08007184
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000b40 	.word	0x20000b40
 80009e0:	20000001 	.word	0x20000001
 80009e4:	20000002 	.word	0x20000002
 80009e8:	20000003 	.word	0x20000003
 80009ec:	20000b41 	.word	0x20000b41

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fed0 	bl	80067a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a14:	f002 ffae 	bl	8003974 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <SystemClock_Config+0xcc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <SystemClock_Config+0xcc>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <SystemClock_Config+0xcc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a64:	2348      	movs	r3, #72	; 0x48
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 ff8d 	bl	8003994 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 fad8 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fa1b 	bl	8003edc <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aac:	f000 fac2 	bl	8001034 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	; 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0a2      	sub	sp, #136	; 0x88
 8000ac4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2284      	movs	r2, #132	; 0x84
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f005 fe69 	bl	80067a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000ad2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000ad6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fc16 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000b02:	f000 fa97 	bl	8001034 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3788      	adds	r7, #136	; 0x88
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <MX_ADC1_Init+0xb8>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b50:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <MX_ADC1_Init+0xbc>)
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6e:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b70:	f000 fe4e 	bl	8001810 <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 fa5b 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b90:	f000 ffe8 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b9a:	f000 fa4b 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000bac:	f000 ffda 	bl	8001b64 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bb6:	f000 fa3d 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000007c 	.word	0x2000007c
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	0f000001 	.word	0x0f000001

08000bd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_I2C2_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x601015E9;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c0c:	f002 f8dc 	bl	8002dc8 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 fa0d 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c1e:	f002 fcc9 	bl	80035b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 fa04 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c30:	f002 fd0b 	bl	800364a <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f9fb 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000c4 	.word	0x200000c4
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	601015e9 	.word	0x601015e9

08000c50 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c54:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c56:	4a55      	ldr	r2, [pc, #340]	; (8000dac <MX_SAI1_Init+0x15c>)
 8000c58:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c5a:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c60:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000c66:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c6c:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c78:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c7e:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000c90:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 2;
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c9c:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ca8:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cae:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cc8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000cca:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000ccc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cd4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cd8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ce0:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000cec:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <MX_SAI1_Init+0x158>)
 8000cf6:	f004 f847 	bl	8004d88 <HAL_SAI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_SAI1_Init+0xb4>
  {
    Error_Handler();
 8000d00:	f000 f998 	bl	8001034 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d06:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <MX_SAI1_Init+0x164>)
 8000d08:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d76:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d86:	2210      	movs	r2, #16
 8000d88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d90:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_SAI1_Init+0x160>)
 8000d94:	f003 fff8 	bl	8004d88 <HAL_SAI_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_SAI1_Init+0x152>
  {
    Error_Handler();
 8000d9e:	f000 f949 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000118 	.word	0x20000118
 8000dac:	40015804 	.word	0x40015804
 8000db0:	2000019c 	.word	0x2000019c
 8000db4:	40015824 	.word	0x40015824

08000db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <MX_USART3_UART_Init+0x5c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART3_UART_Init+0x58>)
 8000dfc:	f004 fce8 	bl	80057d0 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e06:	f000 f915 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002e0 	.word	0x200002e0
 8000e14:	40004800 	.word	0x40004800

08000e18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e26:	2206      	movs	r2, #6
 8000e28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5c:	f002 fc41 	bl	80036e2 <HAL_PCD_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 f8e5 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000368 	.word	0x20000368

08000e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_DMA_Init+0x48>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <MX_DMA_Init+0x48>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_DMA_Init+0x48>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2039      	movs	r0, #57	; 0x39
 8000e98:	f001 f98f 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e9c:	2039      	movs	r0, #57	; 0x39
 8000e9e:	f001 f9a8 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	203c      	movs	r0, #60	; 0x3c
 8000ea8:	f001 f987 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000eac:	203c      	movs	r0, #60	; 0x3c
 8000eae:	f001 f9a0 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4b54      	ldr	r3, [pc, #336]	; (8001028 <MX_GPIO_Init+0x168>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a53      	ldr	r2, [pc, #332]	; (8001028 <MX_GPIO_Init+0x168>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <MX_GPIO_Init+0x168>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <MX_GPIO_Init+0x168>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <MX_GPIO_Init+0x168>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <MX_GPIO_Init+0x168>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a47      	ldr	r2, [pc, #284]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a41      	ldr	r2, [pc, #260]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a3b      	ldr	r2, [pc, #236]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a35      	ldr	r2, [pc, #212]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a29      	ldr	r2, [pc, #164]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_GPIO_Init+0x168>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <MX_GPIO_Init+0x16c>)
 8000f9e:	f001 fef9 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_GPIO_Init+0x170>)
 8000fa8:	f001 fef4 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_GPIO_Init+0x16c>)
 8000fca:	f001 fd37 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000fce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd4:	2311      	movs	r3, #17
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <MX_GPIO_Init+0x16c>)
 8000fe8:	f001 fd28 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0x170>)
 8001004:	f001 fd1a 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_GPIO_Init+0x170>)
 800101c:	f001 fd0e 	bl	8002a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400
 8001030:	40021800 	.word	0x40021800

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b09a      	sub	sp, #104	; 0x68
 8001038:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800103a:	b672      	cpsid	i
}
 800103c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <Error_Handler+0x48>)
 8001040:	1d3c      	adds	r4, r7, #4
 8001042:	461d      	mov	r5, r3
 8001044:	6828      	ldr	r0, [r5, #0]
 8001046:	6869      	ldr	r1, [r5, #4]
 8001048:	68aa      	ldr	r2, [r5, #8]
 800104a:	68eb      	ldr	r3, [r5, #12]
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	7c2b      	ldrb	r3, [r5, #16]
 8001050:	7023      	strb	r3, [r4, #0]
 8001052:	f107 0315 	add.w	r3, r7, #21
 8001056:	2253      	movs	r2, #83	; 0x53
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f005 fba2 	bl	80067a4 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8d4 	bl	8000210 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	1d39      	adds	r1, r7, #4
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <Error_Handler+0x4c>)
 8001074:	f004 fbfa 	bl	800586c <HAL_UART_Transmit>

  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x44>
 800107a:	bf00      	nop
 800107c:	08007194 	.word	0x08007194
 8001080:	200002e0 	.word	0x200002e0

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0x74>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d123      	bne.n	8001136 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_ADC_MspInit+0x78>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_ADC_MspInit+0x78>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_ADC_MspInit+0x78>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_ADC_MspInit+0x78>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_ADC_MspInit+0x78>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_ADC_MspInit+0x78>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800111e:	2309      	movs	r3, #9
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_ADC_MspInit+0x7c>)
 8001132:	f001 fc83 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0aa      	sub	sp, #168	; 0xa8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2284      	movs	r2, #132	; 0x84
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fb19 	bl	80067a4 <memset>
  if(hi2c->Instance==I2C2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_I2C_MspInit+0xb0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13b      	bne.n	80011f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800117c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001182:	2300      	movs	r3, #0
 8001184:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f8cc 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001196:	f7ff ff4d 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ca:	2304      	movs	r3, #4
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011d4:	4619      	mov	r1, r3
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011d8:	f001 fc30 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	37a8      	adds	r7, #168	; 0xa8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40005800 	.word	0x40005800
 8001200:	40023800 	.word	0x40023800
 8001204:	40021400 	.word	0x40021400

08001208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0aa      	sub	sp, #168	; 0xa8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2284      	movs	r2, #132	; 0x84
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f005 fabb 	bl	80067a4 <memset>
  if(huart->Instance==USART3)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13c      	bne.n	80012b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800123e:	2300      	movs	r3, #0
 8001240:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f86e 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001252:	f7ff feef 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800128a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a0:	2307      	movs	r3, #7
 80012a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0xbc>)
 80012ae:	f001 fbc5 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	37a8      	adds	r7, #168	; 0xa8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004800 	.word	0x40004800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020c00 	.word	0x40020c00

080012c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ac      	sub	sp, #176	; 0xb0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2284      	movs	r2, #132	; 0x84
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fa5b 	bl	80067a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f6:	d159      	bne.n	80013ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f80d 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001314:	f7ff fe8e 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001330:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800134a:	230a      	movs	r3, #10
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001354:	4619      	mov	r1, r3
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <HAL_PCD_MspInit+0xf0>)
 8001358:	f001 fb70 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800135c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001374:	4619      	mov	r1, r3
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <HAL_PCD_MspInit+0xf0>)
 8001378:	f001 fb60 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	6353      	str	r3, [r2, #52]	; 0x34
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 800138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	6453      	str	r3, [r2, #68]	; 0x44
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_PCD_MspInit+0xec>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	37b0      	adds	r7, #176	; 0xb0
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a69      	ldr	r2, [pc, #420]	; (8001570 <HAL_SAI_MspInit+0x1b4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d162      	bne.n	8001494 <HAL_SAI_MspInit+0xd8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80013ce:	4b69      	ldr	r3, [pc, #420]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d113      	bne.n	80013fe <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013d6:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2057      	movs	r0, #87	; 0x57
 80013f4:	f000 fee1 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80013f8:	2057      	movs	r0, #87	; 0x57
 80013fa:	f000 fefa 	bl	80021f2 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80013fe:	4b5d      	ldr	r3, [pc, #372]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a5b      	ldr	r2, [pc, #364]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 8001406:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001408:	2370      	movs	r3, #112	; 0x70
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001418:	2306      	movs	r3, #6
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4856      	ldr	r0, [pc, #344]	; (800157c <HAL_SAI_MspInit+0x1c0>)
 8001424:	f001 fb0a 	bl	8002a3c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800142a:	4a56      	ldr	r2, [pc, #344]	; (8001584 <HAL_SAI_MspInit+0x1c8>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800144a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800146c:	4844      	ldr	r0, [pc, #272]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800146e:	f000 fedb 	bl	8002228 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 8001478:	f7ff fddc 	bl	8001034 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a40      	ldr	r2, [pc, #256]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001480:	671a      	str	r2, [r3, #112]	; 0x70
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a3d      	ldr	r2, [pc, #244]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 800148c:	66da      	str	r2, [r3, #108]	; 0x6c
 800148e:	4a3c      	ldr	r2, [pc, #240]	; (8001580 <HAL_SAI_MspInit+0x1c4>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_SAI_MspInit+0x1cc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d163      	bne.n	8001566 <HAL_SAI_MspInit+0x1aa>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d113      	bne.n	80014ce <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80014ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_SAI_MspInit+0x1bc>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2057      	movs	r0, #87	; 0x57
 80014c4:	f000 fe79 	bl	80021ba <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80014c8:	2057      	movs	r0, #87	; 0x57
 80014ca:	f000 fe92 	bl	80021f2 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <HAL_SAI_MspInit+0x1b8>)
 80014d6:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d8:	2308      	movs	r3, #8
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014e8:	2306      	movs	r3, #6
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4822      	ldr	r0, [pc, #136]	; (800157c <HAL_SAI_MspInit+0x1c0>)
 80014f4:	f001 faa2 	bl	8002a3c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <HAL_SAI_MspInit+0x1d4>)
 80014fc:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001504:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001528:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001540:	f000 fe72 	bl	8002228 <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_SAI_MspInit+0x192>
    {
      Error_Handler();
 800154a:	f7ff fd73 	bl	8001034 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001552:	671a      	str	r2, [r3, #112]	; 0x70
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 800155e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_SAI_MspInit+0x1d0>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40015804 	.word	0x40015804
 8001574:	20000b4c 	.word	0x20000b4c
 8001578:	40023800 	.word	0x40023800
 800157c:	40021000 	.word	0x40021000
 8001580:	20000220 	.word	0x20000220
 8001584:	40026428 	.word	0x40026428
 8001588:	40015824 	.word	0x40015824
 800158c:	20000280 	.word	0x20000280
 8001590:	40026470 	.word	0x40026470

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f8d2 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <DMA2_Stream1_IRQHandler+0x10>)
 80015ee:	f000 ffbb 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000220 	.word	0x20000220

080015fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA2_Stream4_IRQHandler+0x10>)
 8001602:	f000 ffb1 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000280 	.word	0x20000280

08001610 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <SAI1_IRQHandler+0x14>)
 8001616:	f003 fe69 	bl	80052ec <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <SAI1_IRQHandler+0x18>)
 800161c:	f003 fe66 	bl	80052ec <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000118 	.word	0x20000118
 8001628:	2000019c 	.word	0x2000019c

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f005 f8aa 	bl	80067b4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20050000 	.word	0x20050000
 800168c:	00000400 	.word	0x00000400
 8001690:	20000b50 	.word	0x20000b50
 8001694:	20000ca0 	.word	0x20000ca0

08001698 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e6:	f7ff ffd7 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f005 f869 	bl	80067c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff f8d3 	bl	8000898 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001700:	0800720c 	.word	0x0800720c
  ldr r2, =_sbss
 8001704:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001708:	20000ca0 	.word	0x20000ca0

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>

0800170e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001712:	2003      	movs	r0, #3
 8001714:	f000 fd46 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f805 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171e:	f7ff fcb1 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd61 	bl	800220e <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fd29 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000004 	.word	0x20000004
 8001780:	2000000c 	.word	0x2000000c
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000b54 	.word	0x20000b54

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000b54 	.word	0x20000b54

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000000c 	.word	0x2000000c

08001810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e031      	b.n	800188a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc4c 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_ADC_Init+0x84>)
 8001854:	4013      	ands	r3, r2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fad6 	bl	8001e10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	ffffeefd 	.word	0xffffeefd

08001898 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Start+0x1a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0ad      	b.n	8001a0e <HAL_ADC_Start+0x176>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d018      	beq.n	80018fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_ADC_Start+0x184>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_ADC_Start+0x188>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9a      	lsrs	r2, r3, #18
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d175      	bne.n	80019f4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_ADC_Start+0x18c>)
 800190e:	4013      	ands	r3, r2
 8001910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001968:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_ADC_Start+0x190>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d143      	bne.n	8001a0c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e03a      	b.n	8001a0c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_ADC_Start+0x194>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d10e      	bne.n	80019be <HAL_ADC_Start+0x126>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_ADC_Start+0x190>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d120      	bne.n	8001a0c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_ADC_Start+0x198>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d11b      	bne.n	8001a0c <HAL_ADC_Start+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d114      	bne.n	8001a0c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	e00b      	b.n	8001a0c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	fffff8fe 	.word	0xfffff8fe
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012200 	.word	0x40012200

08001a34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d113      	bne.n	8001a7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a60:	d10b      	bne.n	8001a7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e063      	b.n	8001b42 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a7a:	f7ff fe99 	bl	80017b0 <HAL_GetTick>
 8001a7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a80:	e021      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d01d      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0x6c>
 8001a90:	f7ff fe8e 	bl	80017b0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d212      	bcs.n	8001ac6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d00b      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f043 0204 	orr.w	r2, r3, #4
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e03d      	b.n	8001b42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d1d6      	bne.n	8001a82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0212 	mvn.w	r2, #18
 8001adc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d123      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11f      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e136      	b.n	8001dee <HAL_ADC_ConfigChannel+0x28a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d93a      	bls.n	8001c06 <HAL_ADC_ConfigChannel+0xa2>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b98:	d035      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	3b1e      	subs	r3, #30
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a8d      	ldr	r2, [pc, #564]	; (8001dfc <HAL_ADC_ConfigChannel+0x298>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10a      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68d9      	ldr	r1, [r3, #12]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bde:	e035      	b.n	8001c4c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68d9      	ldr	r1, [r3, #12]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4403      	add	r3, r0
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c04:	e022      	b.n	8001c4c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6919      	ldr	r1, [r3, #16]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43da      	mvns	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6919      	ldr	r1, [r3, #16]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	409a      	lsls	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d824      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	221f      	movs	r2, #31
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b05      	subs	r3, #5
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9c:	e04c      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d824      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b23      	subs	r3, #35	; 0x23
 8001cb8:	221f      	movs	r2, #31
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b23      	subs	r3, #35	; 0x23
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
 8001cee:	e023      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b41      	subs	r3, #65	; 0x41
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_ADC_ConfigChannel+0x29c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1f4>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a2c      	ldr	r2, [pc, #176]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d52:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d56:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <HAL_ADC_ConfigChannel+0x29c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10f      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d10b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d74:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_ADC_ConfigChannel+0x29c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d12b      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x280>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_ADC_ConfigChannel+0x298>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d003      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x23a>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d122      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001da8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_ADC_ConfigChannel+0x298>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a8>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9a      	lsrs	r2, r3, #18
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	10000012 	.word	0x10000012
 8001e00:	40012000 	.word	0x40012000
 8001e04:	40012300 	.word	0x40012300
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e18:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <ADC_Init+0x1ec>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a77      	ldr	r2, [pc, #476]	; (8001ffc <ADC_Init+0x1ec>)
 8001e1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <ADC_Init+0x1ec>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4973      	ldr	r1, [pc, #460]	; (8001ffc <ADC_Init+0x1ec>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	021a      	lsls	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	4a58      	ldr	r2, [pc, #352]	; (8002000 <ADC_Init+0x1f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d022      	beq.n	8001eea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	e00f      	b.n	8001f0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0202 	bic.w	r2, r2, #2
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	005a      	lsls	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	3b01      	subs	r3, #1
 8001f64:	035a      	lsls	r2, r3, #13
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e007      	b.n	8001f80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	051a      	lsls	r2, r3, #20
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc2:	025a      	lsls	r2, r3, #9
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	029a      	lsls	r2, r3, #10
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40012300 	.word	0x40012300
 8002000:	0f000001 	.word	0x0f000001

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	4313      	orrs	r3, r2
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	05fa0000 	.word	0x05fa0000

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fabc 	bl	80017b0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff faa3 	bl	80017b0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb09 	bl	8002944 <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fac0 	bl	80028d8 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e048      	b.n	800243c <HAL_DMA_Start_IT+0xb8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d137      	bne.n	800242e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa52 	bl	800287c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0208 	orr.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e005      	b.n	800243a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002452:	f7ff f9ad 	bl	80017b0 <HAL_GetTick>
 8002456:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e052      	b.n	800251c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0216 	bic.w	r2, r2, #22
 8002484:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002494:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_DMA_Abort+0x62>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0208 	bic.w	r2, r2, #8
 80024b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c6:	e013      	b.n	80024f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c8:	f7ff f972 	bl	80017b0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d90c      	bls.n	80024f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e015      	b.n	800251c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e4      	bne.n	80024c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	223f      	movs	r2, #63	; 0x3f
 8002504:	409a      	lsls	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d004      	beq.n	8002542 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00c      	b.n	800255c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2205      	movs	r2, #5
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002574:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <HAL_DMA_IRQHandler+0x248>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a8e      	ldr	r2, [pc, #568]	; (80027b4 <HAL_DMA_IRQHandler+0x24c>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a9b      	lsrs	r3, r3, #10
 8002580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2208      	movs	r2, #8
 8002594:	409a      	lsls	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2208      	movs	r2, #8
 80025c2:	409a      	lsls	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2201      	movs	r2, #1
 80025f8:	409a      	lsls	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0202 	orr.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2204      	movs	r2, #4
 8002610:	409a      	lsls	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2204      	movs	r2, #4
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2210      	movs	r2, #16
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d043      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d03c      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2210      	movs	r2, #16
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d024      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
 8002696:	e01f      	b.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e016      	b.n	80026d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2220      	movs	r2, #32
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 808f 	beq.w	8002808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8087 	beq.w	8002808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2220      	movs	r2, #32
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b05      	cmp	r3, #5
 8002710:	d136      	bne.n	8002780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0216 	bic.w	r2, r2, #22
 8002720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <HAL_DMA_IRQHandler+0x1da>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0208 	bic.w	r2, r2, #8
 8002750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	223f      	movs	r2, #63	; 0x3f
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07e      	beq.n	8002874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
        }
        return;
 800277e:	e079      	b.n	8002874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10d      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d031      	beq.n	8002808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e02c      	b.n	8002808 <HAL_DMA_IRQHandler+0x2a0>
 80027ae:	bf00      	nop
 80027b0:	20000004 	.word	0x20000004
 80027b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e01e      	b.n	8002808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10f      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0210 	bic.w	r2, r2, #16
 80027e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	2b00      	cmp	r3, #0
 800280e:	d032      	beq.n	8002876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d022      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2205      	movs	r2, #5
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3301      	adds	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	d307      	bcc.n	8002850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f2      	bne.n	8002834 <HAL_DMA_IRQHandler+0x2cc>
 800284e:	e000      	b.n	8002852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
 8002872:	e000      	b.n	8002876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002874:	bf00      	nop
    }
  }
}
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d108      	bne.n	80028bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ba:	e007      	b.n	80028cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	3b10      	subs	r3, #16
 80028e8:	4a13      	ldr	r2, [pc, #76]	; (8002938 <DMA_CalcBaseAndBitshift+0x60>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <DMA_CalcBaseAndBitshift+0x64>)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d908      	bls.n	8002918 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <DMA_CalcBaseAndBitshift+0x68>)
 800290e:	4013      	ands	r3, r2
 8002910:	1d1a      	adds	r2, r3, #4
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	659a      	str	r2, [r3, #88]	; 0x58
 8002916:	e006      	b.n	8002926 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <DMA_CalcBaseAndBitshift+0x68>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	aaaaaaab 	.word	0xaaaaaaab
 800293c:	080071c0 	.word	0x080071c0
 8002940:	fffffc00 	.word	0xfffffc00

08002944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11f      	bne.n	800299e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d856      	bhi.n	8002a12 <DMA_CheckFifoParam+0xce>
 8002964:	a201      	add	r2, pc, #4	; (adr r2, 800296c <DMA_CheckFifoParam+0x28>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	0800297d 	.word	0x0800297d
 8002970:	0800298f 	.word	0x0800298f
 8002974:	0800297d 	.word	0x0800297d
 8002978:	08002a13 	.word	0x08002a13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d046      	beq.n	8002a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298c:	e043      	b.n	8002a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002996:	d140      	bne.n	8002a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e03d      	b.n	8002a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a6:	d121      	bne.n	80029ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d837      	bhi.n	8002a1e <DMA_CheckFifoParam+0xda>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <DMA_CheckFifoParam+0x70>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029c5 	.word	0x080029c5
 80029b8:	080029cb 	.word	0x080029cb
 80029bc:	080029c5 	.word	0x080029c5
 80029c0:	080029dd 	.word	0x080029dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      break;
 80029c8:	e030      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d025      	beq.n	8002a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029da:	e022      	b.n	8002a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e4:	d11f      	bne.n	8002a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ea:	e01c      	b.n	8002a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d903      	bls.n	80029fa <DMA_CheckFifoParam+0xb6>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d003      	beq.n	8002a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029f8:	e018      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
      break;
 80029fe:	e015      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e00b      	b.n	8002a2a <DMA_CheckFifoParam+0xe6>
      break;
 8002a12:	bf00      	nop
 8002a14:	e00a      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e008      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e006      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e004      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e175      	b.n	8002d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8164 	bne.w	8002d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d005      	beq.n	8002a92 <HAL_GPIO_Init+0x56>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d130      	bne.n	8002af4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 0201 	and.w	r2, r3, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d017      	beq.n	8002b30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d123      	bne.n	8002b84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80be 	beq.w	8002d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_GPIO_Init+0x324>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bde:	4a61      	ldr	r2, [pc, #388]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_GPIO_Init+0x32c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d037      	beq.n	8002c7a <HAL_GPIO_Init+0x23e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_GPIO_Init+0x23a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_GPIO_Init+0x334>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02b      	beq.n	8002c72 <HAL_GPIO_Init+0x236>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_GPIO_Init+0x338>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d025      	beq.n	8002c6e <HAL_GPIO_Init+0x232>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x33c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01f      	beq.n	8002c6a <HAL_GPIO_Init+0x22e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_GPIO_Init+0x340>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d019      	beq.n	8002c66 <HAL_GPIO_Init+0x22a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x344>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x348>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x34c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_GPIO_Init+0x21a>
 8002c52:	2309      	movs	r3, #9
 8002c54:	e012      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c56:	230a      	movs	r3, #10
 8002c58:	e010      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e00e      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e00c      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00a      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c66:	2305      	movs	r3, #5
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x240>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	; (8002d64 <HAL_GPIO_Init+0x328>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f ae86 	bls.w	8002a5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40021400 	.word	0x40021400
 8002d80:	40021800 	.word	0x40021800
 8002d84:	40021c00 	.word	0x40021c00
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40022400 	.word	0x40022400
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe f9ac 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	e006      	b.n	8002e50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d104      	bne.n	8002e62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_I2C_Init+0x11c>)
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	02008000 	.word	0x02008000

08002ee8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	817b      	strh	r3, [r7, #10]
 8002efa:	460b      	mov	r3, r1
 8002efc:	813b      	strh	r3, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	f040 80f9 	bne.w	8003102 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x34>
 8002f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0ed      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_I2C_Mem_Write+0x4e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0e6      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fc37 	bl	80017b0 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f961 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0d1      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f88:	88f8      	ldrh	r0, [r7, #6]
 8002f8a:	893a      	ldrh	r2, [r7, #8]
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4603      	mov	r3, r0
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f8c5 	bl	8003128 <I2C_RequestMemoryWrite>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0a9      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2bff      	cmp	r3, #255	; 0xff
 8002fb8:	d90e      	bls.n	8002fd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	22ff      	movs	r2, #255	; 0xff
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	8979      	ldrh	r1, [r7, #10]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fabd 	bl	8003550 <I2C_TransferConfig>
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 faac 	bl	8003550 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f94b 	bl	8003298 <I2C_WaitOnTXISFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e07b      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d034      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x1c8>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d130      	bne.n	80030b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f8dd 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e04d      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2bff      	cmp	r3, #255	; 0xff
 8003070:	d90e      	bls.n	8003090 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	b2da      	uxtb	r2, r3
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	2300      	movs	r3, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa61 	bl	8003550 <I2C_TransferConfig>
 800308e:	e00f      	b.n	80030b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	8979      	ldrh	r1, [r7, #10]
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa50 	bl	8003550 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d19e      	bne.n	8002ff8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f92a 	bl	8003318 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e01a      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2220      	movs	r2, #32
 80030d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_I2C_Mem_Write+0x224>)
 80030e2:	400b      	ands	r3, r1
 80030e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4603      	mov	r3, r0
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	460b      	mov	r3, r1
 800313c:	813b      	strh	r3, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <I2C_RequestMemoryWrite+0xa4>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f9fd 	bl	8003550 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f89c 	bl	8003298 <I2C_WaitOnTXISFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02c      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
 800317a:	e015      	b.n	80031a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f882 	bl	8003298 <I2C_WaitOnTXISFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e012      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319e:	893b      	ldrh	r3, [r7, #8]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f830 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	80002000 	.word	0x80002000

080031d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d103      	bne.n	80031ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d007      	beq.n	800320c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	619a      	str	r2, [r3, #24]
  }
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	e022      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d01e      	beq.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fe fabd 	bl	80017b0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d113      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e00f      	b.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	d0cd      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a4:	e02c      	b.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f870 	bl	8003390 <I2C_IsErrorOccurred>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02a      	b.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d01e      	beq.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe fa75 	bl	80017b0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d1cb      	bne.n	80032a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003324:	e028      	b.n	8003378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f830 	bl	8003390 <I2C_IsErrorOccurred>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e026      	b.n	8003388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fa39 	bl	80017b0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d113      	bne.n	8003378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e007      	b.n	8003388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	d1cf      	bne.n	8003326 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d068      	beq.n	800348e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2210      	movs	r2, #16
 80033c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033c4:	e049      	b.n	800345a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d045      	beq.n	800345a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe f9ef 	bl	80017b0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_IsErrorOccurred+0x54>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d13a      	bne.n	800345a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003406:	d121      	bne.n	800344c <I2C_IsErrorOccurred+0xbc>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340e:	d01d      	beq.n	800344c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b20      	cmp	r3, #32
 8003414:	d01a      	beq.n	800344c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003424:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003426:	f7fe f9c3 	bl	80017b0 <HAL_GetTick>
 800342a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342c:	e00e      	b.n	800344c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800342e:	f7fe f9bf 	bl	80017b0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b19      	cmp	r3, #25
 800343a:	d907      	bls.n	800344c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f043 0320 	orr.w	r3, r3, #32
 8003442:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800344a:	e006      	b.n	800345a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d1e9      	bne.n	800342e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d003      	beq.n	8003470 <I2C_IsErrorOccurred+0xe0>
 8003468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0aa      	beq.n	80033c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2220      	movs	r2, #32
 800347e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe63 	bl	80031d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <I2C_IsErrorOccurred+0x1bc>)
 8003516:	400b      	ands	r3, r1
 8003518:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800353e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003542:	4618      	mov	r0, r3
 8003544:	3728      	adds	r7, #40	; 0x28
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	fe00e800 	.word	0xfe00e800

08003550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	4613      	mov	r3, r2
 8003560:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003570:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	4313      	orrs	r3, r2
 800357a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800357e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	0d5b      	lsrs	r3, r3, #21
 800358a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <I2C_TransferConfig+0x60>)
 8003590:	430b      	orrs	r3, r1
 8003592:	43db      	mvns	r3, r3
 8003594:	ea02 0103 	and.w	r1, r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	03ff63ff 	.word	0x03ff63ff

080035b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d138      	bne.n	800363c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e032      	b.n	800363e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	d139      	bne.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800366a:	2302      	movs	r3, #2
 800366c:	e033      	b.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2224      	movs	r2, #36	; 0x24
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e4:	b08f      	sub	sp, #60	; 0x3c
 80036e6:	af0a      	add	r7, sp, #40	; 0x28
 80036e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e116      	b.n	8003922 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fdda 	bl	80012c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2203      	movs	r2, #3
 8003718:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fd7a 	bl	800622c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	687e      	ldr	r6, [r7, #4]
 8003740:	466d      	mov	r5, sp
 8003742:	f106 0410 	add.w	r4, r6, #16
 8003746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003752:	e885 0003 	stmia.w	r5, {r0, r1}
 8003756:	1d33      	adds	r3, r6, #4
 8003758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	f002 fd0e 	bl	800617c <USB_CoreInit>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0d7      	b.n	8003922 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fd68 	bl	800624e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e04a      	b.n	800381a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	333d      	adds	r3, #61	; 0x3d
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	333c      	adds	r3, #60	; 0x3c
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	b298      	uxth	r0, r3
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3344      	adds	r3, #68	; 0x44
 80037c0:	4602      	mov	r2, r0
 80037c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3340      	adds	r3, #64	; 0x40
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3348      	adds	r3, #72	; 0x48
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334c      	adds	r3, #76	; 0x4c
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3354      	adds	r3, #84	; 0x54
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	3301      	adds	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d3af      	bcc.n	8003784 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e044      	b.n	80038b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3b5      	bcc.n	800382a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	687e      	ldr	r6, [r7, #4]
 80038c6:	466d      	mov	r5, sp
 80038c8:	f106 0410 	add.w	r4, r6, #16
 80038cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80038dc:	1d33      	adds	r3, r6, #4
 80038de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f002 fd01 	bl	80062e8 <USB_DevInit>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e014      	b.n	8003922 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f80b 	bl	800392c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f002 febf 	bl	800669e <USB_DevDisconnect>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800392c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_PCDEx_ActivateLPM+0x44>)
 800395c:	4313      	orrs	r3, r2
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	10000003 	.word	0x10000003

08003974 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40007000 	.word	0x40007000

08003994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e291      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8087 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b8:	4b96      	ldr	r3, [pc, #600]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00c      	beq.n	80039de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c4:	4b93      	ldr	r3, [pc, #588]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d112      	bne.n	80039f6 <HAL_RCC_OscConfig+0x62>
 80039d0:	4b90      	ldr	r3, [pc, #576]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	4b8d      	ldr	r3, [pc, #564]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x130>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e26b      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x7a>
 8003a00:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a83      	ldr	r2, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e02e      	b.n	8003a6c <HAL_RCC_OscConfig+0xd8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x9c>
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7b      	ldr	r2, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xd8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0xc0>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xd8>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6e      	ldr	r2, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6b      	ldr	r2, [pc, #428]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fe9c 	bl	80017b0 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fe98 	bl	80017b0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e21f      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe8>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fe88 	bl	80017b0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fe84 	bl	80017b0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e20b      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x110>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d069      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x190>
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d116      	bne.n	8003b24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e1df      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	493d      	ldr	r1, [pc, #244]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	e040      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fe3a 	bl	80017b0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fd fe36 	bl	80017b0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1bd      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4929      	ldr	r1, [pc, #164]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	e018      	b.n	8003ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fe16 	bl	80017b0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b88:	f7fd fe12 	bl	80017b0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e199      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d038      	beq.n	8003c24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fdf3 	bl	80017b0 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd fdef 	bl	80017b0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e176      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x23a>
 8003bec:	e01a      	b.n	8003c24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fdd9 	bl	80017b0 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fd fdd5 	bl	80017b0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d903      	bls.n	8003c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e15c      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
 8003c14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b91      	ldr	r3, [pc, #580]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ee      	bne.n	8003c02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a4 	beq.w	8003d7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c32:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a87      	ldr	r2, [pc, #540]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b85      	ldr	r3, [pc, #532]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5a:	4b82      	ldr	r3, [pc, #520]	; (8003e64 <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c66:	4b7f      	ldr	r3, [pc, #508]	; (8003e64 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7e      	ldr	r2, [pc, #504]	; (8003e64 <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fd fd9d 	bl	80017b0 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fd fd99 	bl	80017b0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	; 0x64
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e120      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8c:	4b75      	ldr	r3, [pc, #468]	; (8003e64 <HAL_RCC_OscConfig+0x4d0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x31a>
 8003ca0:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	e02d      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x33c>
 8003cb6:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a69      	ldr	r2, [pc, #420]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a66      	ldr	r2, [pc, #408]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	f023 0304 	bic.w	r3, r3, #4
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cce:	e01c      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x35e>
 8003cd8:	4b61      	ldr	r3, [pc, #388]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a60      	ldr	r2, [pc, #384]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	f043 0304 	orr.w	r3, r3, #4
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a5d      	ldr	r2, [pc, #372]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	e00b      	b.n	8003d0a <HAL_RCC_OscConfig+0x376>
 8003cf2:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a5a      	ldr	r2, [pc, #360]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	4b58      	ldr	r3, [pc, #352]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	f023 0304 	bic.w	r3, r3, #4
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d015      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd fd4d 	bl	80017b0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd fd49 	bl	80017b0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0ce      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCC_OscConfig+0x386>
 8003d3c:	e014      	b.n	8003d68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fd fd37 	bl	80017b0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fd33 	bl	80017b0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ee      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a4 	beq.w	8003ecc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d06b      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d149      	bne.n	8003e2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd fd04 	bl	80017b0 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd fd00 	bl	80017b0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e087      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	3b01      	subs	r3, #1
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	4313      	orrs	r3, r2
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003df6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fcd4 	bl	80017b0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd fcd0 	bl	80017b0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e057      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x478>
 8003e2a:	e04f      	b.n	8003ecc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0b      	ldr	r2, [pc, #44]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fcba 	bl	80017b0 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd fcb6 	bl	80017b0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e03d      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_OscConfig+0x4cc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4ac>
 8003e5e:	e035      	b.n	8003ecc <HAL_RCC_OscConfig+0x538>
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x544>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d121      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0d0      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d910      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b67      	ldr	r3, [pc, #412]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 020f 	bic.w	r2, r3, #15
 8003f0a:	4965      	ldr	r1, [pc, #404]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0b8      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f3c:	4b59      	ldr	r3, [pc, #356]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f54:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b50      	ldr	r3, [pc, #320]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	494d      	ldr	r1, [pc, #308]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d040      	beq.n	8004000 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d115      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e07f      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9e:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e073      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fae:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06b      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f023 0203 	bic.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4936      	ldr	r1, [pc, #216]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fbee 	bl	80017b0 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd8:	f7fd fbea 	bl	80017b0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e053      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 020c 	and.w	r2, r3, #12
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d1eb      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d210      	bcs.n	8004030 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 020f 	bic.w	r2, r3, #15
 8004016:	4922      	ldr	r1, [pc, #136]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e032      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4916      	ldr	r1, [pc, #88]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	490e      	ldr	r1, [pc, #56]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800406e:	f000 f821 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8004072:	4602      	mov	r2, r0
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	490a      	ldr	r1, [pc, #40]	; (80040a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004080:	5ccb      	ldrb	r3, [r1, r3]
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x1d0>)
 8004088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1d4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fb4a 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023c00 	.word	0x40023c00
 80040a4:	40023800 	.word	0x40023800
 80040a8:	080071a8 	.word	0x080071a8
 80040ac:	20000004 	.word	0x20000004
 80040b0:	20000008 	.word	0x20000008

080040b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b094      	sub	sp, #80	; 0x50
 80040ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	647b      	str	r3, [r7, #68]	; 0x44
 80040c0:	2300      	movs	r3, #0
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	2300      	movs	r3, #0
 80040c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040cc:	4b79      	ldr	r3, [pc, #484]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d00d      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x40>
 80040d8:	2b08      	cmp	r3, #8
 80040da:	f200 80e1 	bhi.w	80042a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x34>
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x3a>
 80040e6:	e0db      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b73      	ldr	r3, [pc, #460]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ec:	e0db      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ee:	4b73      	ldr	r3, [pc, #460]	; (80042bc <HAL_RCC_GetSysClockFreq+0x208>)
 80040f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f2:	e0d8      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f4:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040fe:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d063      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	2200      	movs	r2, #0
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38
 8004114:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
 800411e:	2300      	movs	r3, #0
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
 8004122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	f04f 0000 	mov.w	r0, #0
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	0159      	lsls	r1, r3, #5
 8004134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004138:	0150      	lsls	r0, r2, #5
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4621      	mov	r1, r4
 8004140:	1a51      	subs	r1, r2, r1
 8004142:	6139      	str	r1, [r7, #16]
 8004144:	4629      	mov	r1, r5
 8004146:	eb63 0301 	sbc.w	r3, r3, r1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004158:	4659      	mov	r1, fp
 800415a:	018b      	lsls	r3, r1, #6
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004162:	4651      	mov	r1, sl
 8004164:	018a      	lsls	r2, r1, #6
 8004166:	4651      	mov	r1, sl
 8004168:	ebb2 0801 	subs.w	r8, r2, r1
 800416c:	4659      	mov	r1, fp
 800416e:	eb63 0901 	sbc.w	r9, r3, r1
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004186:	4690      	mov	r8, r2
 8004188:	4699      	mov	r9, r3
 800418a:	4623      	mov	r3, r4
 800418c:	eb18 0303 	adds.w	r3, r8, r3
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	462b      	mov	r3, r5
 8004194:	eb49 0303 	adc.w	r3, r9, r3
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041a6:	4629      	mov	r1, r5
 80041a8:	024b      	lsls	r3, r1, #9
 80041aa:	4621      	mov	r1, r4
 80041ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041b0:	4621      	mov	r1, r4
 80041b2:	024a      	lsls	r2, r1, #9
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ba:	2200      	movs	r2, #0
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041c4:	f7fc f87c 	bl	80002c0 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4613      	mov	r3, r2
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d0:	e058      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	2200      	movs	r2, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	4611      	mov	r1, r2
 80041de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	f04f 0000 	mov.w	r0, #0
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	0159      	lsls	r1, r3, #5
 80041fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fe:	0150      	lsls	r0, r2, #5
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4641      	mov	r1, r8
 8004206:	ebb2 0a01 	subs.w	sl, r2, r1
 800420a:	4649      	mov	r1, r9
 800420c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800421c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004224:	ebb2 040a 	subs.w	r4, r2, sl
 8004228:	eb63 050b 	sbc.w	r5, r3, fp
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	00eb      	lsls	r3, r5, #3
 8004236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423a:	00e2      	lsls	r2, r4, #3
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	4643      	mov	r3, r8
 8004242:	18e3      	adds	r3, r4, r3
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	464b      	mov	r3, r9
 8004248:	eb45 0303 	adc.w	r3, r5, r3
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425a:	4629      	mov	r1, r5
 800425c:	028b      	lsls	r3, r1, #10
 800425e:	4621      	mov	r1, r4
 8004260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004264:	4621      	mov	r1, r4
 8004266:	028a      	lsls	r2, r1, #10
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426e:	2200      	movs	r2, #0
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	61fa      	str	r2, [r7, #28]
 8004274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004278:	f7fc f822 	bl	80002c0 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4613      	mov	r3, r2
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	3301      	adds	r3, #1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800429e:	e002      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3750      	adds	r7, #80	; 0x50
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	007a1200 	.word	0x007a1200

080042c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000004 	.word	0x20000004

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4903      	ldr	r1, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	080071b8 	.word	0x080071b8

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004304:	f7ff ffdc 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0b5b      	lsrs	r3, r3, #13
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	080071b8 	.word	0x080071b8

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004350:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a68      	ldr	r2, [pc, #416]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004356:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	4b66      	ldr	r3, [pc, #408]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	4964      	ldr	r1, [pc, #400]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d017      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	4959      	ldr	r1, [pc, #356]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a0:	d101      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043be:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	494a      	ldr	r1, [pc, #296]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d101      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 808b 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	4a39      	ldr	r2, [pc, #228]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6413      	str	r3, [r2, #64]	; 0x40
 8004418:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004424:	4b35      	ldr	r3, [pc, #212]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a34      	ldr	r2, [pc, #208]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004430:	f7fd f9be 	bl	80017b0 <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fd f9ba 	bl	80017b0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e357      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d035      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	d02e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004474:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800447e:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004494:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800449c:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d114      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd f982 	bl	80017b0 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b0:	f7fd f97e 	bl	80017b0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e319      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ee      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044de:	d111      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ee:	400b      	ands	r3, r1
 80044f0:	4901      	ldr	r1, [pc, #4]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
 80044f6:	e00b      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40007000 	.word	0x40007000
 8004500:	0ffffcff 	.word	0x0ffffcff
 8004504:	4baa      	ldr	r3, [pc, #680]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4aa9      	ldr	r2, [pc, #676]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800450e:	6093      	str	r3, [r2, #8]
 8004510:	4ba7      	ldr	r3, [pc, #668]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451c:	49a4      	ldr	r1, [pc, #656]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	4313      	orrs	r3, r2
 8004520:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d010      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800452e:	4ba0      	ldr	r3, [pc, #640]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	4a9e      	ldr	r2, [pc, #632]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800453e:	4b9c      	ldr	r3, [pc, #624]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	4999      	ldr	r1, [pc, #612]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800455c:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	4991      	ldr	r1, [pc, #580]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800457e:	4b8c      	ldr	r3, [pc, #560]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458c:	4988      	ldr	r1, [pc, #544]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a0:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	4980      	ldr	r1, [pc, #512]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c2:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4977      	ldr	r1, [pc, #476]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e4:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	496f      	ldr	r1, [pc, #444]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004606:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f023 020c 	bic.w	r2, r3, #12
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	4966      	ldr	r1, [pc, #408]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004628:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004636:	495e      	ldr	r1, [pc, #376]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	4955      	ldr	r1, [pc, #340]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800466c:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	494d      	ldr	r1, [pc, #308]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800468e:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	4944      	ldr	r1, [pc, #272]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046b0:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	493c      	ldr	r1, [pc, #240]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e0:	4933      	ldr	r1, [pc, #204]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046f4:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004702:	492b      	ldr	r1, [pc, #172]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	4922      	ldr	r1, [pc, #136]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	4912      	ldr	r1, [pc, #72]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004788:	4909      	ldr	r1, [pc, #36]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d006      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80d9 	beq.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a01      	ldr	r2, [pc, #4]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ae:	e001      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b6:	f7fc fffb 	bl	80017b0 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047be:	f7fc fff7 	bl	80017b0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d901      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e194      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d0:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11d      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047fe:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	0e1b      	lsrs	r3, r3, #24
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4957      	ldr	r1, [pc, #348]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02e      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004856:	d129      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	0f1b      	lsrs	r3, r3, #28
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	019a      	lsls	r2, r3, #6
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	071b      	lsls	r3, r3, #28
 800488c:	493d      	ldr	r1, [pc, #244]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004894:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489a:	f023 021f 	bic.w	r2, r3, #31
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	3b01      	subs	r3, #1
 80048a4:	4937      	ldr	r1, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048be:	0e1b      	lsrs	r3, r3, #24
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	0f1b      	lsrs	r3, r3, #28
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	019a      	lsls	r2, r3, #6
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	071b      	lsls	r3, r3, #28
 80048ec:	4925      	ldr	r1, [pc, #148]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d011      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	019a      	lsls	r2, r3, #6
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	071b      	lsls	r3, r3, #28
 800491c:	4919      	ldr	r1, [pc, #100]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800492e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004930:	f7fc ff3e 	bl	80017b0 <HAL_GetTick>
 8004934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004938:	f7fc ff3a 	bl	80017b0 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0d7      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 80cd 	bne.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496a:	f7fc ff21 	bl	80017b0 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004970:	e00a      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004972:	f7fc ff1d 	bl	80017b0 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	; 0x64
 800497e:	d903      	bls.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0ba      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004984:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004988:	4b5e      	ldr	r3, [pc, #376]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004994:	d0ed      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d009      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02e      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d12a      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049be:	4b51      	ldr	r3, [pc, #324]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049cc:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	0f1b      	lsrs	r3, r3, #28
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	019a      	lsls	r2, r3, #6
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	061b      	lsls	r3, r3, #24
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	4944      	ldr	r1, [pc, #272]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	493d      	ldr	r1, [pc, #244]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d022      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a28:	d11d      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a38:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	4929      	ldr	r1, [pc, #164]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d028      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	4917      	ldr	r1, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4911      	ldr	r1, [pc, #68]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fc fe6e 	bl	80017b0 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad8:	f7fc fe6a 	bl	80017b0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	; 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e007      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af6:	d1ef      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b26:	f040 808d 	bne.w	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004b2a:	4b93      	ldr	r3, [pc, #588]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b30:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b38:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b40:	d07c      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b48:	d87b      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b56:	d039      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004b58:	e073      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b5a:	4b87      	ldr	r3, [pc, #540]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b66:	4b84      	ldr	r3, [pc, #528]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6e:	4a83      	ldr	r2, [pc, #524]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e007      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	4a7f      	ldr	r2, [pc, #508]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004b88:	4b7b      	ldr	r3, [pc, #492]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	0e1b      	lsrs	r3, r3, #24
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004b96:	4b78      	ldr	r3, [pc, #480]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	fb03 f202 	mul.w	r2, r3, r2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004bb0:	4b71      	ldr	r3, [pc, #452]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
        break;
 8004bca:	e03b      	b.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bcc:	4b6a      	ldr	r3, [pc, #424]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d108      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bd8:	4b67      	ldr	r3, [pc, #412]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	4a66      	ldr	r2, [pc, #408]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	e007      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf2:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004c08:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb03 f202 	mul.w	r2, r3, r2
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004c22:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
        break;
 8004c3a:	e003      	b.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c3c:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004c3e:	617b      	str	r3, [r7, #20]
        break;
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004c42:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4a:	f040 808d 	bne.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004c4e:	4b4a      	ldr	r3, [pc, #296]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c5c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c64:	d07c      	beq.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c6c:	d87b      	bhi.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7a:	d039      	beq.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004c7c:	e073      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c7e:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c92:	4a3a      	ldr	r2, [pc, #232]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e007      	b.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c9c:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca4:	4a36      	ldr	r2, [pc, #216]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004cac:	4b32      	ldr	r3, [pc, #200]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	0e1b      	lsrs	r3, r3, #24
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004cba:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	fb03 f202 	mul.w	r2, r3, r2
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004cd4:	4b28      	ldr	r3, [pc, #160]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
        break;
 8004cee:	e03b      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d108      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e007      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d16:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	fb03 f202 	mul.w	r2, r3, r2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	3301      	adds	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
        break;
 8004d5e:	e003      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004d62:	617b      	str	r3, [r7, #20]
        break;
 8004d64:	e000      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8004d66:	bf00      	nop
      }
    }
  }

  return frequency;
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	00bb8000 	.word	0x00bb8000

08004d88 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e156      	b.n	8005054 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc fafe 	bl	80013bc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fc21 	bl	8005610 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d00c      	beq.n	8004df0 <HAL_SAI_Init+0x68>
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d80d      	bhi.n	8004df6 <HAL_SAI_Init+0x6e>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SAI_Init+0x5c>
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d003      	beq.n	8004dea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004de2:	e008      	b.n	8004df6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
      break;
 8004de8:	e006      	b.n	8004df8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004dea:	2310      	movs	r3, #16
 8004dec:	61fb      	str	r3, [r7, #28]
      break;
 8004dee:	e003      	b.n	8004df8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004df0:	2320      	movs	r3, #32
 8004df2:	61fb      	str	r3, [r7, #28]
      break;
 8004df4:	e000      	b.n	8004df8 <HAL_SAI_Init+0x70>
      break;
 8004df6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d81e      	bhi.n	8004e3e <HAL_SAI_Init+0xb6>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_SAI_Init+0x80>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e1f 	.word	0x08004e1f
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004e2f 	.word	0x08004e2f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e1c:	e010      	b.n	8004e40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e22:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e24:	e00c      	b.n	8004e40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e2a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e2c:	e008      	b.n	8004e40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e32:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004e3c:	e000      	b.n	8004e40 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004e3e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a85      	ldr	r2, [pc, #532]	; (800505c <HAL_SAI_Init+0x2d4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_SAI_Init+0xcc>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a84      	ldr	r2, [pc, #528]	; (8005060 <HAL_SAI_Init+0x2d8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d103      	bne.n	8004e5c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e54:	4a83      	ldr	r2, [pc, #524]	; (8005064 <HAL_SAI_Init+0x2dc>)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e002      	b.n	8004e62 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e5c:	4a82      	ldr	r2, [pc, #520]	; (8005068 <HAL_SAI_Init+0x2e0>)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04c      	beq.n	8004f04 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7a      	ldr	r2, [pc, #488]	; (800505c <HAL_SAI_Init+0x2d4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_SAI_Init+0xfa>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a78      	ldr	r2, [pc, #480]	; (8005060 <HAL_SAI_Init+0x2d8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d104      	bne.n	8004e8c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e86:	f7ff fe3f 	bl	8004b08 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e8a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a76      	ldr	r2, [pc, #472]	; (800506c <HAL_SAI_Init+0x2e4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_SAI_Init+0x118>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_SAI_Init+0x2e8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d104      	bne.n	8004eaa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004ea4:	f7ff fe30 	bl	8004b08 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ea8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	025b      	lsls	r3, r3, #9
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_SAI_Init+0x2ec>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	4b68      	ldr	r3, [pc, #416]	; (8005074 <HAL_SAI_Init+0x2ec>)
 8004ed4:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed8:	08da      	lsrs	r2, r3, #3
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	1aca      	subs	r2, r1, r3
 8004ee4:	2a08      	cmp	r2, #8
 8004ee6:	d904      	bls.n	8004ef2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d104      	bne.n	8004f04 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	085a      	lsrs	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_SAI_Init+0x18c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d109      	bne.n	8004f28 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_SAI_Init+0x198>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e001      	b.n	8004f24 <HAL_SAI_Init+0x19c>
 8004f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e008      	b.n	8004f3a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <HAL_SAI_Init+0x1ae>
 8004f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f34:	e000      	b.n	8004f38 <HAL_SAI_Init+0x1b0>
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <HAL_SAI_Init+0x2f0>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f5e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	431a      	orrs	r2, r3
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004f72:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f7e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	051b      	lsls	r3, r3, #20
 8004f86:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_SAI_Init+0x2f4>)
 8004f9c:	400b      	ands	r3, r1
 8004f9e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_SAI_Init+0x2f8>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6899      	ldr	r1, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004fde:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004fe4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004fea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ff4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f24f 0320 	movw	r3, #61472	; 0xf020
 800500c:	400b      	ands	r3, r1
 800500e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68d9      	ldr	r1, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	3b01      	subs	r3, #1
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40015804 	.word	0x40015804
 8005060:	40015824 	.word	0x40015824
 8005064:	40015800 	.word	0x40015800
 8005068:	40015c00 	.word	0x40015c00
 800506c:	40015c04 	.word	0x40015c04
 8005070:	40015c24 	.word	0x40015c24
 8005074:	cccccccd 	.word	0xcccccccd
 8005078:	ff05c010 	.word	0xff05c010
 800507c:	ffff1ff0 	.word	0xffff1ff0
 8005080:	fff88000 	.word	0xfff88000

08005084 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_SAI_Abort+0x1a>
 800509a:	2302      	movs	r3, #2
 800509c:	e072      	b.n	8005184 <HAL_SAI_Abort+0x100>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b4:	d149      	bne.n	800514a <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80050c4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01c      	beq.n	8005108 <HAL_SAI_Abort+0x84>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b12      	cmp	r3, #18
 80050d8:	d116      	bne.n	8005108 <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd f9b0 	bl	8002444 <HAL_DMA_Abort>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	2b80      	cmp	r3, #128	; 0x80
 80050f2:	d009      	beq.n	8005108 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01c      	beq.n	800514a <HAL_SAI_Abort+0xc6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b22      	cmp	r3, #34	; 0x22
 800511a:	d116      	bne.n	800514a <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd f98f 	bl	8002444 <HAL_DMA_Abort>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	2b80      	cmp	r3, #128	; 0x80
 8005134:	d009      	beq.n	800514a <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa57 	bl	8005610 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0208 	orr.w	r2, r2, #8
 8005170:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800519a:	f7fc fb09 	bl	80017b0 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SAI_Transmit_DMA+0x20>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e093      	b.n	80052d8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	f040 808c 	bne.w	80052d6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_SAI_Transmit_DMA+0x40>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e085      	b.n	80052d8 <HAL_SAI_Transmit_DMA+0x14c>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2212      	movs	r2, #18
 80051f6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_SAI_Transmit_DMA+0x154>)
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_SAI_Transmit_DMA+0x158>)
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520e:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <HAL_SAI_Transmit_DMA+0x15c>)
 8005210:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	2200      	movs	r2, #0
 8005218:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005222:	4619      	mov	r1, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	331c      	adds	r3, #28
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005232:	f7fd f8a7 	bl	8002384 <HAL_DMA_Start_IT>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e047      	b.n	80052d8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005248:	2100      	movs	r1, #0
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9aa 	bl	80055a4 <SAI_InterruptFlag>
 8005250:	4601      	mov	r1, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800526e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005270:	e015      	b.n	800529e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005272:	f7fc fa9d 	bl	80017b0 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	d90d      	bls.n	800529e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e01c      	b.n	80052d8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0e2      	beq.n	8005272 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	080056e1 	.word	0x080056e1
 80052e4:	08005681 	.word	0x08005681
 80052e8:	080056fd 	.word	0x080056fd

080052ec <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8137 	beq.w	8005570 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <HAL_SAI_IRQHandler+0x4c>
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	e11b      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01e      	beq.n	8005380 <HAL_SAI_IRQHandler+0x94>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b22      	cmp	r3, #34	; 0x22
 800535e:	d101      	bne.n	8005364 <HAL_SAI_IRQHandler+0x78>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_SAI_IRQHandler+0x7a>
 8005364:	2302      	movs	r3, #2
 8005366:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f909 	bl	8005590 <HAL_SAI_ErrorCallback>
 800537e:	e0f7      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <HAL_SAI_IRQHandler+0xc2>
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2202      	movs	r2, #2
 800539a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80e5 	beq.w	8005570 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 80053ac:	e0e0      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d039      	beq.n	800542c <HAL_SAI_IRQHandler+0x140>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d034      	beq.n	800542c <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2220      	movs	r2, #32
 80053c8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f0:	4a61      	ldr	r2, [pc, #388]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 80053f2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fd f893 	bl	8002524 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053fe:	e0b4      	b.n	800556a <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80b0 	beq.w	800556a <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a5a      	ldr	r2, [pc, #360]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd f884 	bl	8002524 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800541c:	e0a5      	b.n	800556a <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fe30 	bl	8005084 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8b3 	bl	8005590 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800542a:	e09e      	b.n	800556a <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d038      	beq.n	80054a8 <HAL_SAI_IRQHandler+0x1bc>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d033      	beq.n	80054a8 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2240      	movs	r2, #64	; 0x40
 8005446:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800544e:	f043 0208 	orr.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01b      	beq.n	800549a <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	4a42      	ldr	r2, [pc, #264]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 8005470:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005476:	4618      	mov	r0, r3
 8005478:	f7fd f854 	bl	8002524 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800547c:	e077      	b.n	800556e <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	2b00      	cmp	r3, #0
 8005484:	d073      	beq.n	800556e <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	4a3b      	ldr	r2, [pc, #236]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd f846 	bl	8002524 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005498:	e069      	b.n	800556e <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fdf2 	bl	8005084 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f875 	bl	8005590 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054a6:	e062      	b.n	800556e <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d041      	beq.n	8005536 <HAL_SAI_IRQHandler+0x24a>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d03c      	beq.n	8005536 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2204      	movs	r2, #4
 80054c2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 80054e2:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd f81b 	bl	8002524 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 80054ee:	e03f      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <HAL_SAI_IRQHandler+0x28c>)
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd f80d 	bl	8002524 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800550a:	e031      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2200      	movs	r2, #0
 8005512:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f82e 	bl	8005590 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8005534:	e01c      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d017      	beq.n	8005570 <HAL_SAI_IRQHandler+0x284>
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d012      	beq.n	8005570 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005558:	f043 0210 	orr.w	r2, r3, #16
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f814 	bl	8005590 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005568:	e002      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800556e:	bf00      	nop
}
 8005570:	bf00      	nop
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	08005763 	.word	0x08005763

0800557c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d103      	bne.n	80055c0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d10b      	bne.n	80055e0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d003      	beq.n	80055d8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d103      	bne.n	80055e0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f043 0310 	orr.w	r3, r3, #16
 80055de:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <SAI_InterruptFlag+0x4c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d104      	bne.n	80055fa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e003      	b.n	8005602 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f043 0304 	orr.w	r3, r3, #4
 8005600:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <SAI_Disable+0x68>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <SAI_Disable+0x6c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0b1b      	lsrs	r3, r3, #12
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800563a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	60fa      	str	r2, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	72fb      	strb	r3, [r7, #11]
      break;
 800565a:	e006      	b.n	800566a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e8      	bne.n	800563c <SAI_Disable+0x2c>

  return status;
 800566a:	7afb      	ldrb	r3, [r7, #11]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000004 	.word	0x20000004
 800567c:	95cbec1b 	.word	0x95cbec1b

08005680 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d01c      	beq.n	80056d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056b0:	2100      	movs	r1, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff ff76 	bl	80055a4 <SAI_InterruptFlag>
 80056b8:	4603      	mov	r3, r0
 80056ba:	43d9      	mvns	r1, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	400a      	ands	r2, r1
 80056c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7fa ff72 	bl	80005bc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff ff44 	bl	800557c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005710:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	2b01      	cmp	r3, #1
 8005722:	d004      	beq.n	800572e <SAI_DMAError+0x32>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	2b01      	cmp	r3, #1
 800572c:	d112      	bne.n	8005754 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800573c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff66 	bl	8005610 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff1b 	bl	8005590 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800577e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2200      	movs	r2, #0
 8005786:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f04f 32ff 	mov.w	r2, #4294967295
 8005790:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005798:	2b20      	cmp	r3, #32
 800579a:	d00a      	beq.n	80057b2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff ff37 	bl	8005610 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0208 	orr.w	r2, r2, #8
 80057b0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff fee4 	bl	8005590 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e040      	b.n	8005864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fd08 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	; 0x24
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8b0 	bl	8005974 <UART_SetConfig>
 8005814:	4603      	mov	r3, r0
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e022      	b.n	8005864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fb08 	bl	8005e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800583a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800584a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb8f 	bl	8005f80 <UART_CheckIdleState>
 8005862:	4603      	mov	r3, r0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005880:	2b20      	cmp	r3, #32
 8005882:	d171      	bne.n	8005968 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Transmit+0x24>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e06a      	b.n	800596a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2221      	movs	r2, #33	; 0x21
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a2:	f7fb ff85 	bl	80017b0 <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x68>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058dc:	e02c      	b.n	8005938 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fb80 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e038      	b.n	800596a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1cc      	bne.n	80058de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fb4d 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e005      	b.n	800596a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4ba6      	ldr	r3, [pc, #664]	; (8005c38 <UART_SetConfig+0x2c4>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a94      	ldr	r2, [pc, #592]	; (8005c3c <UART_SetConfig+0x2c8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d120      	bne.n	8005a32 <UART_SetConfig+0xbe>
 80059f0:	4b93      	ldr	r3, [pc, #588]	; (8005c40 <UART_SetConfig+0x2cc>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d816      	bhi.n	8005a2c <UART_SetConfig+0xb8>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x90>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a1b 	.word	0x08005a1b
 8005a10:	08005a27 	.word	0x08005a27
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e150      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e14d      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e14a      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e147      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e144      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a83      	ldr	r2, [pc, #524]	; (8005c44 <UART_SetConfig+0x2d0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d132      	bne.n	8005aa2 <UART_SetConfig+0x12e>
 8005a3c:	4b80      	ldr	r3, [pc, #512]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d828      	bhi.n	8005a9c <UART_SetConfig+0x128>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0xdc>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a85 	.word	0x08005a85
 8005a54:	08005a9d 	.word	0x08005a9d
 8005a58:	08005a9d 	.word	0x08005a9d
 8005a5c:	08005a9d 	.word	0x08005a9d
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a9d 	.word	0x08005a9d
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005a9d 	.word	0x08005a9d
 8005a70:	08005a8b 	.word	0x08005a8b
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005a97 	.word	0x08005a97
 8005a84:	2300      	movs	r3, #0
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e118      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e115      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a90:	2304      	movs	r3, #4
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e112      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a96:	2308      	movs	r3, #8
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e10f      	b.n	8005cbc <UART_SetConfig+0x348>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e10c      	b.n	8005cbc <UART_SetConfig+0x348>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a68      	ldr	r2, [pc, #416]	; (8005c48 <UART_SetConfig+0x2d4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d120      	bne.n	8005aee <UART_SetConfig+0x17a>
 8005aac:	4b64      	ldr	r3, [pc, #400]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ab6:	2b30      	cmp	r3, #48	; 0x30
 8005ab8:	d013      	beq.n	8005ae2 <UART_SetConfig+0x16e>
 8005aba:	2b30      	cmp	r3, #48	; 0x30
 8005abc:	d814      	bhi.n	8005ae8 <UART_SetConfig+0x174>
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d009      	beq.n	8005ad6 <UART_SetConfig+0x162>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d810      	bhi.n	8005ae8 <UART_SetConfig+0x174>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <UART_SetConfig+0x15c>
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d006      	beq.n	8005adc <UART_SetConfig+0x168>
 8005ace:	e00b      	b.n	8005ae8 <UART_SetConfig+0x174>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e0f2      	b.n	8005cbc <UART_SetConfig+0x348>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e0ef      	b.n	8005cbc <UART_SetConfig+0x348>
 8005adc:	2304      	movs	r3, #4
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0ec      	b.n	8005cbc <UART_SetConfig+0x348>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0e9      	b.n	8005cbc <UART_SetConfig+0x348>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e0e6      	b.n	8005cbc <UART_SetConfig+0x348>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <UART_SetConfig+0x2d8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d120      	bne.n	8005b3a <UART_SetConfig+0x1c6>
 8005af8:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b02:	2bc0      	cmp	r3, #192	; 0xc0
 8005b04:	d013      	beq.n	8005b2e <UART_SetConfig+0x1ba>
 8005b06:	2bc0      	cmp	r3, #192	; 0xc0
 8005b08:	d814      	bhi.n	8005b34 <UART_SetConfig+0x1c0>
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d009      	beq.n	8005b22 <UART_SetConfig+0x1ae>
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d810      	bhi.n	8005b34 <UART_SetConfig+0x1c0>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <UART_SetConfig+0x1a8>
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d006      	beq.n	8005b28 <UART_SetConfig+0x1b4>
 8005b1a:	e00b      	b.n	8005b34 <UART_SetConfig+0x1c0>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e0cc      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b22:	2302      	movs	r3, #2
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e0c9      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e0c6      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e0c3      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b34:	2310      	movs	r3, #16
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e0c0      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a44      	ldr	r2, [pc, #272]	; (8005c50 <UART_SetConfig+0x2dc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d125      	bne.n	8005b90 <UART_SetConfig+0x21c>
 8005b44:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b52:	d017      	beq.n	8005b84 <UART_SetConfig+0x210>
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d817      	bhi.n	8005b8a <UART_SetConfig+0x216>
 8005b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5e:	d00b      	beq.n	8005b78 <UART_SetConfig+0x204>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d811      	bhi.n	8005b8a <UART_SetConfig+0x216>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <UART_SetConfig+0x1fe>
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d006      	beq.n	8005b7e <UART_SetConfig+0x20a>
 8005b70:	e00b      	b.n	8005b8a <UART_SetConfig+0x216>
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e0a1      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e09e      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e09b      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b84:	2308      	movs	r3, #8
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e098      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e095      	b.n	8005cbc <UART_SetConfig+0x348>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <UART_SetConfig+0x2e0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d125      	bne.n	8005be6 <UART_SetConfig+0x272>
 8005b9a:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba8:	d017      	beq.n	8005bda <UART_SetConfig+0x266>
 8005baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bae:	d817      	bhi.n	8005be0 <UART_SetConfig+0x26c>
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d00b      	beq.n	8005bce <UART_SetConfig+0x25a>
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d811      	bhi.n	8005be0 <UART_SetConfig+0x26c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <UART_SetConfig+0x254>
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d006      	beq.n	8005bd4 <UART_SetConfig+0x260>
 8005bc6:	e00b      	b.n	8005be0 <UART_SetConfig+0x26c>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e076      	b.n	8005cbc <UART_SetConfig+0x348>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e073      	b.n	8005cbc <UART_SetConfig+0x348>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e070      	b.n	8005cbc <UART_SetConfig+0x348>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e06d      	b.n	8005cbc <UART_SetConfig+0x348>
 8005be0:	2310      	movs	r3, #16
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e06a      	b.n	8005cbc <UART_SetConfig+0x348>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <UART_SetConfig+0x2e4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d138      	bne.n	8005c62 <UART_SetConfig+0x2ee>
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <UART_SetConfig+0x2cc>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfe:	d017      	beq.n	8005c30 <UART_SetConfig+0x2bc>
 8005c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c04:	d82a      	bhi.n	8005c5c <UART_SetConfig+0x2e8>
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	d00b      	beq.n	8005c24 <UART_SetConfig+0x2b0>
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c10:	d824      	bhi.n	8005c5c <UART_SetConfig+0x2e8>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <UART_SetConfig+0x2aa>
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d006      	beq.n	8005c2a <UART_SetConfig+0x2b6>
 8005c1c:	e01e      	b.n	8005c5c <UART_SetConfig+0x2e8>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e04b      	b.n	8005cbc <UART_SetConfig+0x348>
 8005c24:	2302      	movs	r3, #2
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e048      	b.n	8005cbc <UART_SetConfig+0x348>
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e045      	b.n	8005cbc <UART_SetConfig+0x348>
 8005c30:	2308      	movs	r3, #8
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e042      	b.n	8005cbc <UART_SetConfig+0x348>
 8005c36:	bf00      	nop
 8005c38:	efff69f3 	.word	0xefff69f3
 8005c3c:	40011000 	.word	0x40011000
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	40007800 	.word	0x40007800
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e02c      	b.n	8005cbc <UART_SetConfig+0x348>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a72      	ldr	r2, [pc, #456]	; (8005e30 <UART_SetConfig+0x4bc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d125      	bne.n	8005cb8 <UART_SetConfig+0x344>
 8005c6c:	4b71      	ldr	r3, [pc, #452]	; (8005e34 <UART_SetConfig+0x4c0>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c7a:	d017      	beq.n	8005cac <UART_SetConfig+0x338>
 8005c7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c80:	d817      	bhi.n	8005cb2 <UART_SetConfig+0x33e>
 8005c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c86:	d00b      	beq.n	8005ca0 <UART_SetConfig+0x32c>
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	d811      	bhi.n	8005cb2 <UART_SetConfig+0x33e>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <UART_SetConfig+0x326>
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c96:	d006      	beq.n	8005ca6 <UART_SetConfig+0x332>
 8005c98:	e00b      	b.n	8005cb2 <UART_SetConfig+0x33e>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e00d      	b.n	8005cbc <UART_SetConfig+0x348>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e00a      	b.n	8005cbc <UART_SetConfig+0x348>
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e007      	b.n	8005cbc <UART_SetConfig+0x348>
 8005cac:	2308      	movs	r3, #8
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e004      	b.n	8005cbc <UART_SetConfig+0x348>
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e001      	b.n	8005cbc <UART_SetConfig+0x348>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc4:	d15b      	bne.n	8005d7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d828      	bhi.n	8005d1e <UART_SetConfig+0x3aa>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0x360>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005cf9 	.word	0x08005cf9
 8005cd8:	08005d01 	.word	0x08005d01
 8005cdc:	08005d09 	.word	0x08005d09
 8005ce0:	08005d1f 	.word	0x08005d1f
 8005ce4:	08005d0f 	.word	0x08005d0f
 8005ce8:	08005d1f 	.word	0x08005d1f
 8005cec:	08005d1f 	.word	0x08005d1f
 8005cf0:	08005d1f 	.word	0x08005d1f
 8005cf4:	08005d17 	.word	0x08005d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf8:	f7fe faee 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8005cfc:	61b8      	str	r0, [r7, #24]
        break;
 8005cfe:	e013      	b.n	8005d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d00:	f7fe fafe 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8005d04:	61b8      	str	r0, [r7, #24]
        break;
 8005d06:	e00f      	b.n	8005d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d08:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <UART_SetConfig+0x4c4>)
 8005d0a:	61bb      	str	r3, [r7, #24]
        break;
 8005d0c:	e00c      	b.n	8005d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0e:	f7fe f9d1 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8005d12:	61b8      	str	r0, [r7, #24]
        break;
 8005d14:	e008      	b.n	8005d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1a:	61bb      	str	r3, [r7, #24]
        break;
 8005d1c:	e004      	b.n	8005d28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	77bb      	strb	r3, [r7, #30]
        break;
 8005d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d074      	beq.n	8005e18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	441a      	add	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d916      	bls.n	8005d78 <UART_SetConfig+0x404>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d212      	bcs.n	8005d78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f023 030f 	bic.w	r3, r3, #15
 8005d5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	89fa      	ldrh	r2, [r7, #14]
 8005d74:	60da      	str	r2, [r3, #12]
 8005d76:	e04f      	b.n	8005e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77bb      	strb	r3, [r7, #30]
 8005d7c:	e04c      	b.n	8005e18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d7e:	7ffb      	ldrb	r3, [r7, #31]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d828      	bhi.n	8005dd6 <UART_SetConfig+0x462>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x418>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	08005dd7 	.word	0x08005dd7
 8005d9c:	08005dc7 	.word	0x08005dc7
 8005da0:	08005dd7 	.word	0x08005dd7
 8005da4:	08005dd7 	.word	0x08005dd7
 8005da8:	08005dd7 	.word	0x08005dd7
 8005dac:	08005dcf 	.word	0x08005dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7fe fa92 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8005db4:	61b8      	str	r0, [r7, #24]
        break;
 8005db6:	e013      	b.n	8005de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe faa2 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	61b8      	str	r0, [r7, #24]
        break;
 8005dbe:	e00f      	b.n	8005de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b1d      	ldr	r3, [pc, #116]	; (8005e38 <UART_SetConfig+0x4c4>)
 8005dc2:	61bb      	str	r3, [r7, #24]
        break;
 8005dc4:	e00c      	b.n	8005de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe f975 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8005dca:	61b8      	str	r0, [r7, #24]
        break;
 8005dcc:	e008      	b.n	8005de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd2:	61bb      	str	r3, [r7, #24]
        break;
 8005dd4:	e004      	b.n	8005de0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8005dde:	bf00      	nop
    }

    if (pclk != 0U)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	085a      	lsrs	r2, r3, #1
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	441a      	add	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b0f      	cmp	r3, #15
 8005dfe:	d909      	bls.n	8005e14 <UART_SetConfig+0x4a0>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e06:	d205      	bcs.n	8005e14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e001      	b.n	8005e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e24:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40007c00 	.word	0x40007c00
 8005e34:	40023800 	.word	0x40023800
 8005e38:	00f42400 	.word	0x00f42400

08005e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3a:	d10a      	bne.n	8005f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f90:	f7fb fc0e 	bl	80017b0 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10e      	bne.n	8005fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f81b 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e011      	b.n	8005fe6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b09c      	sub	sp, #112	; 0x70
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	e0a7      	b.n	8006150 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	f000 80a3 	beq.w	8006150 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fb fbd1 	bl	80017b0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <UART_WaitOnFlagUntilTimeout+0x32>
 800601a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601c:	2b00      	cmp	r3, #0
 800601e:	d13f      	bne.n	80060a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800602e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006034:	667b      	str	r3, [r7, #100]	; 0x64
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800604c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	663b      	str	r3, [r7, #96]	; 0x60
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006072:	64ba      	str	r2, [r7, #72]	; 0x48
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e5      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e068      	b.n	8006172 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d050      	beq.n	8006150 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060bc:	d148      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
 80060e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e6      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	66bb      	str	r3, [r7, #104]	; 0x68
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800611a:	623a      	str	r2, [r7, #32]
 800611c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	69f9      	ldr	r1, [r7, #28]
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	61bb      	str	r3, [r7, #24]
   return(result);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e5      	bne.n	80060fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e010      	b.n	8006172 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	429a      	cmp	r2, r3
 800616c:	f43f af48 	beq.w	8006000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3770      	adds	r7, #112	; 0x70
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800617c:	b084      	sub	sp, #16
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	f107 001c 	add.w	r0, r7, #28
 800618a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2b01      	cmp	r3, #1
 8006192:	d120      	bne.n	80061d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <USB_CoreInit+0xac>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa96 	bl	80066fc <USB_CoreReset>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e010      	b.n	80061f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa8a 	bl	80066fc <USB_CoreReset>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10b      	bne.n	8006216 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f043 0206 	orr.w	r2, r3, #6
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006222:	b004      	add	sp, #16
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	ffbdffbf 	.word	0xffbdffbf

0800622c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 0201 	bic.w	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d115      	bne.n	800629c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800627c:	2001      	movs	r0, #1
 800627e:	f7fb faa3 	bl	80017c8 <HAL_Delay>
      ms++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa29 	bl	80066e0 <USB_GetMode>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d01e      	beq.n	80062d2 <USB_SetCurrentMode+0x84>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b31      	cmp	r3, #49	; 0x31
 8006298:	d9f0      	bls.n	800627c <USB_SetCurrentMode+0x2e>
 800629a:	e01a      	b.n	80062d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d115      	bne.n	80062ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062ae:	2001      	movs	r0, #1
 80062b0:	f7fb fa8a 	bl	80017c8 <HAL_Delay>
      ms++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa10 	bl	80066e0 <USB_GetMode>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <USB_SetCurrentMode+0x84>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b31      	cmp	r3, #49	; 0x31
 80062ca:	d9f0      	bls.n	80062ae <USB_SetCurrentMode+0x60>
 80062cc:	e001      	b.n	80062d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e005      	b.n	80062de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b32      	cmp	r3, #50	; 0x32
 80062d6:	d101      	bne.n	80062dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062e8:	b084      	sub	sp, #16
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	e009      	b.n	800631c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3340      	adds	r3, #64	; 0x40
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	2200      	movs	r2, #0
 8006314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3301      	adds	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b0e      	cmp	r3, #14
 8006320:	d9f2      	bls.n	8006308 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11c      	bne.n	8006362 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006336:	f043 0302 	orr.w	r3, r3, #2
 800633a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e005      	b.n	800636e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	4619      	mov	r1, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	461a      	mov	r2, r3
 800638a:	680b      	ldr	r3, [r1, #0]
 800638c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10c      	bne.n	80063ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800639a:	2100      	movs	r1, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f965 	bl	800666c <USB_SetDevSpeed>
 80063a2:	e008      	b.n	80063b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063a4:	2101      	movs	r1, #1
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f960 	bl	800666c <USB_SetDevSpeed>
 80063ac:	e003      	b.n	80063b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063ae:	2103      	movs	r1, #3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f95b 	bl	800666c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063b6:	2110      	movs	r1, #16
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8f3 	bl	80065a4 <USB_FlushTxFifo>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f91f 	bl	800660c <USB_FlushRxFifo>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	461a      	mov	r2, r3
 80063e0:	2300      	movs	r3, #0
 80063e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	461a      	mov	r2, r3
 80063ec:	2300      	movs	r3, #0
 80063ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	461a      	mov	r2, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	e043      	b.n	800648a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006418:	d118      	bne.n	800644c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	461a      	mov	r2, r3
 800642e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	e013      	b.n	800645e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	461a      	mov	r2, r3
 8006444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e008      	b.n	800645e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646a:	461a      	mov	r2, r3
 800646c:	2300      	movs	r3, #0
 800646e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	461a      	mov	r2, r3
 800647e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006482:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3b7      	bcc.n	8006402 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e043      	b.n	8006520 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ae:	d118      	bne.n	80064e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	461a      	mov	r2, r3
 80064c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e013      	b.n	80064f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	461a      	mov	r2, r3
 80064da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e008      	b.n	80064f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	2300      	movs	r3, #0
 80064f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	2300      	movs	r3, #0
 8006504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	461a      	mov	r2, r3
 8006514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006518:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	3301      	adds	r3, #1
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3b7      	bcc.n	8006498 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006548:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d105      	bne.n	800655c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f043 0210 	orr.w	r2, r3, #16
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <USB_DevInit+0x2b4>)
 8006562:	4313      	orrs	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f043 0208 	orr.w	r2, r3, #8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800657a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <USB_DevInit+0x2b8>)
 8006586:	4313      	orrs	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006598:	b004      	add	sp, #16
 800659a:	4770      	bx	lr
 800659c:	803c3800 	.word	0x803c3800
 80065a0:	40000004 	.word	0x40000004

080065a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a13      	ldr	r2, [pc, #76]	; (8006608 <USB_FlushTxFifo+0x64>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d901      	bls.n	80065c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e01b      	b.n	80065fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	daf2      	bge.n	80065b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	019b      	lsls	r3, r3, #6
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a08      	ldr	r2, [pc, #32]	; (8006608 <USB_FlushTxFifo+0x64>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e006      	b.n	80065fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d0f0      	beq.n	80065dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	00030d40 	.word	0x00030d40

0800660c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a11      	ldr	r2, [pc, #68]	; (8006668 <USB_FlushRxFifo+0x5c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e018      	b.n	800665c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	daf2      	bge.n	8006618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2210      	movs	r2, #16
 800663a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a08      	ldr	r2, [pc, #32]	; (8006668 <USB_FlushRxFifo+0x5c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e006      	b.n	800665c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d0f0      	beq.n	800663c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	00030d40 	.word	0x00030d40

0800666c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066cc:	f043 0302 	orr.w	r3, r3, #2
 80066d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f003 0301 	and.w	r3, r3, #1
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <USB_CoreReset+0x64>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e01b      	b.n	8006752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	daf2      	bge.n	8006708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f043 0201 	orr.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a09      	ldr	r2, [pc, #36]	; (8006760 <USB_CoreReset+0x64>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d901      	bls.n	8006744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e006      	b.n	8006752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d0f0      	beq.n	8006732 <USB_CoreReset+0x36>

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	00030d40 	.word	0x00030d40

08006764 <siprintf>:
 8006764:	b40e      	push	{r1, r2, r3}
 8006766:	b500      	push	{lr}
 8006768:	b09c      	sub	sp, #112	; 0x70
 800676a:	ab1d      	add	r3, sp, #116	; 0x74
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	9006      	str	r0, [sp, #24]
 8006770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006774:	4809      	ldr	r0, [pc, #36]	; (800679c <siprintf+0x38>)
 8006776:	9107      	str	r1, [sp, #28]
 8006778:	9104      	str	r1, [sp, #16]
 800677a:	4909      	ldr	r1, [pc, #36]	; (80067a0 <siprintf+0x3c>)
 800677c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006780:	9105      	str	r1, [sp, #20]
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	a902      	add	r1, sp, #8
 8006788:	f000 f992 	bl	8006ab0 <_svfiprintf_r>
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	b01c      	add	sp, #112	; 0x70
 8006794:	f85d eb04 	ldr.w	lr, [sp], #4
 8006798:	b003      	add	sp, #12
 800679a:	4770      	bx	lr
 800679c:	2000005c 	.word	0x2000005c
 80067a0:	ffff0208 	.word	0xffff0208

080067a4 <memset>:
 80067a4:	4402      	add	r2, r0
 80067a6:	4603      	mov	r3, r0
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d100      	bne.n	80067ae <memset+0xa>
 80067ac:	4770      	bx	lr
 80067ae:	f803 1b01 	strb.w	r1, [r3], #1
 80067b2:	e7f9      	b.n	80067a8 <memset+0x4>

080067b4 <__errno>:
 80067b4:	4b01      	ldr	r3, [pc, #4]	; (80067bc <__errno+0x8>)
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	2000005c 	.word	0x2000005c

080067c0 <__libc_init_array>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4d0d      	ldr	r5, [pc, #52]	; (80067f8 <__libc_init_array+0x38>)
 80067c4:	4c0d      	ldr	r4, [pc, #52]	; (80067fc <__libc_init_array+0x3c>)
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	2600      	movs	r6, #0
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	d109      	bne.n	80067e4 <__libc_init_array+0x24>
 80067d0:	4d0b      	ldr	r5, [pc, #44]	; (8006800 <__libc_init_array+0x40>)
 80067d2:	4c0c      	ldr	r4, [pc, #48]	; (8006804 <__libc_init_array+0x44>)
 80067d4:	f000 fc6a 	bl	80070ac <_init>
 80067d8:	1b64      	subs	r4, r4, r5
 80067da:	10a4      	asrs	r4, r4, #2
 80067dc:	2600      	movs	r6, #0
 80067de:	42a6      	cmp	r6, r4
 80067e0:	d105      	bne.n	80067ee <__libc_init_array+0x2e>
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e8:	4798      	blx	r3
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7ee      	b.n	80067cc <__libc_init_array+0xc>
 80067ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f2:	4798      	blx	r3
 80067f4:	3601      	adds	r6, #1
 80067f6:	e7f2      	b.n	80067de <__libc_init_array+0x1e>
 80067f8:	08007204 	.word	0x08007204
 80067fc:	08007204 	.word	0x08007204
 8006800:	08007204 	.word	0x08007204
 8006804:	08007208 	.word	0x08007208

08006808 <__retarget_lock_acquire_recursive>:
 8006808:	4770      	bx	lr

0800680a <__retarget_lock_release_recursive>:
 800680a:	4770      	bx	lr

0800680c <_free_r>:
 800680c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800680e:	2900      	cmp	r1, #0
 8006810:	d044      	beq.n	800689c <_free_r+0x90>
 8006812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006816:	9001      	str	r0, [sp, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f1a1 0404 	sub.w	r4, r1, #4
 800681e:	bfb8      	it	lt
 8006820:	18e4      	addlt	r4, r4, r3
 8006822:	f000 f8df 	bl	80069e4 <__malloc_lock>
 8006826:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <_free_r+0x94>)
 8006828:	9801      	ldr	r0, [sp, #4]
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	b933      	cbnz	r3, 800683c <_free_r+0x30>
 800682e:	6063      	str	r3, [r4, #4]
 8006830:	6014      	str	r4, [r2, #0]
 8006832:	b003      	add	sp, #12
 8006834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006838:	f000 b8da 	b.w	80069f0 <__malloc_unlock>
 800683c:	42a3      	cmp	r3, r4
 800683e:	d908      	bls.n	8006852 <_free_r+0x46>
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	1961      	adds	r1, r4, r5
 8006844:	428b      	cmp	r3, r1
 8006846:	bf01      	itttt	eq
 8006848:	6819      	ldreq	r1, [r3, #0]
 800684a:	685b      	ldreq	r3, [r3, #4]
 800684c:	1949      	addeq	r1, r1, r5
 800684e:	6021      	streq	r1, [r4, #0]
 8006850:	e7ed      	b.n	800682e <_free_r+0x22>
 8006852:	461a      	mov	r2, r3
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	b10b      	cbz	r3, 800685c <_free_r+0x50>
 8006858:	42a3      	cmp	r3, r4
 800685a:	d9fa      	bls.n	8006852 <_free_r+0x46>
 800685c:	6811      	ldr	r1, [r2, #0]
 800685e:	1855      	adds	r5, r2, r1
 8006860:	42a5      	cmp	r5, r4
 8006862:	d10b      	bne.n	800687c <_free_r+0x70>
 8006864:	6824      	ldr	r4, [r4, #0]
 8006866:	4421      	add	r1, r4
 8006868:	1854      	adds	r4, r2, r1
 800686a:	42a3      	cmp	r3, r4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	d1e0      	bne.n	8006832 <_free_r+0x26>
 8006870:	681c      	ldr	r4, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	6053      	str	r3, [r2, #4]
 8006876:	440c      	add	r4, r1
 8006878:	6014      	str	r4, [r2, #0]
 800687a:	e7da      	b.n	8006832 <_free_r+0x26>
 800687c:	d902      	bls.n	8006884 <_free_r+0x78>
 800687e:	230c      	movs	r3, #12
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	e7d6      	b.n	8006832 <_free_r+0x26>
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	1961      	adds	r1, r4, r5
 8006888:	428b      	cmp	r3, r1
 800688a:	bf04      	itt	eq
 800688c:	6819      	ldreq	r1, [r3, #0]
 800688e:	685b      	ldreq	r3, [r3, #4]
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	bf04      	itt	eq
 8006894:	1949      	addeq	r1, r1, r5
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	6054      	str	r4, [r2, #4]
 800689a:	e7ca      	b.n	8006832 <_free_r+0x26>
 800689c:	b003      	add	sp, #12
 800689e:	bd30      	pop	{r4, r5, pc}
 80068a0:	20000c98 	.word	0x20000c98

080068a4 <sbrk_aligned>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4e0e      	ldr	r6, [pc, #56]	; (80068e0 <sbrk_aligned+0x3c>)
 80068a8:	460c      	mov	r4, r1
 80068aa:	6831      	ldr	r1, [r6, #0]
 80068ac:	4605      	mov	r5, r0
 80068ae:	b911      	cbnz	r1, 80068b6 <sbrk_aligned+0x12>
 80068b0:	f000 fba6 	bl	8007000 <_sbrk_r>
 80068b4:	6030      	str	r0, [r6, #0]
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fba1 	bl	8007000 <_sbrk_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d00a      	beq.n	80068d8 <sbrk_aligned+0x34>
 80068c2:	1cc4      	adds	r4, r0, #3
 80068c4:	f024 0403 	bic.w	r4, r4, #3
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d007      	beq.n	80068dc <sbrk_aligned+0x38>
 80068cc:	1a21      	subs	r1, r4, r0
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fb96 	bl	8007000 <_sbrk_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d101      	bne.n	80068dc <sbrk_aligned+0x38>
 80068d8:	f04f 34ff 	mov.w	r4, #4294967295
 80068dc:	4620      	mov	r0, r4
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	20000c9c 	.word	0x20000c9c

080068e4 <_malloc_r>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	1ccd      	adds	r5, r1, #3
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	4607      	mov	r7, r0
 80068fa:	db01      	blt.n	8006900 <_malloc_r+0x1c>
 80068fc:	42a9      	cmp	r1, r5
 80068fe:	d905      	bls.n	800690c <_malloc_r+0x28>
 8006900:	230c      	movs	r3, #12
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	2600      	movs	r6, #0
 8006906:	4630      	mov	r0, r6
 8006908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069e0 <_malloc_r+0xfc>
 8006910:	f000 f868 	bl	80069e4 <__malloc_lock>
 8006914:	f8d8 3000 	ldr.w	r3, [r8]
 8006918:	461c      	mov	r4, r3
 800691a:	bb5c      	cbnz	r4, 8006974 <_malloc_r+0x90>
 800691c:	4629      	mov	r1, r5
 800691e:	4638      	mov	r0, r7
 8006920:	f7ff ffc0 	bl	80068a4 <sbrk_aligned>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	4604      	mov	r4, r0
 8006928:	d155      	bne.n	80069d6 <_malloc_r+0xf2>
 800692a:	f8d8 4000 	ldr.w	r4, [r8]
 800692e:	4626      	mov	r6, r4
 8006930:	2e00      	cmp	r6, #0
 8006932:	d145      	bne.n	80069c0 <_malloc_r+0xdc>
 8006934:	2c00      	cmp	r4, #0
 8006936:	d048      	beq.n	80069ca <_malloc_r+0xe6>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	4631      	mov	r1, r6
 800693c:	4638      	mov	r0, r7
 800693e:	eb04 0903 	add.w	r9, r4, r3
 8006942:	f000 fb5d 	bl	8007000 <_sbrk_r>
 8006946:	4581      	cmp	r9, r0
 8006948:	d13f      	bne.n	80069ca <_malloc_r+0xe6>
 800694a:	6821      	ldr	r1, [r4, #0]
 800694c:	1a6d      	subs	r5, r5, r1
 800694e:	4629      	mov	r1, r5
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ffa7 	bl	80068a4 <sbrk_aligned>
 8006956:	3001      	adds	r0, #1
 8006958:	d037      	beq.n	80069ca <_malloc_r+0xe6>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	442b      	add	r3, r5
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	f8d8 3000 	ldr.w	r3, [r8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d038      	beq.n	80069da <_malloc_r+0xf6>
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	42a2      	cmp	r2, r4
 800696c:	d12b      	bne.n	80069c6 <_malloc_r+0xe2>
 800696e:	2200      	movs	r2, #0
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e00f      	b.n	8006994 <_malloc_r+0xb0>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	1b52      	subs	r2, r2, r5
 8006978:	d41f      	bmi.n	80069ba <_malloc_r+0xd6>
 800697a:	2a0b      	cmp	r2, #11
 800697c:	d917      	bls.n	80069ae <_malloc_r+0xca>
 800697e:	1961      	adds	r1, r4, r5
 8006980:	42a3      	cmp	r3, r4
 8006982:	6025      	str	r5, [r4, #0]
 8006984:	bf18      	it	ne
 8006986:	6059      	strne	r1, [r3, #4]
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	bf08      	it	eq
 800698c:	f8c8 1000 	streq.w	r1, [r8]
 8006990:	5162      	str	r2, [r4, r5]
 8006992:	604b      	str	r3, [r1, #4]
 8006994:	4638      	mov	r0, r7
 8006996:	f104 060b 	add.w	r6, r4, #11
 800699a:	f000 f829 	bl	80069f0 <__malloc_unlock>
 800699e:	f026 0607 	bic.w	r6, r6, #7
 80069a2:	1d23      	adds	r3, r4, #4
 80069a4:	1af2      	subs	r2, r6, r3
 80069a6:	d0ae      	beq.n	8006906 <_malloc_r+0x22>
 80069a8:	1b9b      	subs	r3, r3, r6
 80069aa:	50a3      	str	r3, [r4, r2]
 80069ac:	e7ab      	b.n	8006906 <_malloc_r+0x22>
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	6862      	ldr	r2, [r4, #4]
 80069b2:	d1dd      	bne.n	8006970 <_malloc_r+0x8c>
 80069b4:	f8c8 2000 	str.w	r2, [r8]
 80069b8:	e7ec      	b.n	8006994 <_malloc_r+0xb0>
 80069ba:	4623      	mov	r3, r4
 80069bc:	6864      	ldr	r4, [r4, #4]
 80069be:	e7ac      	b.n	800691a <_malloc_r+0x36>
 80069c0:	4634      	mov	r4, r6
 80069c2:	6876      	ldr	r6, [r6, #4]
 80069c4:	e7b4      	b.n	8006930 <_malloc_r+0x4c>
 80069c6:	4613      	mov	r3, r2
 80069c8:	e7cc      	b.n	8006964 <_malloc_r+0x80>
 80069ca:	230c      	movs	r3, #12
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4638      	mov	r0, r7
 80069d0:	f000 f80e 	bl	80069f0 <__malloc_unlock>
 80069d4:	e797      	b.n	8006906 <_malloc_r+0x22>
 80069d6:	6025      	str	r5, [r4, #0]
 80069d8:	e7dc      	b.n	8006994 <_malloc_r+0xb0>
 80069da:	605b      	str	r3, [r3, #4]
 80069dc:	deff      	udf	#255	; 0xff
 80069de:	bf00      	nop
 80069e0:	20000c98 	.word	0x20000c98

080069e4 <__malloc_lock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__malloc_lock+0x8>)
 80069e6:	f7ff bf0f 	b.w	8006808 <__retarget_lock_acquire_recursive>
 80069ea:	bf00      	nop
 80069ec:	20000c94 	.word	0x20000c94

080069f0 <__malloc_unlock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_unlock+0x8>)
 80069f2:	f7ff bf0a 	b.w	800680a <__retarget_lock_release_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000c94 	.word	0x20000c94

080069fc <__ssputs_r>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	688e      	ldr	r6, [r1, #8]
 8006a02:	461f      	mov	r7, r3
 8006a04:	42be      	cmp	r6, r7
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	4682      	mov	sl, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4690      	mov	r8, r2
 8006a0e:	d82c      	bhi.n	8006a6a <__ssputs_r+0x6e>
 8006a10:	898a      	ldrh	r2, [r1, #12]
 8006a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a16:	d026      	beq.n	8006a66 <__ssputs_r+0x6a>
 8006a18:	6965      	ldr	r5, [r4, #20]
 8006a1a:	6909      	ldr	r1, [r1, #16]
 8006a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a20:	eba3 0901 	sub.w	r9, r3, r1
 8006a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a28:	1c7b      	adds	r3, r7, #1
 8006a2a:	444b      	add	r3, r9
 8006a2c:	106d      	asrs	r5, r5, #1
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	bf38      	it	cc
 8006a32:	461d      	movcc	r5, r3
 8006a34:	0553      	lsls	r3, r2, #21
 8006a36:	d527      	bpl.n	8006a88 <__ssputs_r+0x8c>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7ff ff53 	bl	80068e4 <_malloc_r>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	b360      	cbz	r0, 8006a9c <__ssputs_r+0xa0>
 8006a42:	6921      	ldr	r1, [r4, #16]
 8006a44:	464a      	mov	r2, r9
 8006a46:	f000 faeb 	bl	8007020 <memcpy>
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	6126      	str	r6, [r4, #16]
 8006a58:	6165      	str	r5, [r4, #20]
 8006a5a:	444e      	add	r6, r9
 8006a5c:	eba5 0509 	sub.w	r5, r5, r9
 8006a60:	6026      	str	r6, [r4, #0]
 8006a62:	60a5      	str	r5, [r4, #8]
 8006a64:	463e      	mov	r6, r7
 8006a66:	42be      	cmp	r6, r7
 8006a68:	d900      	bls.n	8006a6c <__ssputs_r+0x70>
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4632      	mov	r2, r6
 8006a70:	4641      	mov	r1, r8
 8006a72:	f000 faab 	bl	8006fcc <memmove>
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	1b9b      	subs	r3, r3, r6
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	4433      	add	r3, r6
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	2000      	movs	r0, #0
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	462a      	mov	r2, r5
 8006a8a:	f000 fad7 	bl	800703c <_realloc_r>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d1e0      	bne.n	8006a56 <__ssputs_r+0x5a>
 8006a94:	6921      	ldr	r1, [r4, #16]
 8006a96:	4650      	mov	r0, sl
 8006a98:	f7ff feb8 	bl	800680c <_free_r>
 8006a9c:	230c      	movs	r3, #12
 8006a9e:	f8ca 3000 	str.w	r3, [sl]
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	e7e9      	b.n	8006a84 <__ssputs_r+0x88>

08006ab0 <_svfiprintf_r>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4698      	mov	r8, r3
 8006ab6:	898b      	ldrh	r3, [r1, #12]
 8006ab8:	061b      	lsls	r3, r3, #24
 8006aba:	b09d      	sub	sp, #116	; 0x74
 8006abc:	4607      	mov	r7, r0
 8006abe:	460d      	mov	r5, r1
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	d50e      	bpl.n	8006ae2 <_svfiprintf_r+0x32>
 8006ac4:	690b      	ldr	r3, [r1, #16]
 8006ac6:	b963      	cbnz	r3, 8006ae2 <_svfiprintf_r+0x32>
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	f7ff ff0b 	bl	80068e4 <_malloc_r>
 8006ace:	6028      	str	r0, [r5, #0]
 8006ad0:	6128      	str	r0, [r5, #16]
 8006ad2:	b920      	cbnz	r0, 8006ade <_svfiprintf_r+0x2e>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e0d0      	b.n	8006c80 <_svfiprintf_r+0x1d0>
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	616b      	str	r3, [r5, #20]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae6:	2320      	movs	r3, #32
 8006ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af0:	2330      	movs	r3, #48	; 0x30
 8006af2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c98 <_svfiprintf_r+0x1e8>
 8006af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afa:	f04f 0901 	mov.w	r9, #1
 8006afe:	4623      	mov	r3, r4
 8006b00:	469a      	mov	sl, r3
 8006b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b06:	b10a      	cbz	r2, 8006b0c <_svfiprintf_r+0x5c>
 8006b08:	2a25      	cmp	r2, #37	; 0x25
 8006b0a:	d1f9      	bne.n	8006b00 <_svfiprintf_r+0x50>
 8006b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b10:	d00b      	beq.n	8006b2a <_svfiprintf_r+0x7a>
 8006b12:	465b      	mov	r3, fp
 8006b14:	4622      	mov	r2, r4
 8006b16:	4629      	mov	r1, r5
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff ff6f 	bl	80069fc <__ssputs_r>
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f000 80a9 	beq.w	8006c76 <_svfiprintf_r+0x1c6>
 8006b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b26:	445a      	add	r2, fp
 8006b28:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80a1 	beq.w	8006c76 <_svfiprintf_r+0x1c6>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b3e:	f10a 0a01 	add.w	sl, sl, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	9307      	str	r3, [sp, #28]
 8006b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b4c:	4654      	mov	r4, sl
 8006b4e:	2205      	movs	r2, #5
 8006b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b54:	4850      	ldr	r0, [pc, #320]	; (8006c98 <_svfiprintf_r+0x1e8>)
 8006b56:	f7f9 fb63 	bl	8000220 <memchr>
 8006b5a:	9a04      	ldr	r2, [sp, #16]
 8006b5c:	b9d8      	cbnz	r0, 8006b96 <_svfiprintf_r+0xe6>
 8006b5e:	06d0      	lsls	r0, r2, #27
 8006b60:	bf44      	itt	mi
 8006b62:	2320      	movmi	r3, #32
 8006b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b68:	0711      	lsls	r1, r2, #28
 8006b6a:	bf44      	itt	mi
 8006b6c:	232b      	movmi	r3, #43	; 0x2b
 8006b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b72:	f89a 3000 	ldrb.w	r3, [sl]
 8006b76:	2b2a      	cmp	r3, #42	; 0x2a
 8006b78:	d015      	beq.n	8006ba6 <_svfiprintf_r+0xf6>
 8006b7a:	9a07      	ldr	r2, [sp, #28]
 8006b7c:	4654      	mov	r4, sl
 8006b7e:	2000      	movs	r0, #0
 8006b80:	f04f 0c0a 	mov.w	ip, #10
 8006b84:	4621      	mov	r1, r4
 8006b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8a:	3b30      	subs	r3, #48	; 0x30
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d94d      	bls.n	8006c2c <_svfiprintf_r+0x17c>
 8006b90:	b1b0      	cbz	r0, 8006bc0 <_svfiprintf_r+0x110>
 8006b92:	9207      	str	r2, [sp, #28]
 8006b94:	e014      	b.n	8006bc0 <_svfiprintf_r+0x110>
 8006b96:	eba0 0308 	sub.w	r3, r0, r8
 8006b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	46a2      	mov	sl, r4
 8006ba4:	e7d2      	b.n	8006b4c <_svfiprintf_r+0x9c>
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	1d19      	adds	r1, r3, #4
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	9103      	str	r1, [sp, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bfbb      	ittet	lt
 8006bb2:	425b      	neglt	r3, r3
 8006bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb8:	9307      	strge	r3, [sp, #28]
 8006bba:	9307      	strlt	r3, [sp, #28]
 8006bbc:	bfb8      	it	lt
 8006bbe:	9204      	strlt	r2, [sp, #16]
 8006bc0:	7823      	ldrb	r3, [r4, #0]
 8006bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc4:	d10c      	bne.n	8006be0 <_svfiprintf_r+0x130>
 8006bc6:	7863      	ldrb	r3, [r4, #1]
 8006bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bca:	d134      	bne.n	8006c36 <_svfiprintf_r+0x186>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	9203      	str	r2, [sp, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bfb8      	it	lt
 8006bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bdc:	3402      	adds	r4, #2
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ca8 <_svfiprintf_r+0x1f8>
 8006be4:	7821      	ldrb	r1, [r4, #0]
 8006be6:	2203      	movs	r2, #3
 8006be8:	4650      	mov	r0, sl
 8006bea:	f7f9 fb19 	bl	8000220 <memchr>
 8006bee:	b138      	cbz	r0, 8006c00 <_svfiprintf_r+0x150>
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	eba0 000a 	sub.w	r0, r0, sl
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	4082      	lsls	r2, r0
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	3401      	adds	r4, #1
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c04:	4825      	ldr	r0, [pc, #148]	; (8006c9c <_svfiprintf_r+0x1ec>)
 8006c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c0a:	2206      	movs	r2, #6
 8006c0c:	f7f9 fb08 	bl	8000220 <memchr>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d038      	beq.n	8006c86 <_svfiprintf_r+0x1d6>
 8006c14:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <_svfiprintf_r+0x1f0>)
 8006c16:	bb1b      	cbnz	r3, 8006c60 <_svfiprintf_r+0x1b0>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c26:	4433      	add	r3, r6
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	e768      	b.n	8006afe <_svfiprintf_r+0x4e>
 8006c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c30:	460c      	mov	r4, r1
 8006c32:	2001      	movs	r0, #1
 8006c34:	e7a6      	b.n	8006b84 <_svfiprintf_r+0xd4>
 8006c36:	2300      	movs	r3, #0
 8006c38:	3401      	adds	r4, #1
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	f04f 0c0a 	mov.w	ip, #10
 8006c42:	4620      	mov	r0, r4
 8006c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c48:	3a30      	subs	r2, #48	; 0x30
 8006c4a:	2a09      	cmp	r2, #9
 8006c4c:	d903      	bls.n	8006c56 <_svfiprintf_r+0x1a6>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0c6      	beq.n	8006be0 <_svfiprintf_r+0x130>
 8006c52:	9105      	str	r1, [sp, #20]
 8006c54:	e7c4      	b.n	8006be0 <_svfiprintf_r+0x130>
 8006c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7f0      	b.n	8006c42 <_svfiprintf_r+0x192>
 8006c60:	ab03      	add	r3, sp, #12
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	462a      	mov	r2, r5
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <_svfiprintf_r+0x1f4>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f3af 8000 	nop.w
 8006c70:	1c42      	adds	r2, r0, #1
 8006c72:	4606      	mov	r6, r0
 8006c74:	d1d6      	bne.n	8006c24 <_svfiprintf_r+0x174>
 8006c76:	89ab      	ldrh	r3, [r5, #12]
 8006c78:	065b      	lsls	r3, r3, #25
 8006c7a:	f53f af2d 	bmi.w	8006ad8 <_svfiprintf_r+0x28>
 8006c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c80:	b01d      	add	sp, #116	; 0x74
 8006c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <_svfiprintf_r+0x1f4>)
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	4638      	mov	r0, r7
 8006c92:	f000 f879 	bl	8006d88 <_printf_i>
 8006c96:	e7eb      	b.n	8006c70 <_svfiprintf_r+0x1c0>
 8006c98:	080071c8 	.word	0x080071c8
 8006c9c:	080071d2 	.word	0x080071d2
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	080069fd 	.word	0x080069fd
 8006ca8:	080071ce 	.word	0x080071ce

08006cac <_printf_common>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	4699      	mov	r9, r3
 8006cb4:	688a      	ldr	r2, [r1, #8]
 8006cb6:	690b      	ldr	r3, [r1, #16]
 8006cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	bfb8      	it	lt
 8006cc0:	4613      	movlt	r3, r2
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b10a      	cbz	r2, 8006cd2 <_printf_common+0x26>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	0699      	lsls	r1, r3, #26
 8006cd6:	bf42      	ittt	mi
 8006cd8:	6833      	ldrmi	r3, [r6, #0]
 8006cda:	3302      	addmi	r3, #2
 8006cdc:	6033      	strmi	r3, [r6, #0]
 8006cde:	6825      	ldr	r5, [r4, #0]
 8006ce0:	f015 0506 	ands.w	r5, r5, #6
 8006ce4:	d106      	bne.n	8006cf4 <_printf_common+0x48>
 8006ce6:	f104 0a19 	add.w	sl, r4, #25
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	6832      	ldr	r2, [r6, #0]
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dc26      	bgt.n	8006d42 <_printf_common+0x96>
 8006cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf8:	1e13      	subs	r3, r2, #0
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	bf18      	it	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	0692      	lsls	r2, r2, #26
 8006d02:	d42b      	bmi.n	8006d5c <_printf_common+0xb0>
 8006d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d01e      	beq.n	8006d50 <_printf_common+0xa4>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	f003 0306 	and.w	r3, r3, #6
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	bf02      	ittt	eq
 8006d1e:	68e5      	ldreq	r5, [r4, #12]
 8006d20:	6833      	ldreq	r3, [r6, #0]
 8006d22:	1aed      	subeq	r5, r5, r3
 8006d24:	68a3      	ldr	r3, [r4, #8]
 8006d26:	bf0c      	ite	eq
 8006d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d2c:	2500      	movne	r5, #0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bfc4      	itt	gt
 8006d32:	1a9b      	subgt	r3, r3, r2
 8006d34:	18ed      	addgt	r5, r5, r3
 8006d36:	2600      	movs	r6, #0
 8006d38:	341a      	adds	r4, #26
 8006d3a:	42b5      	cmp	r5, r6
 8006d3c:	d11a      	bne.n	8006d74 <_printf_common+0xc8>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e008      	b.n	8006d54 <_printf_common+0xa8>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4652      	mov	r2, sl
 8006d46:	4649      	mov	r1, r9
 8006d48:	4638      	mov	r0, r7
 8006d4a:	47c0      	blx	r8
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d103      	bne.n	8006d58 <_printf_common+0xac>
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7c6      	b.n	8006cea <_printf_common+0x3e>
 8006d5c:	18e1      	adds	r1, r4, r3
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	2030      	movs	r0, #48	; 0x30
 8006d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d66:	4422      	add	r2, r4
 8006d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d70:	3302      	adds	r3, #2
 8006d72:	e7c7      	b.n	8006d04 <_printf_common+0x58>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4622      	mov	r2, r4
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0e6      	beq.n	8006d50 <_printf_common+0xa4>
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7d9      	b.n	8006d3a <_printf_common+0x8e>
	...

08006d88 <_printf_i>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	7e0f      	ldrb	r7, [r1, #24]
 8006d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d90:	2f78      	cmp	r7, #120	; 0x78
 8006d92:	4691      	mov	r9, r2
 8006d94:	4680      	mov	r8, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	469a      	mov	sl, r3
 8006d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d9e:	d807      	bhi.n	8006db0 <_printf_i+0x28>
 8006da0:	2f62      	cmp	r7, #98	; 0x62
 8006da2:	d80a      	bhi.n	8006dba <_printf_i+0x32>
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	f000 80d4 	beq.w	8006f52 <_printf_i+0x1ca>
 8006daa:	2f58      	cmp	r7, #88	; 0x58
 8006dac:	f000 80c0 	beq.w	8006f30 <_printf_i+0x1a8>
 8006db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db8:	e03a      	b.n	8006e30 <_printf_i+0xa8>
 8006dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dbe:	2b15      	cmp	r3, #21
 8006dc0:	d8f6      	bhi.n	8006db0 <_printf_i+0x28>
 8006dc2:	a101      	add	r1, pc, #4	; (adr r1, 8006dc8 <_printf_i+0x40>)
 8006dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006db1 	.word	0x08006db1
 8006dd4:	08006db1 	.word	0x08006db1
 8006dd8:	08006db1 	.word	0x08006db1
 8006ddc:	08006db1 	.word	0x08006db1
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006db1 	.word	0x08006db1
 8006de8:	08006db1 	.word	0x08006db1
 8006dec:	08006db1 	.word	0x08006db1
 8006df0:	08006db1 	.word	0x08006db1
 8006df4:	08006f39 	.word	0x08006f39
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ef3 	.word	0x08006ef3
 8006e00:	08006db1 	.word	0x08006db1
 8006e04:	08006db1 	.word	0x08006db1
 8006e08:	08006f5b 	.word	0x08006f5b
 8006e0c:	08006db1 	.word	0x08006db1
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006db1 	.word	0x08006db1
 8006e18:	08006db1 	.word	0x08006db1
 8006e1c:	08006efb 	.word	0x08006efb
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e30:	2301      	movs	r3, #1
 8006e32:	e09f      	b.n	8006f74 <_printf_i+0x1ec>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	0607      	lsls	r7, r0, #24
 8006e3a:	f103 0104 	add.w	r1, r3, #4
 8006e3e:	6029      	str	r1, [r5, #0]
 8006e40:	d501      	bpl.n	8006e46 <_printf_i+0xbe>
 8006e42:	681e      	ldr	r6, [r3, #0]
 8006e44:	e003      	b.n	8006e4e <_printf_i+0xc6>
 8006e46:	0646      	lsls	r6, r0, #25
 8006e48:	d5fb      	bpl.n	8006e42 <_printf_i+0xba>
 8006e4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	da03      	bge.n	8006e5a <_printf_i+0xd2>
 8006e52:	232d      	movs	r3, #45	; 0x2d
 8006e54:	4276      	negs	r6, r6
 8006e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5a:	485a      	ldr	r0, [pc, #360]	; (8006fc4 <_printf_i+0x23c>)
 8006e5c:	230a      	movs	r3, #10
 8006e5e:	e012      	b.n	8006e86 <_printf_i+0xfe>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1d19      	adds	r1, r3, #4
 8006e66:	6029      	str	r1, [r5, #0]
 8006e68:	0605      	lsls	r5, r0, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xe8>
 8006e6c:	681e      	ldr	r6, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0xee>
 8006e70:	0641      	lsls	r1, r0, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xe4>
 8006e74:	881e      	ldrh	r6, [r3, #0]
 8006e76:	4853      	ldr	r0, [pc, #332]	; (8006fc4 <_printf_i+0x23c>)
 8006e78:	2f6f      	cmp	r7, #111	; 0x6f
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2308      	moveq	r3, #8
 8006e7e:	230a      	movne	r3, #10
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e86:	6865      	ldr	r5, [r4, #4]
 8006e88:	60a5      	str	r5, [r4, #8]
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	bfa2      	ittt	ge
 8006e8e:	6821      	ldrge	r1, [r4, #0]
 8006e90:	f021 0104 	bicge.w	r1, r1, #4
 8006e94:	6021      	strge	r1, [r4, #0]
 8006e96:	b90e      	cbnz	r6, 8006e9c <_printf_i+0x114>
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	d04b      	beq.n	8006f34 <_printf_i+0x1ac>
 8006e9c:	4615      	mov	r5, r2
 8006e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea6:	5dc7      	ldrb	r7, [r0, r7]
 8006ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eac:	4637      	mov	r7, r6
 8006eae:	42bb      	cmp	r3, r7
 8006eb0:	460e      	mov	r6, r1
 8006eb2:	d9f4      	bls.n	8006e9e <_printf_i+0x116>
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d10b      	bne.n	8006ed0 <_printf_i+0x148>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07de      	lsls	r6, r3, #31
 8006ebc:	d508      	bpl.n	8006ed0 <_printf_i+0x148>
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4299      	cmp	r1, r3
 8006ec4:	bfde      	ittt	le
 8006ec6:	2330      	movle	r3, #48	; 0x30
 8006ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ed0:	1b52      	subs	r2, r2, r5
 8006ed2:	6122      	str	r2, [r4, #16]
 8006ed4:	f8cd a000 	str.w	sl, [sp]
 8006ed8:	464b      	mov	r3, r9
 8006eda:	aa03      	add	r2, sp, #12
 8006edc:	4621      	mov	r1, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fee4 	bl	8006cac <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d14a      	bne.n	8006f7e <_printf_i+0x1f6>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b004      	add	sp, #16
 8006eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	f043 0320 	orr.w	r3, r3, #32
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	4833      	ldr	r0, [pc, #204]	; (8006fc8 <_printf_i+0x240>)
 8006efc:	2778      	movs	r7, #120	; 0x78
 8006efe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	061f      	lsls	r7, r3, #24
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	d402      	bmi.n	8006f14 <_printf_i+0x18c>
 8006f0e:	065f      	lsls	r7, r3, #25
 8006f10:	bf48      	it	mi
 8006f12:	b2b6      	uxthmi	r6, r6
 8006f14:	07df      	lsls	r7, r3, #31
 8006f16:	bf48      	it	mi
 8006f18:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1c:	6029      	str	r1, [r5, #0]
 8006f1e:	bf48      	it	mi
 8006f20:	6023      	strmi	r3, [r4, #0]
 8006f22:	b91e      	cbnz	r6, 8006f2c <_printf_i+0x1a4>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	f023 0320 	bic.w	r3, r3, #32
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	e7a7      	b.n	8006e80 <_printf_i+0xf8>
 8006f30:	4824      	ldr	r0, [pc, #144]	; (8006fc4 <_printf_i+0x23c>)
 8006f32:	e7e4      	b.n	8006efe <_printf_i+0x176>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7bd      	b.n	8006eb4 <_printf_i+0x12c>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6826      	ldr	r6, [r4, #0]
 8006f3c:	6961      	ldr	r1, [r4, #20]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6028      	str	r0, [r5, #0]
 8006f42:	0635      	lsls	r5, r6, #24
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0x1c4>
 8006f48:	6019      	str	r1, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0x1ca>
 8006f4c:	0670      	lsls	r0, r6, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0x1c0>
 8006f50:	8019      	strh	r1, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	4615      	mov	r5, r2
 8006f58:	e7bc      	b.n	8006ed4 <_printf_i+0x14c>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	602a      	str	r2, [r5, #0]
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	6862      	ldr	r2, [r4, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 f95a 	bl	8000220 <memchr>
 8006f6c:	b108      	cbz	r0, 8006f72 <_printf_i+0x1ea>
 8006f6e:	1b40      	subs	r0, r0, r5
 8006f70:	6060      	str	r0, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7c:	e7aa      	b.n	8006ed4 <_printf_i+0x14c>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d0ad      	beq.n	8006ee8 <_printf_i+0x160>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	d413      	bmi.n	8006fba <_printf_i+0x232>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e7a6      	b.n	8006eec <_printf_i+0x164>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d09d      	beq.n	8006ee8 <_printf_i+0x160>
 8006fac:	3501      	adds	r5, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9903      	ldr	r1, [sp, #12]
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dcf2      	bgt.n	8006f9e <_printf_i+0x216>
 8006fb8:	e7eb      	b.n	8006f92 <_printf_i+0x20a>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	f104 0619 	add.w	r6, r4, #25
 8006fc0:	e7f5      	b.n	8006fae <_printf_i+0x226>
 8006fc2:	bf00      	nop
 8006fc4:	080071d9 	.word	0x080071d9
 8006fc8:	080071ea 	.word	0x080071ea

08006fcc <memmove>:
 8006fcc:	4288      	cmp	r0, r1
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	eb01 0402 	add.w	r4, r1, r2
 8006fd4:	d902      	bls.n	8006fdc <memmove+0x10>
 8006fd6:	4284      	cmp	r4, r0
 8006fd8:	4623      	mov	r3, r4
 8006fda:	d807      	bhi.n	8006fec <memmove+0x20>
 8006fdc:	1e43      	subs	r3, r0, #1
 8006fde:	42a1      	cmp	r1, r4
 8006fe0:	d008      	beq.n	8006ff4 <memmove+0x28>
 8006fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fea:	e7f8      	b.n	8006fde <memmove+0x12>
 8006fec:	4402      	add	r2, r0
 8006fee:	4601      	mov	r1, r0
 8006ff0:	428a      	cmp	r2, r1
 8006ff2:	d100      	bne.n	8006ff6 <memmove+0x2a>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ffe:	e7f7      	b.n	8006ff0 <memmove+0x24>

08007000 <_sbrk_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_sbrk_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa fb0e 	bl	800162c <_sbrk>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_sbrk_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_sbrk_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000c90 	.word	0x20000c90

08007020 <memcpy>:
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	f100 33ff 	add.w	r3, r0, #4294967295
 8007028:	d100      	bne.n	800702c <memcpy+0xc>
 800702a:	4770      	bx	lr
 800702c:	b510      	push	{r4, lr}
 800702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007036:	4291      	cmp	r1, r2
 8007038:	d1f9      	bne.n	800702e <memcpy+0xe>
 800703a:	bd10      	pop	{r4, pc}

0800703c <_realloc_r>:
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	4680      	mov	r8, r0
 8007042:	4614      	mov	r4, r2
 8007044:	460e      	mov	r6, r1
 8007046:	b921      	cbnz	r1, 8007052 <_realloc_r+0x16>
 8007048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4611      	mov	r1, r2
 800704e:	f7ff bc49 	b.w	80068e4 <_malloc_r>
 8007052:	b92a      	cbnz	r2, 8007060 <_realloc_r+0x24>
 8007054:	f7ff fbda 	bl	800680c <_free_r>
 8007058:	4625      	mov	r5, r4
 800705a:	4628      	mov	r0, r5
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	f000 f81b 	bl	800709a <_malloc_usable_size_r>
 8007064:	4284      	cmp	r4, r0
 8007066:	4607      	mov	r7, r0
 8007068:	d802      	bhi.n	8007070 <_realloc_r+0x34>
 800706a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800706e:	d812      	bhi.n	8007096 <_realloc_r+0x5a>
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fc36 	bl	80068e4 <_malloc_r>
 8007078:	4605      	mov	r5, r0
 800707a:	2800      	cmp	r0, #0
 800707c:	d0ed      	beq.n	800705a <_realloc_r+0x1e>
 800707e:	42bc      	cmp	r4, r7
 8007080:	4622      	mov	r2, r4
 8007082:	4631      	mov	r1, r6
 8007084:	bf28      	it	cs
 8007086:	463a      	movcs	r2, r7
 8007088:	f7ff ffca 	bl	8007020 <memcpy>
 800708c:	4631      	mov	r1, r6
 800708e:	4640      	mov	r0, r8
 8007090:	f7ff fbbc 	bl	800680c <_free_r>
 8007094:	e7e1      	b.n	800705a <_realloc_r+0x1e>
 8007096:	4635      	mov	r5, r6
 8007098:	e7df      	b.n	800705a <_realloc_r+0x1e>

0800709a <_malloc_usable_size_r>:
 800709a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800709e:	1f18      	subs	r0, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bfbc      	itt	lt
 80070a4:	580b      	ldrlt	r3, [r1, r0]
 80070a6:	18c0      	addlt	r0, r0, r3
 80070a8:	4770      	bx	lr
	...

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
