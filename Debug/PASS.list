
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  2000000c  08005574  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08005574  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001411c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af2  00000000  00000000  0003419b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfd  00000000  00000000  00037d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002648c  00000000  00000000  00038a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c8f  00000000  00000000  0005eec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edc36  00000000  00000000  00074b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004694  00000000  00000000  00162788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00166e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005504 	.word	0x08005504

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005504 	.word	0x08005504

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
uint16_t dma_buf;
uint32_t adc_avg;
int avg_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	adc_avg += adc_get;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_ADC_ConvCpltCallback+0x30>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_ADC_ConvCpltCallback+0x34>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4413      	add	r3, r2
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_ADC_ConvCpltCallback+0x34>)
 800051a:	6013      	str	r3, [r2, #0]
	avg_count ++;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000524:	6013      	str	r3, [r2, #0]

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000738 	.word	0x20000738
 8000538:	2000075c 	.word	0x2000075c
 800053c:	20000760 	.word	0x20000760

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fda7 	bl	8001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f84a 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fa1e 	bl	800098c <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f9fe 	bl	8000950 <MX_DMA_Init>
  MX_SAI1_Init();
 8000554:	f000 f940 	bl	80007d8 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f9cc 	bl	80008f4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800055c:	f000 f99a 	bl	8000894 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000560:	f000 f8a8 	bl	80006b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000564:	f000 f8f8 	bl	8000758 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, &adc_get, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	4917      	ldr	r1, [pc, #92]	; (80005c8 <main+0x88>)
 800056c:	4817      	ldr	r0, [pc, #92]	; (80005cc <main+0x8c>)
 800056e:	f000 fe57 	bl	8001220 <HAL_ADC_Start_DMA>
  sai_fifo[0] = 0x0F0FU;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <main+0x90>)
 8000574:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000578:	801a      	strh	r2, [r3, #0]
  while (1)
  {
//	  for (int i = 15; i > 0; i --)
//		  sai_fifo[i] = sai_fifo[i - 1];
	adc_avg = (adc_avg / avg_count);
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0x94>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <main+0x98>)
 8000580:	6812      	ldr	r2, [r2, #0]
 8000582:	fbb3 f3f2 	udiv	r3, r3, r2
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <main+0x94>)
 8000588:	6013      	str	r3, [r2, #0]
	sai_fifo[0] = (uint16_t)((short)((adc_get << 4) - (1 << 15)) >> 1) & (~0x3);
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <main+0x88>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	b29b      	uxth	r3, r3
 8000592:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000596:	b29b      	uxth	r3, r3
 8000598:	b21b      	sxth	r3, r3
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	b21b      	sxth	r3, r3
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f023 0303 	bic.w	r3, r3, #3
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <main+0x90>)
 80005a8:	801a      	strh	r2, [r3, #0]
	HAL_SAI_Transmit(&hsai_BlockA1, &sai_fifo, 16, -1);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2210      	movs	r2, #16
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <main+0x90>)
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x9c>)
 80005b4:	f003 fe5c 	bl	8004270 <HAL_SAI_Transmit>

	adc_avg = 0;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <main+0x94>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	avg_count = 0;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <main+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	adc_avg = (adc_avg / avg_count);
 80005c4:	e7d9      	b.n	800057a <main+0x3a>
 80005c6:	bf00      	nop
 80005c8:	20000738 	.word	0x20000738
 80005cc:	20000028 	.word	0x20000028
 80005d0:	2000073c 	.word	0x2000073c
 80005d4:	2000075c 	.word	0x2000075c
 80005d8:	20000760 	.word	0x20000760
 80005dc:	20000124 	.word	0x20000124

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 ff5c 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f002 faac 	bl	8002b60 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000654:	2348      	movs	r3, #72	; 0x48
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800065c:	2303      	movs	r3, #3
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fa8b 	bl	8002b80 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 fa3a 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000686:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fd18 	bl	80030c8 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 fa23 	bl	8000ae8 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f000 fd3f 	bl	8001198 <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 f9e2 	bl	8000ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f000 fe81 	bl	800143c <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 f9d2 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C1_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_I2C1_Init+0x74>)
 8000794:	f001 ff74 	bl	8002680 <HAL_I2C_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079e:	f000 f9a3 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C1_Init+0x74>)
 80007a6:	f001 fffb 	bl	80027a0 <HAL_I2CEx_ConfigAnalogFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 f99a 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_I2C1_Init+0x74>)
 80007b8:	f002 f83d 	bl	8002836 <HAL_I2CEx_ConfigDigitalFilter>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 f991 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000d0 	.word	0x200000d0
 80007d0:	40005400 	.word	0x40005400
 80007d4:	00808cd2 	.word	0x00808cd2

080007d8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_SAI1_Init+0xb4>)
 80007de:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <MX_SAI1_Init+0xb8>)
 80007e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_SAI1_Init+0xb4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_SAI1_Init+0xb4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_SAI1_Init+0xb4>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_SAI1_Init+0xb4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_SAI1_Init+0xb4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_SAI1_Init+0xb4>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_SAI1_Init+0xb4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_SAI1_Init+0xb4>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_SAI1_Init+0xb4>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_SAI1_Init+0xb4>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 9;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_SAI1_Init+0xb4>)
 8000820:	2209      	movs	r2, #9
 8000822:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_SAI1_Init+0xb4>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_SAI1_Init+0xb4>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SAI1_Init+0xb4>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_SAI1_Init+0xb4>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_SAI1_Init+0xb4>)
 800083e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 10;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SAI1_Init+0xb4>)
 8000846:	220a      	movs	r2, #10
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_SAI1_Init+0xb4>)
 800084c:	2200      	movs	r2, #0
 800084e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SAI1_Init+0xb4>)
 8000852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000856:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SAI1_Init+0xb4>)
 800085a:	2200      	movs	r2, #0
 800085c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_SAI1_Init+0xb4>)
 8000860:	2200      	movs	r2, #0
 8000862:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SAI1_Init+0xb4>)
 8000866:	2200      	movs	r2, #0
 8000868:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_SAI1_Init+0xb4>)
 800086c:	2210      	movs	r2, #16
 800086e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SAI1_Init+0xb4>)
 8000872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000876:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SAI1_Init+0xb4>)
 800087a:	f003 fb7b 	bl	8003f74 <HAL_SAI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 8000884:	f000 f930 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000124 	.word	0x20000124
 8000890:	40015804 	.word	0x40015804

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART3_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART3_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART3_UART_Init+0x58>)
 80008d8:	f003 fe1e 	bl	8004518 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f901 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2206      	movs	r2, #6
 8000904:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2202      	movs	r2, #2
 800090a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2202      	movs	r2, #2
 8000916:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2201      	movs	r2, #1
 800091c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2201      	movs	r2, #1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	f001 ffc9 	bl	80028ce <HAL_PCD_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f8d1 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000230 	.word	0x20000230

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_DMA_Init+0x38>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <MX_DMA_Init+0x38>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_DMA_Init+0x38>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2038      	movs	r0, #56	; 0x38
 8000974:	f001 f90f 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000978:	2038      	movs	r0, #56	; 0x38
 800097a:	f001 f928 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b4e      	ldr	r3, [pc, #312]	; (8000adc <MX_GPIO_Init+0x150>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <MX_GPIO_Init+0x150>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b4b      	ldr	r3, [pc, #300]	; (8000adc <MX_GPIO_Init+0x150>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <MX_GPIO_Init+0x150>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <MX_GPIO_Init+0x150>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <MX_GPIO_Init+0x150>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b42      	ldr	r3, [pc, #264]	; (8000adc <MX_GPIO_Init+0x150>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a41      	ldr	r2, [pc, #260]	; (8000adc <MX_GPIO_Init+0x150>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x150>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x150>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3b      	ldr	r2, [pc, #236]	; (8000adc <MX_GPIO_Init+0x150>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_GPIO_Init+0x150>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a29      	ldr	r2, [pc, #164]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a50:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000a52:	f001 fdfb 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x158>)
 8000a5c:	f001 fdf6 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000a7e:	f001 fc39 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a82:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000a9c:	f001 fc2a 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa0:	2340      	movs	r3, #64	; 0x40
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MX_GPIO_Init+0x158>)
 8000ab8:	f001 fc1c 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0x158>)
 8000ad0:	f001 fc10 	bl	80022f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40021800 	.word	0x40021800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  unsigned char error[25] = "Error occured!";
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <Error_Handler+0x38>)
 8000af4:	1d3c      	adds	r4, r7, #4
 8000af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af8:	c407      	stmia	r4!, {r0, r1, r2}
 8000afa:	8023      	strh	r3, [r4, #0]
 8000afc:	3402      	adds	r4, #2
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	f107 0313 	add.w	r3, r7, #19
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	811a      	strh	r2, [r3, #8]
  while (1)
  {

	 HAL_UART_Transmit(&huart3, error, sizeof(error), 0xFFFF);
 8000b0e:	1d39      	adds	r1, r7, #4
 8000b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b14:	2219      	movs	r2, #25
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <Error_Handler+0x3c>)
 8000b18:	f003 fd4c 	bl	80045b4 <HAL_UART_Transmit>
 8000b1c:	e7f7      	b.n	8000b0e <Error_Handler+0x26>
 8000b1e:	bf00      	nop
 8000b20:	0800551c 	.word	0x0800551c
 8000b24:	200001a8 	.word	0x200001a8

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_ADC_MspInit+0xd4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d154      	bne.n	8000c3c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481d      	ldr	r0, [pc, #116]	; (8000c4c <HAL_ADC_MspInit+0xdc>)
 8000bd6:	f001 fb8d 	bl	80022f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_ADC_MspInit+0xe4>)
 8000bde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c22:	f000 ffef 	bl	8001c04 <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c2c:	f7ff ff5c 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40012000 	.word	0x40012000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	20000070 	.word	0x20000070
 8000c54:	40026410 	.word	0x40026410

08000c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0aa      	sub	sp, #168	; 0xa8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2284      	movs	r2, #132	; 0x84
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fc17 	bl	80054ac <memset>
  if(hi2c->Instance==I2C1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_I2C_MspInit+0xb4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d13c      	bne.n	8000d02 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fc3c 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f7ff ff21 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000cbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <HAL_I2C_MspInit+0xbc>)
 8000ce6:	f001 fb05 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_I2C_MspInit+0xb8>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37a8      	adds	r7, #168	; 0xa8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0aa      	sub	sp, #168	; 0xa8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2284      	movs	r2, #132	; 0x84
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fbb7 	bl	80054ac <memset>
  if(huart->Instance==USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13c      	bne.n	8000dc2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fbdc 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff fec1 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0xbc>)
 8000dbe:	f001 fa99 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37a8      	adds	r7, #168	; 0xa8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ac      	sub	sp, #176	; 0xb0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	2284      	movs	r2, #132	; 0x84
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fb57 	bl	80054ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e06:	d159      	bne.n	8000ebc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fb7b 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff fe60 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e40:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e64:	4619      	mov	r1, r3
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000e68:	f001 fa44 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000e88:	f001 fa34 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	6353      	str	r3, [r2, #52]	; 0x34
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37b0      	adds	r7, #176	; 0xb0
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0aa      	sub	sp, #168	; 0xa8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2284      	movs	r2, #132	; 0x84
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fae5 	bl	80054ac <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <HAL_SAI_MspInit+0xdc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d159      	bne.n	8000fa0 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000eec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ef0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ef2:	2332      	movs	r3, #50	; 0x32
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fafe 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8000f1e:	f7ff fde3 	bl	8000ae8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_SAI_MspInit+0xe0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10b      	bne.n	8000f42 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_SAI_MspInit+0xe4>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_SAI_MspInit+0xe4>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_SAI_MspInit+0xe4>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_SAI_MspInit+0xe0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_SAI_MspInit+0xe0>)
 8000f4a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f64:	2306      	movs	r3, #6
 8000f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <HAL_SAI_MspInit+0xe8>)
 8000f72:	f001 f9bf 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f76:	2370      	movs	r3, #112	; 0x70
 8000f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <HAL_SAI_MspInit+0xe8>)
 8000f9c:	f001 f9aa 	bl	80022f4 <HAL_GPIO_Init>

    }
}
 8000fa0:	bf00      	nop
 8000fa2:	37a8      	adds	r7, #168	; 0xa8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40015804 	.word	0x40015804
 8000fac:	20000764 	.word	0x20000764
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f884 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA2_Stream0_IRQHandler+0x10>)
 8001012:	f000 ff05 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000070 	.word	0x20000070

08001020 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f004 fa23 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fa63 	bl	8000540 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001088:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 800108c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001090:	2000076c 	.word	0x2000076c

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>

08001096 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 fd70 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f805 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fd3f 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fd8b 	bl	8001bea <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 fd53 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008
 8001134:	20000768 	.word	0x20000768

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000768 	.word	0x20000768

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008

08001198 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e031      	b.n	8001212 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fcda 	bl	8000b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_ADC_Init+0x84>)
 80011dc:	4013      	ands	r3, r2
 80011de:	f043 0202 	orr.w	r2, r3, #2
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fa7e 	bl	80016e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f023 0303 	bic.w	r3, r3, #3
 80011fa:	f043 0201 	orr.w	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
 8001202:	e001      	b.n	8001208 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	ffffeefd 	.word	0xffffeefd

08001220 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_ADC_Start_DMA+0x1e>
 800123a:	2302      	movs	r3, #2
 800123c:	e0d4      	b.n	80013e8 <HAL_ADC_Start_DMA+0x1c8>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d018      	beq.n	8001286 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <HAL_ADC_Start_DMA+0x1d0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a62      	ldr	r2, [pc, #392]	; (80013f4 <HAL_ADC_Start_DMA+0x1d4>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9a      	lsrs	r2, r3, #18
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001278:	e002      	b.n	8001280 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3b01      	subs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f9      	bne.n	800127a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 809c 	bne.w	80013ce <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <HAL_ADC_Start_DMA+0x1d8>)
 800129c:	4013      	ands	r3, r2
 800129e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d0:	d106      	bne.n	80012e0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f023 0206 	bic.w	r2, r3, #6
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
 80012de:	e002      	b.n	80012e6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_ADC_Start_DMA+0x1dc>)
 80012f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_ADC_Start_DMA+0x1e0>)
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_ADC_Start_DMA+0x1e4>)
 8001304:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800130e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800131e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800132e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	334c      	adds	r3, #76	; 0x4c
 800133a:	4619      	mov	r1, r3
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f000 fd0e 	bl	8001d60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_ADC_Start_DMA+0x1e8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10f      	bne.n	8001370 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d143      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	e03a      	b.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_ADC_Start_DMA+0x1ec>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10e      	bne.n	8001398 <HAL_ADC_Start_DMA+0x178>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001396:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_ADC_Start_DMA+0x1e8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d120      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_ADC_Start_DMA+0x1f0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11b      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d114      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e00b      	b.n	80013e6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	fffff8fe 	.word	0xfffff8fe
 80013fc:	080018dd 	.word	0x080018dd
 8001400:	08001997 	.word	0x08001997
 8001404:	080019b3 	.word	0x080019b3
 8001408:	40012300 	.word	0x40012300
 800140c:	40012000 	.word	0x40012000
 8001410:	40012200 	.word	0x40012200

08001414 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1c>
 8001454:	2302      	movs	r3, #2
 8001456:	e136      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x28a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d93a      	bls.n	80014de <HAL_ADC_ConfigChannel+0xa2>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001470:	d035      	beq.n	80014de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	3b1e      	subs	r3, #30
 8001488:	2207      	movs	r2, #7
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a8d      	ldr	r2, [pc, #564]	; (80016d4 <HAL_ADC_ConfigChannel+0x298>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10a      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b6:	e035      	b.n	8001524 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68d9      	ldr	r1, [r3, #12]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4403      	add	r3, r0
 80014d0:	3b1e      	subs	r3, #30
 80014d2:	409a      	lsls	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014dc:	e022      	b.n	8001524 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6919      	ldr	r1, [r3, #16]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	2207      	movs	r2, #7
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43da      	mvns	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	400a      	ands	r2, r1
 8001500:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6919      	ldr	r1, [r3, #16]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	4603      	mov	r3, r0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4403      	add	r3, r0
 800151a:	409a      	lsls	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b06      	cmp	r3, #6
 800152a:	d824      	bhi.n	8001576 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b05      	subs	r3, #5
 800153e:	221f      	movs	r2, #31
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43da      	mvns	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	400a      	ands	r2, r1
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b05      	subs	r3, #5
 8001568:	fa00 f203 	lsl.w	r2, r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
 8001574:	e04c      	b.n	8001610 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d824      	bhi.n	80015c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b23      	subs	r3, #35	; 0x23
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b23      	subs	r3, #35	; 0x23
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
 80015c6:	e023      	b.n	8001610 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b41      	subs	r3, #65	; 0x41
 80015da:	221f      	movs	r2, #31
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b41      	subs	r3, #65	; 0x41
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10a      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1f4>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001622:	d105      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 800162a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800162e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10f      	bne.n	800165a <HAL_ADC_ConfigChannel+0x21e>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d10b      	bne.n	800165a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a25      	ldr	r2, [pc, #148]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001648:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800164c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001658:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_ADC_ConfigChannel+0x29c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d12b      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x280>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_ADC_ConfigChannel+0x298>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d003      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x23a>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b11      	cmp	r3, #17
 8001674:	d122      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 800167c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001680:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_ADC_ConfigChannel+0x2a0>)
 8001688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800168c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_ADC_ConfigChannel+0x298>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d111      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9a      	lsrs	r2, r3, #18
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	10000012 	.word	0x10000012
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40012300 	.word	0x40012300
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016f0:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <ADC_Init+0x1ec>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a77      	ldr	r2, [pc, #476]	; (80018d4 <ADC_Init+0x1ec>)
 80016f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016fc:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <ADC_Init+0x1ec>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4973      	ldr	r1, [pc, #460]	; (80018d4 <ADC_Init+0x1ec>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	021a      	lsls	r2, r3, #8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <ADC_Init+0x1f0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d022      	beq.n	80017c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800178a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e00f      	b.n	80017e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0202 	bic.w	r2, r2, #2
 80017f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	005a      	lsls	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800181e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800182e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6859      	ldr	r1, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	3b01      	subs	r3, #1
 800183c:	035a      	lsls	r2, r3, #13
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e007      	b.n	8001858 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	3b01      	subs	r3, #1
 8001874:	051a      	lsls	r2, r3, #20
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189a:	025a      	lsls	r2, r3, #9
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	029a      	lsls	r2, r3, #10
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	0f000001 	.word	0x0f000001

080018dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d13c      	bne.n	8001970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d12b      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d127      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001930:	2b00      	cmp	r3, #0
 8001932:	d119      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0220 	bic.w	r2, r2, #32
 8001942:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7fe fdcb 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800196e:	e00e      	b.n	800198e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fd53 	bl	8001428 <HAL_ADC_ErrorCallback>
}
 8001982:	e004      	b.n	800198e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fd35 	bl	8001414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f043 0204 	orr.w	r2, r3, #4
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fd28 	bl	8001428 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	05fa0000 	.word	0x05fa0000

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fa92 	bl	8001138 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e099      	b.n	8001d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	e00f      	b.n	8001c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c42:	f7ff fa79 	bl	8001138 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d908      	bls.n	8001c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e078      	b.n	8001d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e8      	bne.n	8001c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_DMA_Init+0x158>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d117      	bne.n	8001d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fa77 	bl	80021fc <DMA_CheckFifoParam>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d22:	2301      	movs	r3, #1
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa2e 	bl	8002190 <DMA_CalcBaseAndBitshift>
 8001d34:	4603      	mov	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	f010803f 	.word	0xf010803f

08001d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Start_IT+0x26>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e048      	b.n	8001e18 <HAL_DMA_Start_IT+0xb8>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d137      	bne.n	8001e0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9c0 	bl	8002134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0216 	orr.w	r2, r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0208 	orr.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e005      	b.n	8001e16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e2c:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_DMA_IRQHandler+0x248>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a8e      	ldr	r2, [pc, #568]	; (800206c <HAL_DMA_IRQHandler+0x24c>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2208      	movs	r2, #8
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2201      	movs	r2, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0202 	orr.w	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2210      	movs	r2, #16
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d043      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03c      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d018      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
 8001f4e:	e01f      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0208 	bic.w	r2, r2, #8
 8001f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2220      	movs	r2, #32
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 808f 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8087 	beq.w	80020c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d136      	bne.n	8002038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0216 	bic.w	r2, r2, #22
 8001fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x1da>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0208 	bic.w	r2, r2, #8
 8002008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	223f      	movs	r2, #63	; 0x3f
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d07e      	beq.n	800212c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
        }
        return;
 8002036:	e079      	b.n	800212c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01d      	beq.n	8002082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10d      	bne.n	8002070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	2b00      	cmp	r3, #0
 800205a:	d031      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e02c      	b.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000
 800206c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e01e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10f      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0210 	bic.w	r2, r2, #16
 800209e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d032      	beq.n	800212e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d022      	beq.n	800211a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2205      	movs	r2, #5
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d307      	bcc.n	8002108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f2      	bne.n	80020ec <HAL_DMA_IRQHandler+0x2cc>
 8002106:	e000      	b.n	800210a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e000      	b.n	800212e <HAL_DMA_IRQHandler+0x30e>
        return;
 800212c:	bf00      	nop
    }
  }
}
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d108      	bne.n	8002174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002172:	e007      	b.n	8002184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b10      	subs	r3, #16
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <DMA_CalcBaseAndBitshift+0x60>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <DMA_CalcBaseAndBitshift+0x64>)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d908      	bls.n	80021d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <DMA_CalcBaseAndBitshift+0x68>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	1d1a      	adds	r2, r3, #4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	; 0x58
 80021ce:	e006      	b.n	80021de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <DMA_CalcBaseAndBitshift+0x68>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	aaaaaaab 	.word	0xaaaaaaab
 80021f4:	08005550 	.word	0x08005550
 80021f8:	fffffc00 	.word	0xfffffc00

080021fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d856      	bhi.n	80022ca <DMA_CheckFifoParam+0xce>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <DMA_CheckFifoParam+0x28>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002235 	.word	0x08002235
 8002228:	08002247 	.word	0x08002247
 800222c:	08002235 	.word	0x08002235
 8002230:	080022cb 	.word	0x080022cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d046      	beq.n	80022ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e043      	b.n	80022ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224e:	d140      	bne.n	80022d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e03d      	b.n	80022d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225e:	d121      	bne.n	80022a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d837      	bhi.n	80022d6 <DMA_CheckFifoParam+0xda>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <DMA_CheckFifoParam+0x70>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	08002283 	.word	0x08002283
 8002274:	0800227d 	.word	0x0800227d
 8002278:	08002295 	.word	0x08002295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e030      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d025      	beq.n	80022da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002292:	e022      	b.n	80022da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229c:	d11f      	bne.n	80022de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a2:	e01c      	b.n	80022de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d903      	bls.n	80022b2 <DMA_CheckFifoParam+0xb6>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d003      	beq.n	80022b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b0:	e018      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
      break;
 80022b6:	e015      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      break;
 80022c8:	e00b      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022ca:	bf00      	nop
 80022cc:	e00a      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e008      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e006      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e004      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
    }
  } 
  
  return status; 
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e175      	b.n	8002600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8164 	bne.w	80025fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x56>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80be 	beq.w	80025fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_GPIO_Init+0x324>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002496:	4a61      	ldr	r2, [pc, #388]	; (800261c <HAL_GPIO_Init+0x328>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x32c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d037      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a57      	ldr	r2, [pc, #348]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d031      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_GPIO_Init+0x334>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x236>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a55      	ldr	r2, [pc, #340]	; (800262c <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x22a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a51      	ldr	r2, [pc, #324]	; (800263c <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a50      	ldr	r2, [pc, #320]	; (8002640 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x21a>
 800250a:	2309      	movs	r3, #9
 800250c:	e012      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800250e:	230a      	movs	r3, #10
 8002510:	e010      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002512:	2308      	movs	r3, #8
 8002514:	e00e      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002516:	2307      	movs	r3, #7
 8002518:	e00c      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251a:	2306      	movs	r3, #6
 800251c:	e00a      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251e:	2305      	movs	r3, #5
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002522:	2304      	movs	r3, #4
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002544:	4935      	ldr	r1, [pc, #212]	; (800261c <HAL_GPIO_Init+0x328>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_GPIO_Init+0x354>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b32      	ldr	r3, [pc, #200]	; (8002648 <HAL_GPIO_Init+0x354>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f ae86 	bls.w	8002314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40022400 	.word	0x40022400
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07f      	b.n	8002792 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fad6 	bl	8000c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	e006      	b.n	8002708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d104      	bne.n	800271a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_I2C_Init+0x11c>)
 8002726:	430b      	orrs	r3, r1
 8002728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	02008000 	.word	0x02008000

080027a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d138      	bne.n	8002828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e032      	b.n	800282a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d139      	bne.n	80028c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002856:	2302      	movs	r3, #2
 8002858:	e033      	b.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2224      	movs	r2, #36	; 0x24
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d0:	b08f      	sub	sp, #60	; 0x3c
 80028d2:	af0a      	add	r7, sp, #40	; 0x28
 80028d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e116      	b.n	8002b0e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fa6c 	bl	8000dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fb28 	bl	8004f74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	687e      	ldr	r6, [r7, #4]
 800292c:	466d      	mov	r5, sp
 800292e:	f106 0410 	add.w	r4, r6, #16
 8002932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800293a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800293e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002942:	1d33      	adds	r3, r6, #4
 8002944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002946:	6838      	ldr	r0, [r7, #0]
 8002948:	f002 fabc 	bl	8004ec4 <USB_CoreInit>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d7      	b.n	8002b0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fb16 	bl	8004f96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e04a      	b.n	8002a06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	333d      	adds	r3, #61	; 0x3d
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	333c      	adds	r3, #60	; 0x3c
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	b298      	uxth	r0, r3
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3344      	adds	r3, #68	; 0x44
 80029ac:	4602      	mov	r2, r0
 80029ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3340      	adds	r3, #64	; 0x40
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3348      	adds	r3, #72	; 0x48
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	334c      	adds	r3, #76	; 0x4c
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3354      	adds	r3, #84	; 0x54
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	3301      	adds	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3af      	bcc.n	8002970 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e044      	b.n	8002aa0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3b5      	bcc.n	8002a16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	687e      	ldr	r6, [r7, #4]
 8002ab2:	466d      	mov	r5, sp
 8002ab4:	f106 0410 	add.w	r4, r6, #16
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac8:	1d33      	adds	r3, r6, #4
 8002aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f002 faaf 	bl	8005030 <USB_DevInit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e014      	b.n	8002b0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f80b 	bl	8002b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fc6d 	bl	80053e6 <USB_DevDisconnect>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	10000003 	.word	0x10000003

08002b60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e291      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b96      	ldr	r3, [pc, #600]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb0:	4b93      	ldr	r3, [pc, #588]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x62>
 8002bbc:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b8d      	ldr	r3, [pc, #564]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x130>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e26b      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x7a>
 8002bec:	4b84      	ldr	r3, [pc, #528]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a83      	ldr	r2, [pc, #524]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x9c>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7b      	ldr	r2, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c26:	4b76      	ldr	r3, [pc, #472]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a75      	ldr	r2, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a72      	ldr	r2, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd8>
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b6c      	ldr	r3, [pc, #432]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6b      	ldr	r2, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa6a 	bl	8001138 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fa66 	bl	8001138 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e21f      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa56 	bl	8001138 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fa52 	bl	8001138 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e20b      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x110>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d069      	beq.n	8002d92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x190>
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1df      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	493d      	ldr	r1, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e040      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fa08 	bl	8001138 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fa04 	bl	8001138 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1bd      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4929      	ldr	r1, [pc, #164]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
 8002d5e:	e018      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f9e4 	bl	8001138 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe f9e0 	bl	8001138 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e199      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d038      	beq.n	8002e10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe f9c1 	bl	8001138 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe f9bd 	bl	8001138 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e176      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x23a>
 8002dd8:	e01a      	b.n	8002e10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_RCC_OscConfig+0x280>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe f9a7 	bl	8001138 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe f9a3 	bl	8001138 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d903      	bls.n	8002e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e15c      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
 8002e00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b91      	ldr	r3, [pc, #580]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a4 	beq.w	8002f66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a87      	ldr	r2, [pc, #540]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe f96b 	bl	8001138 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe f967 	bl	8001138 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e120      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x31a>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a6e      	ldr	r2, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x33c>
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a66      	ldr	r2, [pc, #408]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x35e>
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a60      	ldr	r2, [pc, #384]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
 8002ede:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe f91b 	bl	8001138 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe f917 	bl	8001138 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0ce      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x386>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f905 	bl	8001138 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe f901 	bl	8001138 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b3c      	ldr	r3, [pc, #240]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a4 	beq.w	80030b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d06b      	beq.n	8003054 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d149      	bne.n	8003018 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a30      	ldr	r2, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f8d2 	bl	8001138 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe f8ce 	bl	8001138 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e087      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f8a2 	bl	8001138 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe f89e 	bl	8001138 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e057      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x478>
 8003016:	e04f      	b.n	80030b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe f888 	bl	8001138 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe f884 	bl	8001138 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e03d      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x4ac>
 800304a:	e035      	b.n	80030b8 <HAL_RCC_OscConfig+0x538>
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x544>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d028      	beq.n	80030b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d121      	bne.n	80030b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800308a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0d0      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b6a      	ldr	r3, [pc, #424]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 020f 	bic.w	r2, r3, #15
 80030f6:	4965      	ldr	r1, [pc, #404]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b8      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003132:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	494d      	ldr	r1, [pc, #308]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d040      	beq.n	80031ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e073      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4936      	ldr	r1, [pc, #216]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fd ffbc 	bl	8001138 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fd ffb8 	bl	8001138 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e053      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d210      	bcs.n	800321c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 020f 	bic.w	r2, r3, #15
 8003202:	4922      	ldr	r1, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e032      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4916      	ldr	r1, [pc, #88]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f821 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	490a      	ldr	r1, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1cc>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1d0>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1d4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd ff18 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00
 8003290:	40023800 	.word	0x40023800
 8003294:	08005538 	.word	0x08005538
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b094      	sub	sp, #80	; 0x50
 80032a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
 80032ac:	2300      	movs	r3, #0
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	2300      	movs	r3, #0
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b8:	4b79      	ldr	r3, [pc, #484]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d00d      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x40>
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	f200 80e1 	bhi.w	800348c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x3a>
 80032d2:	e0db      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b73      	ldr	r3, [pc, #460]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d8:	e0db      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032de:	e0d8      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f6:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	2200      	movs	r2, #0
 80032fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	2300      	movs	r3, #0
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
 800330e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003312:	4622      	mov	r2, r4
 8003314:	462b      	mov	r3, r5
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4621      	mov	r1, r4
 800332c:	1a51      	subs	r1, r2, r1
 800332e:	6139      	str	r1, [r7, #16]
 8003330:	4629      	mov	r1, r5
 8003332:	eb63 0301 	sbc.w	r3, r3, r1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003344:	4659      	mov	r1, fp
 8003346:	018b      	lsls	r3, r1, #6
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334e:	4651      	mov	r1, sl
 8003350:	018a      	lsls	r2, r1, #6
 8003352:	4651      	mov	r1, sl
 8003354:	ebb2 0801 	subs.w	r8, r2, r1
 8003358:	4659      	mov	r1, fp
 800335a:	eb63 0901 	sbc.w	r9, r3, r1
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003372:	4690      	mov	r8, r2
 8003374:	4699      	mov	r9, r3
 8003376:	4623      	mov	r3, r4
 8003378:	eb18 0303 	adds.w	r3, r8, r3
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	462b      	mov	r3, r5
 8003380:	eb49 0303 	adc.w	r3, r9, r3
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003392:	4629      	mov	r1, r5
 8003394:	024b      	lsls	r3, r1, #9
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339c:	4621      	mov	r1, r4
 800339e:	024a      	lsls	r2, r1, #9
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a6:	2200      	movs	r2, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b0:	f7fc ff2a 	bl	8000208 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	e058      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	2200      	movs	r2, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	4611      	mov	r1, r2
 80033ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
 80033d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d8:	4642      	mov	r2, r8
 80033da:	464b      	mov	r3, r9
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	0159      	lsls	r1, r3, #5
 80033e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ea:	0150      	lsls	r0, r2, #5
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4641      	mov	r1, r8
 80033f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800340c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003410:	ebb2 040a 	subs.w	r4, r2, sl
 8003414:	eb63 050b 	sbc.w	r5, r3, fp
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	00eb      	lsls	r3, r5, #3
 8003422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003426:	00e2      	lsls	r2, r4, #3
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	4643      	mov	r3, r8
 800342e:	18e3      	adds	r3, r4, r3
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	464b      	mov	r3, r9
 8003434:	eb45 0303 	adc.w	r3, r5, r3
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003446:	4629      	mov	r1, r5
 8003448:	028b      	lsls	r3, r1, #10
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003450:	4621      	mov	r1, r4
 8003452:	028a      	lsls	r2, r1, #10
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	61fa      	str	r2, [r7, #28]
 8003460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003464:	f7fc fed0 	bl	8000208 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003494:	4618      	mov	r0, r3
 8003496:	3750      	adds	r7, #80	; 0x50
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	007a1200 	.word	0x007a1200

080034ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff0 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005548 	.word	0x08005548

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffdc 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0b5b      	lsrs	r3, r3, #13
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08005548 	.word	0x08005548

08003514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800353c:	4b69      	ldr	r3, [pc, #420]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a68      	ldr	r2, [pc, #416]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	4964      	ldr	r1, [pc, #400]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	4959      	ldr	r1, [pc, #356]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d017      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	494a      	ldr	r1, [pc, #296]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d101      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 808b 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6413      	str	r3, [r2, #64]	; 0x40
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd fd8c 	bl	8001138 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fd fd88 	bl	8001138 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e357      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d035      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d02e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d114      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fd50 	bl	8001138 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd fd4c 	bl	8001138 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e319      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ca:	d111      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036da:	400b      	ands	r3, r1
 80036dc:	4901      	ldr	r1, [pc, #4]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
 80036e2:	e00b      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
 80036ec:	0ffffcff 	.word	0x0ffffcff
 80036f0:	4baa      	ldr	r3, [pc, #680]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4aa9      	ldr	r2, [pc, #676]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	4ba7      	ldr	r3, [pc, #668]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	49a4      	ldr	r1, [pc, #656]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	4313      	orrs	r3, r2
 800370c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371a:	4ba0      	ldr	r3, [pc, #640]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	4a9e      	ldr	r2, [pc, #632]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800372a:	4b9c      	ldr	r3, [pc, #624]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	4999      	ldr	r1, [pc, #612]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003748:	4b94      	ldr	r3, [pc, #592]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003756:	4991      	ldr	r1, [pc, #580]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376a:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003778:	4988      	ldr	r1, [pc, #544]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800378c:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379a:	4980      	ldr	r1, [pc, #512]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4977      	ldr	r1, [pc, #476]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d0:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	496f      	ldr	r1, [pc, #444]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f2:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f023 020c 	bic.w	r2, r3, #12
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	4966      	ldr	r1, [pc, #408]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	495e      	ldr	r1, [pc, #376]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003836:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	4955      	ldr	r1, [pc, #340]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	494d      	ldr	r1, [pc, #308]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800387a:	4b48      	ldr	r3, [pc, #288]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	4944      	ldr	r1, [pc, #272]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	493c      	ldr	r1, [pc, #240]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	4933      	ldr	r1, [pc, #204]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ee:	492b      	ldr	r1, [pc, #172]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003910:	4922      	ldr	r1, [pc, #136]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003920:	d101      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003974:	4909      	ldr	r1, [pc, #36]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d006      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80d9 	beq.w	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a01      	ldr	r2, [pc, #4]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800399c:	40023800 	.word	0x40023800
 80039a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a2:	f7fd fbc9 	bl	8001138 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039aa:	f7fd fbc5 	bl	8001138 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e194      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039bc:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d021      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	019a      	lsls	r2, r3, #6
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	071b      	lsls	r3, r3, #28
 8003a10:	4957      	ldr	r1, [pc, #348]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a42:	d129      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	0f1b      	lsrs	r3, r3, #28
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	019a      	lsls	r2, r3, #6
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	071b      	lsls	r3, r3, #28
 8003a78:	493d      	ldr	r1, [pc, #244]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a80:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a86:	f023 021f 	bic.w	r2, r3, #31
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4937      	ldr	r1, [pc, #220]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aaa:	0e1b      	lsrs	r3, r3, #24
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	0f1b      	lsrs	r3, r3, #28
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	019a      	lsls	r2, r3, #6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	431a      	orrs	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	071b      	lsls	r3, r3, #28
 8003ad8:	4925      	ldr	r1, [pc, #148]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	019a      	lsls	r2, r3, #6
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	071b      	lsls	r3, r3, #28
 8003b08:	4919      	ldr	r1, [pc, #100]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fb0c 	bl	8001138 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b24:	f7fd fb08 	bl	8001138 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0d7      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 80cd 	bne.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd faef 	bl	8001138 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b5e:	f7fd faeb 	bl	8001138 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d903      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0ba      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b80:	d0ed      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d12a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003baa:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	0f1b      	lsrs	r3, r3, #28
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	019a      	lsls	r2, r3, #6
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	4944      	ldr	r1, [pc, #272]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003be6:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	493d      	ldr	r1, [pc, #244]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d022      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c14:	d11d      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	0e1b      	lsrs	r3, r3, #24
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	4929      	ldr	r1, [pc, #164]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4917      	ldr	r1, [pc, #92]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4911      	ldr	r1, [pc, #68]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fa3c 	bl	8001138 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc4:	f7fd fa38 	bl	8001138 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e007      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce2:	d1ef      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d12:	f040 808d 	bne.w	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003d16:	4b93      	ldr	r3, [pc, #588]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d24:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d07c      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d34:	d87b      	bhi.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d42:	d039      	beq.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003d44:	e073      	b.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d46:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d52:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5a:	4a83      	ldr	r2, [pc, #524]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e007      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003d64:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6c:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003d74:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	0e1b      	lsrs	r3, r3, #24
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003d82:	4b78      	ldr	r3, [pc, #480]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	fb03 f202 	mul.w	r2, r3, r2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003d9c:	4b71      	ldr	r3, [pc, #452]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
        break;
 8003db6:	e03b      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003db8:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003dc4:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dcc:	4a66      	ldr	r2, [pc, #408]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e007      	b.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dde:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003de6:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dec:	0e1b      	lsrs	r3, r3, #24
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003df4:	4b5b      	ldr	r3, [pc, #364]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	fb03 f202 	mul.w	r2, r3, r2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
        break;
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003e28:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003e2a:	617b      	str	r3, [r7, #20]
        break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003e2e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	f040 808d 	bne.w	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e40:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e48:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e50:	d07c      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e58:	d87b      	bhi.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e66:	d039      	beq.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003e68:	e073      	b.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d108      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e76:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e007      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e90:	4a36      	ldr	r2, [pc, #216]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	fb03 f202 	mul.w	r2, r3, r2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003ec0:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
        break;
 8003eda:	e03b      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d108      	bne.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	e007      	b.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f10:	0e1b      	lsrs	r3, r3, #24
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	fb03 f202 	mul.w	r2, r3, r2
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
        break;
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003f4e:	617b      	str	r3, [r7, #20]
        break;
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003f52:	bf00      	nop
      }
    }
  }

  return frequency;
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	00bb8000 	.word	0x00bb8000

08003f74 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e156      	b.n	8004240 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc ff90 	bl	8000ecc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fa77 	bl	80044a8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d00c      	beq.n	8003fdc <HAL_SAI_Init+0x68>
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d80d      	bhi.n	8003fe2 <HAL_SAI_Init+0x6e>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SAI_Init+0x5c>
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d003      	beq.n	8003fd6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003fce:	e008      	b.n	8003fe2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
      break;
 8003fd4:	e006      	b.n	8003fe4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	61fb      	str	r3, [r7, #28]
      break;
 8003fda:	e003      	b.n	8003fe4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	61fb      	str	r3, [r7, #28]
      break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_SAI_Init+0x70>
      break;
 8003fe2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d81e      	bhi.n	800402a <HAL_SAI_Init+0xb6>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_SAI_Init+0x80>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	0800400b 	.word	0x0800400b
 8003ffc:	08004013 	.word	0x08004013
 8004000:	0800401b 	.word	0x0800401b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
    }
    break;
 8004008:	e010      	b.n	800402c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800400a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004010:	e00c      	b.n	800402c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004016:	617b      	str	r3, [r7, #20]
    }
    break;
 8004018:	e008      	b.n	800402c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800401a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800401e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004028:	e000      	b.n	800402c <HAL_SAI_Init+0xb8>
    default:
      break;
 800402a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a85      	ldr	r2, [pc, #532]	; (8004248 <HAL_SAI_Init+0x2d4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_SAI_Init+0xcc>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a84      	ldr	r2, [pc, #528]	; (800424c <HAL_SAI_Init+0x2d8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d103      	bne.n	8004048 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004040:	4a83      	ldr	r2, [pc, #524]	; (8004250 <HAL_SAI_Init+0x2dc>)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e002      	b.n	800404e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004048:	4a82      	ldr	r2, [pc, #520]	; (8004254 <HAL_SAI_Init+0x2e0>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04c      	beq.n	80040f0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7a      	ldr	r2, [pc, #488]	; (8004248 <HAL_SAI_Init+0x2d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_SAI_Init+0xfa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a78      	ldr	r2, [pc, #480]	; (800424c <HAL_SAI_Init+0x2d8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d104      	bne.n	8004078 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800406e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004072:	f7ff fe3f 	bl	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004076:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a76      	ldr	r2, [pc, #472]	; (8004258 <HAL_SAI_Init+0x2e4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_SAI_Init+0x118>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a75      	ldr	r2, [pc, #468]	; (800425c <HAL_SAI_Init+0x2e8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d104      	bne.n	8004096 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800408c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004090:	f7ff fe30 	bl	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004094:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	461a      	mov	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	025b      	lsls	r3, r3, #9
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	; (8004260 <HAL_SAI_Init+0x2ec>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_SAI_Init+0x2ec>)
 80040c0:	fba3 2301 	umull	r2, r3, r3, r1
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	1aca      	subs	r2, r1, r3
 80040d0:	2a08      	cmp	r2, #8
 80040d2:	d904      	bls.n	80040de <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d104      	bne.n	80040f0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	085a      	lsrs	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_SAI_Init+0x18c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d109      	bne.n	8004114 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_SAI_Init+0x198>
 8004108:	2300      	movs	r3, #0
 800410a:	e001      	b.n	8004110 <HAL_SAI_Init+0x19c>
 800410c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e008      	b.n	8004126 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_SAI_Init+0x1ae>
 800411c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004120:	e000      	b.n	8004124 <HAL_SAI_Init+0x1b0>
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_SAI_Init+0x2f0>)
 8004132:	400b      	ands	r3, r1
 8004134:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800414a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	431a      	orrs	r2, r3
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800415e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800416a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	051b      	lsls	r3, r3, #20
 8004172:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <HAL_SAI_Init+0x2f4>)
 8004188:	400b      	ands	r3, r1
 800418a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6899      	ldr	r1, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_SAI_Init+0x2f8>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80041ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80041d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80041d6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	3b01      	subs	r3, #1
 80041de:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80041e0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68d9      	ldr	r1, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80041f8:	400b      	ands	r3, r1
 80041fa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	3b01      	subs	r3, #1
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40015804 	.word	0x40015804
 800424c:	40015824 	.word	0x40015824
 8004250:	40015800 	.word	0x40015800
 8004254:	40015c00 	.word	0x40015c00
 8004258:	40015c04 	.word	0x40015c04
 800425c:	40015c24 	.word	0x40015c24
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	ff05c010 	.word	0xff05c010
 8004268:	ffff1ff0 	.word	0xffff1ff0
 800426c:	fff88000 	.word	0xfff88000

08004270 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fc ff5a 	bl	8001138 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SAI_Transmit+0x22>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0b6      	b.n	8004404 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 80af 	bne.w	8004402 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_SAI_Transmit+0x42>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0a8      	b.n	8004404 <HAL_SAI_Transmit+0x194>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2212      	movs	r2, #18
 80042d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d17a      	bne.n	80043e4 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f88c 	bl	800440c <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004302:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8004304:	e06e      	b.n	80043e4 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d035      	beq.n	8004382 <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d10d      	bne.n	800433a <HAL_SAI_Transmit+0xca>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6651      	str	r1, [r2, #100]	; 0x64
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61da      	str	r2, [r3, #28]
 8004338:	e01a      	b.n	8004370 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d80b      	bhi.n	800435a <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004346:	881a      	ldrh	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004352:	1c9a      	adds	r2, r3, #2
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	665a      	str	r2, [r3, #100]	; 0x64
 8004358:	e00a      	b.n	8004370 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004380:	e030      	b.n	80043e4 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d02c      	beq.n	80043e4 <HAL_SAI_Transmit+0x174>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_SAI_Transmit+0x130>
 8004390:	f7fc fed2 	bl	8001138 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d221      	bcs.n	80043e4 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f874 	bl	80044a8 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e00f      	b.n	8004404 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d18b      	bne.n	8004306 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8004414:	e034      	b.n	8004480 <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d10d      	bne.n	800443a <SAI_FillFifo+0x2e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6651      	str	r1, [r2, #100]	; 0x64
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61da      	str	r2, [r3, #28]
 8004438:	e01a      	b.n	8004470 <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d80b      	bhi.n	800445a <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	665a      	str	r2, [r3, #100]	; 0x64
 8004458:	e00a      	b.n	8004470 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800448a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800448e:	d004      	beq.n	800449a <SAI_FillFifo+0x8e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1bd      	bne.n	8004416 <SAI_FillFifo+0xa>
  }
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80044b0:	4b17      	ldr	r3, [pc, #92]	; (8004510 <SAI_Disable+0x68>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <SAI_Disable+0x6c>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	0b1b      	lsrs	r3, r3, #12
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e5a      	subs	r2, r3, #1
 80044d8:	60fa      	str	r2, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	72fb      	strb	r3, [r7, #11]
      break;
 80044f2:	e006      	b.n	8004502 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e8      	bne.n	80044d4 <SAI_Disable+0x2c>

  return status;
 8004502:	7afb      	ldrb	r3, [r7, #11]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000000 	.word	0x20000000
 8004514:	95cbec1b 	.word	0x95cbec1b

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e040      	b.n	80045ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fbec 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8b0 	bl	80046bc <UART_SetConfig>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e022      	b.n	80045ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fb08 	bl	8004b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb8f 	bl	8004cc8 <UART_CheckIdleState>
 80045aa:	4603      	mov	r3, r0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d171      	bne.n	80046b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Transmit+0x24>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e06a      	b.n	80046b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2221      	movs	r2, #33	; 0x21
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ea:	f7fc fda5 	bl	8001138 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d108      	bne.n	800461c <HAL_UART_Transmit+0x68>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e003      	b.n	8004624 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004624:	e02c      	b.n	8004680 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fb80 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e038      	b.n	80046b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	3302      	adds	r3, #2
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e007      	b.n	800466e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3301      	adds	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1cc      	bne.n	8004626 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	2140      	movs	r1, #64	; 0x40
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb4d 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e005      	b.n	80046b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4ba6      	ldr	r3, [pc, #664]	; (8004980 <UART_SetConfig+0x2c4>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	430a      	orrs	r2, r1
 800472c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a94      	ldr	r2, [pc, #592]	; (8004984 <UART_SetConfig+0x2c8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d120      	bne.n	800477a <UART_SetConfig+0xbe>
 8004738:	4b93      	ldr	r3, [pc, #588]	; (8004988 <UART_SetConfig+0x2cc>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d816      	bhi.n	8004774 <UART_SetConfig+0xb8>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x90>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	0800475d 	.word	0x0800475d
 8004750:	08004769 	.word	0x08004769
 8004754:	08004763 	.word	0x08004763
 8004758:	0800476f 	.word	0x0800476f
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e150      	b.n	8004a04 <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e14d      	b.n	8004a04 <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e14a      	b.n	8004a04 <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e147      	b.n	8004a04 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e144      	b.n	8004a04 <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a83      	ldr	r2, [pc, #524]	; (800498c <UART_SetConfig+0x2d0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d132      	bne.n	80047ea <UART_SetConfig+0x12e>
 8004784:	4b80      	ldr	r3, [pc, #512]	; (8004988 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d828      	bhi.n	80047e4 <UART_SetConfig+0x128>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xdc>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047e5 	.word	0x080047e5
 80047a4:	080047e5 	.word	0x080047e5
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047d3 	.word	0x080047d3
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047e5 	.word	0x080047e5
 80047c8:	080047df 	.word	0x080047df
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e118      	b.n	8004a04 <UART_SetConfig+0x348>
 80047d2:	2302      	movs	r3, #2
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e115      	b.n	8004a04 <UART_SetConfig+0x348>
 80047d8:	2304      	movs	r3, #4
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e112      	b.n	8004a04 <UART_SetConfig+0x348>
 80047de:	2308      	movs	r3, #8
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e10f      	b.n	8004a04 <UART_SetConfig+0x348>
 80047e4:	2310      	movs	r3, #16
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e10c      	b.n	8004a04 <UART_SetConfig+0x348>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a68      	ldr	r2, [pc, #416]	; (8004990 <UART_SetConfig+0x2d4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0x17a>
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <UART_SetConfig+0x2cc>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047fe:	2b30      	cmp	r3, #48	; 0x30
 8004800:	d013      	beq.n	800482a <UART_SetConfig+0x16e>
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d814      	bhi.n	8004830 <UART_SetConfig+0x174>
 8004806:	2b20      	cmp	r3, #32
 8004808:	d009      	beq.n	800481e <UART_SetConfig+0x162>
 800480a:	2b20      	cmp	r3, #32
 800480c:	d810      	bhi.n	8004830 <UART_SetConfig+0x174>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <UART_SetConfig+0x15c>
 8004812:	2b10      	cmp	r3, #16
 8004814:	d006      	beq.n	8004824 <UART_SetConfig+0x168>
 8004816:	e00b      	b.n	8004830 <UART_SetConfig+0x174>
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e0f2      	b.n	8004a04 <UART_SetConfig+0x348>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e0ef      	b.n	8004a04 <UART_SetConfig+0x348>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e0ec      	b.n	8004a04 <UART_SetConfig+0x348>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e0e9      	b.n	8004a04 <UART_SetConfig+0x348>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e0e6      	b.n	8004a04 <UART_SetConfig+0x348>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a56      	ldr	r2, [pc, #344]	; (8004994 <UART_SetConfig+0x2d8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d120      	bne.n	8004882 <UART_SetConfig+0x1c6>
 8004840:	4b51      	ldr	r3, [pc, #324]	; (8004988 <UART_SetConfig+0x2cc>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800484a:	2bc0      	cmp	r3, #192	; 0xc0
 800484c:	d013      	beq.n	8004876 <UART_SetConfig+0x1ba>
 800484e:	2bc0      	cmp	r3, #192	; 0xc0
 8004850:	d814      	bhi.n	800487c <UART_SetConfig+0x1c0>
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d009      	beq.n	800486a <UART_SetConfig+0x1ae>
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d810      	bhi.n	800487c <UART_SetConfig+0x1c0>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <UART_SetConfig+0x1a8>
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d006      	beq.n	8004870 <UART_SetConfig+0x1b4>
 8004862:	e00b      	b.n	800487c <UART_SetConfig+0x1c0>
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e0cc      	b.n	8004a04 <UART_SetConfig+0x348>
 800486a:	2302      	movs	r3, #2
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e0c9      	b.n	8004a04 <UART_SetConfig+0x348>
 8004870:	2304      	movs	r3, #4
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e0c6      	b.n	8004a04 <UART_SetConfig+0x348>
 8004876:	2308      	movs	r3, #8
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e0c3      	b.n	8004a04 <UART_SetConfig+0x348>
 800487c:	2310      	movs	r3, #16
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e0c0      	b.n	8004a04 <UART_SetConfig+0x348>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a44      	ldr	r2, [pc, #272]	; (8004998 <UART_SetConfig+0x2dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d125      	bne.n	80048d8 <UART_SetConfig+0x21c>
 800488c:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <UART_SetConfig+0x2cc>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489a:	d017      	beq.n	80048cc <UART_SetConfig+0x210>
 800489c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a0:	d817      	bhi.n	80048d2 <UART_SetConfig+0x216>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a6:	d00b      	beq.n	80048c0 <UART_SetConfig+0x204>
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ac:	d811      	bhi.n	80048d2 <UART_SetConfig+0x216>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <UART_SetConfig+0x1fe>
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d006      	beq.n	80048c6 <UART_SetConfig+0x20a>
 80048b8:	e00b      	b.n	80048d2 <UART_SetConfig+0x216>
 80048ba:	2300      	movs	r3, #0
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e0a1      	b.n	8004a04 <UART_SetConfig+0x348>
 80048c0:	2302      	movs	r3, #2
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e09e      	b.n	8004a04 <UART_SetConfig+0x348>
 80048c6:	2304      	movs	r3, #4
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e09b      	b.n	8004a04 <UART_SetConfig+0x348>
 80048cc:	2308      	movs	r3, #8
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e098      	b.n	8004a04 <UART_SetConfig+0x348>
 80048d2:	2310      	movs	r3, #16
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e095      	b.n	8004a04 <UART_SetConfig+0x348>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	; (800499c <UART_SetConfig+0x2e0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d125      	bne.n	800492e <UART_SetConfig+0x272>
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <UART_SetConfig+0x2cc>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f0:	d017      	beq.n	8004922 <UART_SetConfig+0x266>
 80048f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f6:	d817      	bhi.n	8004928 <UART_SetConfig+0x26c>
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d00b      	beq.n	8004916 <UART_SetConfig+0x25a>
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004902:	d811      	bhi.n	8004928 <UART_SetConfig+0x26c>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x254>
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d006      	beq.n	800491c <UART_SetConfig+0x260>
 800490e:	e00b      	b.n	8004928 <UART_SetConfig+0x26c>
 8004910:	2301      	movs	r3, #1
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e076      	b.n	8004a04 <UART_SetConfig+0x348>
 8004916:	2302      	movs	r3, #2
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e073      	b.n	8004a04 <UART_SetConfig+0x348>
 800491c:	2304      	movs	r3, #4
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e070      	b.n	8004a04 <UART_SetConfig+0x348>
 8004922:	2308      	movs	r3, #8
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e06d      	b.n	8004a04 <UART_SetConfig+0x348>
 8004928:	2310      	movs	r3, #16
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e06a      	b.n	8004a04 <UART_SetConfig+0x348>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <UART_SetConfig+0x2e4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d138      	bne.n	80049aa <UART_SetConfig+0x2ee>
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <UART_SetConfig+0x2cc>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004946:	d017      	beq.n	8004978 <UART_SetConfig+0x2bc>
 8004948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800494c:	d82a      	bhi.n	80049a4 <UART_SetConfig+0x2e8>
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004952:	d00b      	beq.n	800496c <UART_SetConfig+0x2b0>
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004958:	d824      	bhi.n	80049a4 <UART_SetConfig+0x2e8>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <UART_SetConfig+0x2aa>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	d006      	beq.n	8004972 <UART_SetConfig+0x2b6>
 8004964:	e01e      	b.n	80049a4 <UART_SetConfig+0x2e8>
 8004966:	2300      	movs	r3, #0
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e04b      	b.n	8004a04 <UART_SetConfig+0x348>
 800496c:	2302      	movs	r3, #2
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e048      	b.n	8004a04 <UART_SetConfig+0x348>
 8004972:	2304      	movs	r3, #4
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e045      	b.n	8004a04 <UART_SetConfig+0x348>
 8004978:	2308      	movs	r3, #8
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e042      	b.n	8004a04 <UART_SetConfig+0x348>
 800497e:	bf00      	nop
 8004980:	efff69f3 	.word	0xefff69f3
 8004984:	40011000 	.word	0x40011000
 8004988:	40023800 	.word	0x40023800
 800498c:	40004400 	.word	0x40004400
 8004990:	40004800 	.word	0x40004800
 8004994:	40004c00 	.word	0x40004c00
 8004998:	40005000 	.word	0x40005000
 800499c:	40011400 	.word	0x40011400
 80049a0:	40007800 	.word	0x40007800
 80049a4:	2310      	movs	r3, #16
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e02c      	b.n	8004a04 <UART_SetConfig+0x348>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a72      	ldr	r2, [pc, #456]	; (8004b78 <UART_SetConfig+0x4bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d125      	bne.n	8004a00 <UART_SetConfig+0x344>
 80049b4:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <UART_SetConfig+0x4c0>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049c2:	d017      	beq.n	80049f4 <UART_SetConfig+0x338>
 80049c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049c8:	d817      	bhi.n	80049fa <UART_SetConfig+0x33e>
 80049ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ce:	d00b      	beq.n	80049e8 <UART_SetConfig+0x32c>
 80049d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d4:	d811      	bhi.n	80049fa <UART_SetConfig+0x33e>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <UART_SetConfig+0x326>
 80049da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049de:	d006      	beq.n	80049ee <UART_SetConfig+0x332>
 80049e0:	e00b      	b.n	80049fa <UART_SetConfig+0x33e>
 80049e2:	2300      	movs	r3, #0
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e00d      	b.n	8004a04 <UART_SetConfig+0x348>
 80049e8:	2302      	movs	r3, #2
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e00a      	b.n	8004a04 <UART_SetConfig+0x348>
 80049ee:	2304      	movs	r3, #4
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e007      	b.n	8004a04 <UART_SetConfig+0x348>
 80049f4:	2308      	movs	r3, #8
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e004      	b.n	8004a04 <UART_SetConfig+0x348>
 80049fa:	2310      	movs	r3, #16
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e001      	b.n	8004a04 <UART_SetConfig+0x348>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	d15b      	bne.n	8004ac6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a0e:	7ffb      	ldrb	r3, [r7, #31]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d828      	bhi.n	8004a66 <UART_SetConfig+0x3aa>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x360>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fe fd40 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8004a44:	61b8      	str	r0, [r7, #24]
        break;
 8004a46:	e013      	b.n	8004a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fe fd50 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e00f      	b.n	8004a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <UART_SetConfig+0x4c4>)
 8004a52:	61bb      	str	r3, [r7, #24]
        break;
 8004a54:	e00c      	b.n	8004a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fe fc23 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004a5a:	61b8      	str	r0, [r7, #24]
        break;
 8004a5c:	e008      	b.n	8004a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e004      	b.n	8004a70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d074      	beq.n	8004b60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	005a      	lsls	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d916      	bls.n	8004ac0 <UART_SetConfig+0x404>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d212      	bcs.n	8004ac0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f023 030f 	bic.w	r3, r3, #15
 8004aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	89fb      	ldrh	r3, [r7, #14]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	89fa      	ldrh	r2, [r7, #14]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	e04f      	b.n	8004b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77bb      	strb	r3, [r7, #30]
 8004ac4:	e04c      	b.n	8004b60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d828      	bhi.n	8004b1e <UART_SetConfig+0x462>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x418>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fce4 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e013      	b.n	8004b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fcf4 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004b04:	61b8      	str	r0, [r7, #24]
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <UART_SetConfig+0x4c4>)
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e00c      	b.n	8004b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fbc7 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004b12:	61b8      	str	r0, [r7, #24]
        break;
 8004b14:	e008      	b.n	8004b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e004      	b.n	8004b28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	77bb      	strb	r3, [r7, #30]
        break;
 8004b26:	bf00      	nop
    }

    if (pclk != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d018      	beq.n	8004b60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	085a      	lsrs	r2, r3, #1
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b0f      	cmp	r3, #15
 8004b46:	d909      	bls.n	8004b5c <UART_SetConfig+0x4a0>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4e:	d205      	bcs.n	8004b5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e001      	b.n	8004b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40007c00 	.word	0x40007c00
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400

08004b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d10a      	bne.n	8004c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd8:	f7fc fa2e 	bl	8001138 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d10e      	bne.n	8004d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f81b 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e011      	b.n	8004d2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b09c      	sub	sp, #112	; 0x70
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	e0a7      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	f000 80a3 	beq.w	8004e98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fc f9f1 	bl	8001138 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d13f      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e068      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d050      	beq.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d148      	bne.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e6      	bne.n	8004e10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	613b      	str	r3, [r7, #16]
   return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e62:	623a      	str	r2, [r7, #32]
 8004e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	69f9      	ldr	r1, [r7, #28]
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e010      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	f43f af48 	beq.w	8004d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3770      	adds	r7, #112	; 0x70
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	f107 001c 	add.w	r0, r7, #28
 8004ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d120      	bne.n	8004f1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <USB_CoreInit+0xac>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa96 	bl	8005444 <USB_CoreReset>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	e010      	b.n	8004f40 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa8a 	bl	8005444 <USB_CoreReset>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10b      	bne.n	8004f5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f043 0206 	orr.w	r2, r3, #6
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f6a:	b004      	add	sp, #16
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	ffbdffbf 	.word	0xffbdffbf

08004f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 0201 	bic.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d115      	bne.n	8004fe4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f7fc f8c3 	bl	8001150 <HAL_Delay>
      ms++;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa29 	bl	8005428 <USB_GetMode>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d01e      	beq.n	800501a <USB_SetCurrentMode+0x84>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b31      	cmp	r3, #49	; 0x31
 8004fe0:	d9f0      	bls.n	8004fc4 <USB_SetCurrentMode+0x2e>
 8004fe2:	e01a      	b.n	800501a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d115      	bne.n	8005016 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	f7fc f8aa 	bl	8001150 <HAL_Delay>
      ms++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa10 	bl	8005428 <USB_GetMode>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <USB_SetCurrentMode+0x84>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b31      	cmp	r3, #49	; 0x31
 8005012:	d9f0      	bls.n	8004ff6 <USB_SetCurrentMode+0x60>
 8005014:	e001      	b.n	800501a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e005      	b.n	8005026 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b32      	cmp	r3, #50	; 0x32
 800501e:	d101      	bne.n	8005024 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005030:	b084      	sub	sp, #16
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800503e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e009      	b.n	8005064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3340      	adds	r3, #64	; 0x40
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0e      	cmp	r3, #14
 8005068:	d9f2      	bls.n	8005050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800506a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11c      	bne.n	80050aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507e:	f043 0302 	orr.w	r3, r3, #2
 8005082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e005      	b.n	80050b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050bc:	461a      	mov	r2, r3
 80050be:	2300      	movs	r3, #0
 80050c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	4619      	mov	r1, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	461a      	mov	r2, r3
 80050d2:	680b      	ldr	r3, [r1, #0]
 80050d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10c      	bne.n	80050f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050e2:	2100      	movs	r1, #0
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f965 	bl	80053b4 <USB_SetDevSpeed>
 80050ea:	e008      	b.n	80050fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050ec:	2101      	movs	r1, #1
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f960 	bl	80053b4 <USB_SetDevSpeed>
 80050f4:	e003      	b.n	80050fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050f6:	2103      	movs	r1, #3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f95b 	bl	80053b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050fe:	2110      	movs	r1, #16
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8f3 	bl	80052ec <USB_FlushTxFifo>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f91f 	bl	8005354 <USB_FlushRxFifo>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e043      	b.n	80051d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005160:	d118      	bne.n	8005194 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	e013      	b.n	80051a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e008      	b.n	80051a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3301      	adds	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3b7      	bcc.n	800514a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e043      	b.n	8005268 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f6:	d118      	bne.n	800522a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e013      	b.n	800523c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e008      	b.n	800523c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	429a      	cmp	r2, r3
 800526e:	d3b7      	bcc.n	80051e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f043 0210 	orr.w	r2, r3, #16
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <USB_DevInit+0x2b4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <USB_DevInit+0x2b8>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052e0:	b004      	add	sp, #16
 80052e2:	4770      	bx	lr
 80052e4:	803c3800 	.word	0x803c3800
 80052e8:	40000004 	.word	0x40000004

080052ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <USB_FlushTxFifo+0x64>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e01b      	b.n	8005344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	daf2      	bge.n	80052fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	019b      	lsls	r3, r3, #6
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <USB_FlushTxFifo+0x64>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e006      	b.n	8005344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	d0f0      	beq.n	8005324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <USB_FlushRxFifo+0x5c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e018      	b.n	80053a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	daf2      	bge.n	8005360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2210      	movs	r2, #16
 8005382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <USB_FlushRxFifo+0x5c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e006      	b.n	80053a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d0f0      	beq.n	8005384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	00030d40 	.word	0x00030d40

080053b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005400:	f023 0303 	bic.w	r3, r3, #3
 8005404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0301 	and.w	r3, r3, #1
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <USB_CoreReset+0x64>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e01b      	b.n	800549a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	daf2      	bge.n	8005450 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <USB_CoreReset+0x64>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e006      	b.n	800549a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b01      	cmp	r3, #1
 8005496:	d0f0      	beq.n	800547a <USB_CoreReset+0x36>

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	00030d40 	.word	0x00030d40

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4d0d      	ldr	r5, [pc, #52]	; (80054f4 <__libc_init_array+0x38>)
 80054c0:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	2600      	movs	r6, #0
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	4d0b      	ldr	r5, [pc, #44]	; (80054fc <__libc_init_array+0x40>)
 80054ce:	4c0c      	ldr	r4, [pc, #48]	; (8005500 <__libc_init_array+0x44>)
 80054d0:	f000 f818 	bl	8005504 <_init>
 80054d4:	1b64      	subs	r4, r4, r5
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	2600      	movs	r6, #0
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08005560 	.word	0x08005560
 80054f8:	08005560 	.word	0x08005560
 80054fc:	08005560 	.word	0x08005560
 8005500:	08005564 	.word	0x08005564

08005504 <_init>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr

08005510 <_fini>:
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	bf00      	nop
 8005514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005516:	bc08      	pop	{r3}
 8005518:	469e      	mov	lr, r3
 800551a:	4770      	bx	lr
