
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  0800596c  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005a0c  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000894  2000019c  08005aac  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a30  08005aac  00020a30  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012dd2  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000283b  00000000  00000000  00032fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e38  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000af4  00000000  00000000  00036658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000275d1  00000000  00000000  0003714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001216c  00000000  00000000  0005e71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f3eee  00000000  00000000  00070889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004088  00000000  00000000  00164778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00168800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005884 	.word	0x08005884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08005884 	.word	0x08005884

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fd50 	bl	8001056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f845 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9c7 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 80005be:	f000 f9a7 	bl	8000910 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 f947 	bl	8000854 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c6:	f000 f975 	bl	80008b4 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 80005ca:	f000 f8f5 	bl	80007b8 <MX_ETH_Init>
  MX_ADC3_Init();
 80005ce:	f000 f8a1 	bl	8000714 <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char MSG[35] = {"\0"};
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	221f      	movs	r2, #31
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fccc 	bl	8004f7c <memset>

  uint64_t adc_get;

  while (1)
  {
	HAL_ADC_Start(&hadc3);
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0x8c>)
 80005e6:	f000 fdfb 	bl	80011e0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc3, -1) == HAL_OK) {
 80005ea:	f04f 31ff 	mov.w	r1, #4294967295
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x8c>)
 80005f0:	f000 fef8 	bl	80013e4 <HAL_ADC_PollForConversion>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d115      	bne.n	8000626 <main+0x7a>
		adc_get = HAL_ADC_GetValue(&hadc3);
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <main+0x8c>)
 80005fc:	f000 ff7d 	bl	80014fa <HAL_ADC_GetValue>
 8000600:	4603      	mov	r3, r0
 8000602:	2200      	movs	r2, #0
 8000604:	461c      	mov	r4, r3
 8000606:	4615      	mov	r5, r2
 8000608:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		sprintf(MSG, "ADC Read=%lu\r\n", adc_get);
 800060c:	1d38      	adds	r0, r7, #4
 800060e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <main+0x90>)
 8000614:	f004 fc92 	bl	8004f3c <siprintf>
		HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 0xFFFF);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	2223      	movs	r2, #35	; 0x23
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <main+0x94>)
 8000622:	f003 fd0f 	bl	8004044 <HAL_UART_Transmit>
	}
	HAL_ADC_Stop(&hadc3);
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x8c>)
 8000628:	f000 fea8 	bl	800137c <HAL_ADC_Stop>
	HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 fd6e 	bl	8001110 <HAL_Delay>
	HAL_ADC_Start(&hadc3);
 8000634:	e7d6      	b.n	80005e4 <main+0x38>
 8000636:	bf00      	nop
 8000638:	200001f0 	.word	0x200001f0
 800063c:	0800589c 	.word	0x0800589c
 8000640:	20000348 	.word	0x20000348

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fc92 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000668:	f002 fbd4 	bl	8002e14 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006b8:	2348      	movs	r3, #72	; 0x48
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c0:	2303      	movs	r3, #3
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fbb3 	bl	8002e34 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9e8 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fe41 	bl	800337c <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f9d2 	bl	8000aa8 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC3_Init+0x98>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x9c>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC3_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC3_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC3_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ADC3_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC3_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC3_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_ADC3_Init+0x98>)
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_ADC3_Init+0xa0>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC3_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ADC3_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ADC3_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC3_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_ADC3_Init+0x98>)
 8000774:	f000 fcf0 	bl	8001158 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f993 	bl	8000aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000782:	2307      	movs	r3, #7
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC3_Init+0x98>)
 8000794:	f000 febe 	bl	8001514 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 f983 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200001f0 	.word	0x200001f0
 80007b0:	40012200 	.word	0x40012200
 80007b4:	0f000001 	.word	0x0f000001

080007b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x84>)
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <MX_ETH_Init+0x88>)
 80007c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ETH_Init+0x84>)
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ETH_Init+0x84>)
 80007ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x84>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_ETH_Init+0x90>)
 80007f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ETH_Init+0x84>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_ETH_Init+0x94>)
 80007fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x84>)
 8000802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000806:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ETH_Init+0x84>)
 800080a:	f001 fccf 	bl	80021ac <HAL_ETH_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 f948 	bl	8000aa8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000818:	2238      	movs	r2, #56	; 0x38
 800081a:	2100      	movs	r1, #0
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ETH_Init+0x98>)
 800081e:	f004 fbad 	bl	8004f7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_ETH_Init+0x98>)
 8000824:	2221      	movs	r2, #33	; 0x21
 8000826:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_ETH_Init+0x98>)
 800082a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_ETH_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000298 	.word	0x20000298
 8000840:	40028000 	.word	0x40028000
 8000844:	200008d8 	.word	0x200008d8
 8000848:	200000fc 	.word	0x200000fc
 800084c:	2000005c 	.word	0x2000005c
 8000850:	200001b8 	.word	0x200001b8

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART3_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000898:	f003 fb86 	bl	8003fa8 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f901 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000348 	.word	0x20000348
 80008b0:	40004800 	.word	0x40004800

080008b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2206      	movs	r2, #6
 80008c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	f002 f943 	bl	8002b82 <HAL_PCD_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f8d1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200003d0 	.word	0x200003d0

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_DMA_Init+0x38>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <MX_DMA_Init+0x38>)
 800091c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_DMA_Init+0x38>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2038      	movs	r0, #56	; 0x38
 8000934:	f001 f919 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000938:	2038      	movs	r0, #56	; 0x38
 800093a:	f001 f932 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b4d      	ldr	r3, [pc, #308]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4c      	ldr	r2, [pc, #304]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a46      	ldr	r2, [pc, #280]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0320 	and.w	r3, r3, #32
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a3a      	ldr	r2, [pc, #232]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <MX_GPIO_Init+0x14c>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_GPIO_Init+0x14c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000a12:	f002 f89d 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0x154>)
 8000a1c:	f002 f898 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0x158>)
 8000a38:	f001 fede 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000a56:	f001 fecf 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x154>)
 8000a72:	f001 fec1 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_GPIO_Init+0x154>)
 8000a8a:	f001 feb5 	bl	80027f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d155      	bne.n	8000bca <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF9     ------> ADC3_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b64:	f001 fe48 	bl	80027f8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b6c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b74:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b88:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b90:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000bb0:	f001 f812 	bl	8001bd8 <HAL_DMA_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000bba:	f7ff ff75 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40012200 	.word	0x40012200
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40021400 	.word	0x40021400
 8000be0:	20000238 	.word	0x20000238
 8000be4:	40026410 	.word	0x40026410

08000be8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <HAL_ETH_MspInit+0x158>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	f040 8096 	bne.w	8000d38 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a4c      	ldr	r2, [pc, #304]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a46      	ldr	r2, [pc, #280]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a40      	ldr	r2, [pc, #256]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb4:	2332      	movs	r3, #50	; 0x32
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <HAL_ETH_MspInit+0x160>)
 8000cd0:	f001 fd92 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd4:	2386      	movs	r3, #134	; 0x86
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <HAL_ETH_MspInit+0x164>)
 8000cf0:	f001 fd82 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480f      	ldr	r0, [pc, #60]	; (8000d50 <HAL_ETH_MspInit+0x168>)
 8000d12:	f001 fd71 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <HAL_ETH_MspInit+0x16c>)
 8000d34:	f001 fd60 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	; 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40028000 	.word	0x40028000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40021800 	.word	0x40021800

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0aa      	sub	sp, #168	; 0xa8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2284      	movs	r2, #132	; 0x84
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 f8ff 	bl	8004f7c <memset>
  if(huart->Instance==USART3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_UART_MspInit+0xb4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d13c      	bne.n	8000e02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fd16 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000da2:	f7ff fe81 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0xb8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_UART_MspInit+0xbc>)
 8000dfe:	f001 fcfb 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	37a8      	adds	r7, #168	; 0xa8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004800 	.word	0x40004800
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ac      	sub	sp, #176	; 0xb0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	2284      	movs	r2, #132	; 0x84
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 f89f 	bl	8004f7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e46:	d159      	bne.n	8000efc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fcb5 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e64:	f7ff fe20 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e80:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4818      	ldr	r0, [pc, #96]	; (8000f08 <HAL_PCD_MspInit+0xf0>)
 8000ea8:	f001 fca6 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_PCD_MspInit+0xf0>)
 8000ec8:	f001 fc96 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed6:	6353      	str	r3, [r2, #52]	; 0x34
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_PCD_MspInit+0xec>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	37b0      	adds	r7, #176	; 0xb0
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8ba 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA2_Stream0_IRQHandler+0x10>)
 8000f66:	f000 fee5 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000238 	.word	0x20000238

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f003 fff2 	bl	8004f8c <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20050000 	.word	0x20050000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200008e0 	.word	0x200008e0
 8000fdc:	20000a30 	.word	0x20000a30

08000fe0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd7 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f003 ffb1 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fab9 	bl	80005ac <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001048:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 800104c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001050:	20000a30 	.word	0x20000a30

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>

08001056 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 fd7a 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f805 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff fd25 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd95 	bl	8001bbe <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 fd5d 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200008e4 	.word	0x200008e4

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200008e4 	.word	0x200008e4

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e031      	b.n	80011d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fcc0 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_ADC_Init+0x84>)
 800119c:	4013      	ands	r3, r2
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fb0a 	bl	80017c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e001      	b.n	80011c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	ffffeefd 	.word	0xffffeefd

080011e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Start+0x1a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e0ad      	b.n	8001356 <HAL_ADC_Start+0x176>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d018      	beq.n	8001242 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001220:	4b50      	ldr	r3, [pc, #320]	; (8001364 <HAL_ADC_Start+0x184>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_ADC_Start+0x188>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9a      	lsrs	r2, r3, #18
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001234:	e002      	b.n	800123c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d175      	bne.n	800133c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <HAL_ADC_Start+0x18c>)
 8001256:	4013      	ands	r3, r2
 8001258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001276:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800128a:	d106      	bne.n	800129a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f023 0206 	bic.w	r2, r3, #6
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_ADC_Start+0x190>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d143      	bne.n	8001354 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	e03a      	b.n	8001354 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a24      	ldr	r2, [pc, #144]	; (8001374 <HAL_ADC_Start+0x194>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d10e      	bne.n	8001306 <HAL_ADC_Start+0x126>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001304:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_ADC_Start+0x190>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b00      	cmp	r3, #0
 8001310:	d120      	bne.n	8001354 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <HAL_ADC_Start+0x198>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d11b      	bne.n	8001354 <HAL_ADC_Start+0x174>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d114      	bne.n	8001354 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	e00b      	b.n	8001354 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f043 0210 	orr.w	r2, r3, #16
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	431bde83 	.word	0x431bde83
 800136c:	fffff8fe 	.word	0xfffff8fe
 8001370:	40012300 	.word	0x40012300
 8001374:	40012000 	.word	0x40012000
 8001378:	40012200 	.word	0x40012200

0800137c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Stop+0x16>
 800138e:	2302      	movs	r3, #2
 8001390:	e01f      	b.n	80013d2 <HAL_ADC_Stop+0x56>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_ADC_Stop+0x64>)
 80013be:	4013      	ands	r3, r2
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	ffffeefe 	.word	0xffffeefe

080013e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d113      	bne.n	800142a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001410:	d10b      	bne.n	800142a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e063      	b.n	80014f2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800142a:	f7ff fe65 	bl	80010f8 <HAL_GetTick>
 800142e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001430:	e021      	b.n	8001476 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d01d      	beq.n	8001476 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_ADC_PollForConversion+0x6c>
 8001440:	f7ff fe5a 	bl	80010f8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d212      	bcs.n	8001476 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d00b      	beq.n	8001476 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f043 0204 	orr.w	r2, r3, #4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e03d      	b.n	80014f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b02      	cmp	r3, #2
 8001482:	d1d6      	bne.n	8001432 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0212 	mvn.w	r2, #18
 800148c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d123      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11f      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1c>
 800152c:	2302      	movs	r3, #2
 800152e:	e136      	b.n	800179e <HAL_ADC_ConfigChannel+0x28a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d93a      	bls.n	80015b6 <HAL_ADC_ConfigChannel+0xa2>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001548:	d035      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68d9      	ldr	r1, [r3, #12]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b1e      	subs	r3, #30
 8001560:	2207      	movs	r2, #7
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8d      	ldr	r2, [pc, #564]	; (80017ac <HAL_ADC_ConfigChannel+0x298>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10a      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	061a      	lsls	r2, r3, #24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158e:	e035      	b.n	80015fc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d9      	ldr	r1, [r3, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4403      	add	r3, r0
 80015a8:	3b1e      	subs	r3, #30
 80015aa:	409a      	lsls	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b4:	e022      	b.n	80015fc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6919      	ldr	r1, [r3, #16]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	2207      	movs	r2, #7
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4403      	add	r3, r0
 80015f2:	409a      	lsls	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b06      	cmp	r3, #6
 8001602:	d824      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b05      	subs	r3, #5
 8001616:	221f      	movs	r2, #31
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b05      	subs	r3, #5
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
 800164c:	e04c      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d824      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b23      	subs	r3, #35	; 0x23
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	; 0x23
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
 800169e:	e023      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b41      	subs	r3, #65	; 0x41
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b41      	subs	r3, #65	; 0x41
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_ADC_ConfigChannel+0x29c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1f4>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016fa:	d105      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001702:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001706:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <HAL_ADC_ConfigChannel+0x29c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10f      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x21e>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d10b      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001720:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001724:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001730:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_ADC_ConfigChannel+0x29c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d12b      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x280>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_ADC_ConfigChannel+0x298>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_ADC_ConfigChannel+0x23a>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b11      	cmp	r3, #17
 800174c:	d122      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001754:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001758:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001764:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_ADC_ConfigChannel+0x298>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a11      	ldr	r2, [pc, #68]	; (80017bc <HAL_ADC_ConfigChannel+0x2a8>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9a      	lsrs	r2, r3, #18
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001786:	e002      	b.n	800178e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f9      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	10000012 	.word	0x10000012
 80017b0:	40012000 	.word	0x40012000
 80017b4:	40012300 	.word	0x40012300
 80017b8:	20000000 	.word	0x20000000
 80017bc:	431bde83 	.word	0x431bde83

080017c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017c8:	4b78      	ldr	r3, [pc, #480]	; (80019ac <ADC_Init+0x1ec>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a77      	ldr	r2, [pc, #476]	; (80019ac <ADC_Init+0x1ec>)
 80017ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017d4:	4b75      	ldr	r3, [pc, #468]	; (80019ac <ADC_Init+0x1ec>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4973      	ldr	r1, [pc, #460]	; (80019ac <ADC_Init+0x1ec>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	021a      	lsls	r2, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <ADC_Init+0x1f0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d022      	beq.n	800189a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6899      	ldr	r1, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e00f      	b.n	80018ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0202 	bic.w	r2, r2, #2
 80018c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6899      	ldr	r1, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	005a      	lsls	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001906:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	3b01      	subs	r3, #1
 8001914:	035a      	lsls	r2, r3, #13
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	e007      	b.n	8001930 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	3b01      	subs	r3, #1
 800194c:	051a      	lsls	r2, r3, #20
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001972:	025a      	lsls	r2, r3, #9
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	029a      	lsls	r2, r3, #10
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40012300 	.word	0x40012300
 80019b0:	0f000001 	.word	0x0f000001

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	05fa0000 	.word	0x05fa0000

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fa88 	bl	80010f8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e099      	b.n	8001d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	e00f      	b.n	8001c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c16:	f7ff fa6f 	bl	80010f8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d908      	bls.n	8001c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e078      	b.n	8001d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e8      	bne.n	8001c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_DMA_Init+0x158>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f023 0307 	bic.w	r3, r3, #7
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d117      	bne.n	8001cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00e      	beq.n	8001cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f9e9 	bl	80020b4 <DMA_CheckFifoParam>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e016      	b.n	8001d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f9a0 	bl	8002048 <DMA_CalcBaseAndBitshift>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	223f      	movs	r2, #63	; 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	f010803f 	.word	0xf010803f

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d40:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <HAL_DMA_IRQHandler+0x248>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a8e      	ldr	r2, [pc, #568]	; (8001f80 <HAL_DMA_IRQHandler+0x24c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808f 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8087 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	223f      	movs	r2, #63	; 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07e      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e079      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d031      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02c      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e01e      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0210 	bic.w	r2, r2, #16
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d032      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d307      	bcc.n	800201c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <HAL_DMA_IRQHandler+0x2cc>
 800201a:	e000      	b.n	800201e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800201c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	e000      	b.n	8002042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002040:	bf00      	nop
    }
  }
}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3b10      	subs	r3, #16
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <DMA_CalcBaseAndBitshift+0x60>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <DMA_CalcBaseAndBitshift+0x64>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d908      	bls.n	8002088 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <DMA_CalcBaseAndBitshift+0x68>)
 800207e:	4013      	ands	r3, r2
 8002080:	1d1a      	adds	r2, r3, #4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58
 8002086:	e006      	b.n	8002096 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	aaaaaaab 	.word	0xaaaaaaab
 80020ac:	080058c4 	.word	0x080058c4
 80020b0:	fffffc00 	.word	0xfffffc00

080020b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d856      	bhi.n	8002182 <DMA_CheckFifoParam+0xce>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x28>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002183 	.word	0x08002183
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d046      	beq.n	8002186 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e043      	b.n	8002186 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002106:	d140      	bne.n	800218a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e03d      	b.n	800218a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	d121      	bne.n	800215c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d837      	bhi.n	800218e <DMA_CheckFifoParam+0xda>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <DMA_CheckFifoParam+0x70>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213b 	.word	0x0800213b
 800212c:	08002135 	.word	0x08002135
 8002130:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e030      	b.n	800219c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d025      	beq.n	8002192 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214a:	e022      	b.n	8002192 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002154:	d11f      	bne.n	8002196 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800215a:	e01c      	b.n	8002196 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d903      	bls.n	800216a <DMA_CheckFifoParam+0xb6>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d003      	beq.n	8002170 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002168:	e018      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      break;
 800216e:	e015      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e00b      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002182:	bf00      	nop
 8002184:	e00a      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e008      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e006      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e004      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e002      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;   
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
    }
  } 
  
  return status; 
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06a      	b.n	8002294 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2223      	movs	r2, #35	; 0x23
 80021cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe fd09 	bl	8000be8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_ETH_Init+0xf0>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_ETH_Init+0xf0>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_ETH_Init+0xf0>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_ETH_Init+0xf4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_ETH_Init+0xf4>)
 80021f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_ETH_Init+0xf4>)
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4927      	ldr	r1, [pc, #156]	; (80022a0 <HAL_ETH_Init+0xf4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_ETH_Init+0xf4>)
 800220a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002224:	f7fe ff68 	bl	80010f8 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800222a:	e011      	b.n	8002250 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800222c:	f7fe ff64 	bl	80010f8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800223a:	d909      	bls.n	8002250 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2204      	movs	r2, #4
 8002240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	22e0      	movs	r2, #224	; 0xe0
 8002248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e021      	b.n	8002294 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e4      	bne.n	800222c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f958 	bl	8002518 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9ff 	bl	800266c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa55 	bl	800271e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9bd 	bl	80025fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2210      	movs	r2, #16
 800228e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800

080022a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <ETH_SetMACConfig+0x15c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	7c1b      	ldrb	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <ETH_SetMACConfig+0x28>
 80022c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022ca:	e000      	b.n	80022ce <ETH_SetMACConfig+0x2a>
 80022cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7c5b      	ldrb	r3, [r3, #17]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <ETH_SetMACConfig+0x38>
 80022d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022da:	e000      	b.n	80022de <ETH_SetMACConfig+0x3a>
 80022dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7fdb      	ldrb	r3, [r3, #31]
 80022ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	7f92      	ldrb	r2, [r2, #30]
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	d102      	bne.n	8002302 <ETH_SetMACConfig+0x5e>
 80022fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002300:	e000      	b.n	8002304 <ETH_SetMACConfig+0x60>
 8002302:	2200      	movs	r2, #0
                        macconf->Speed |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7f1b      	ldrb	r3, [r3, #28]
 800230a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800230c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002312:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800231a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002322:	2a00      	cmp	r2, #0
 8002324:	d102      	bne.n	800232c <ETH_SetMACConfig+0x88>
 8002326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232a:	e000      	b.n	800232e <ETH_SetMACConfig+0x8a>
 800232c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800232e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	7bdb      	ldrb	r3, [r3, #15]
 8002334:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002336:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800233c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002344:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002346:	4313      	orrs	r3, r2
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fed6 	bl	8001110 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	f64f 7341 	movw	r3, #65345	; 0xff41
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800238a:	2a00      	cmp	r2, #0
 800238c:	d101      	bne.n	8002392 <ETH_SetMACConfig+0xee>
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	e000      	b.n	8002394 <ETH_SetMACConfig+0xf0>
 8002392:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002394:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800239a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023a2:	2a01      	cmp	r2, #1
 80023a4:	d101      	bne.n	80023aa <ETH_SetMACConfig+0x106>
 80023a6:	2208      	movs	r2, #8
 80023a8:	e000      	b.n	80023ac <ETH_SetMACConfig+0x108>
 80023aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	d101      	bne.n	80023bc <ETH_SetMACConfig+0x118>
 80023b8:	2204      	movs	r2, #4
 80023ba:	e000      	b.n	80023be <ETH_SetMACConfig+0x11a>
 80023bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023c6:	2a01      	cmp	r2, #1
 80023c8:	d101      	bne.n	80023ce <ETH_SetMACConfig+0x12a>
 80023ca:	2202      	movs	r2, #2
 80023cc:	e000      	b.n	80023d0 <ETH_SetMACConfig+0x12c>
 80023ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe fe91 	bl	8001110 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	ff20810f 	.word	0xff20810f

08002404 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <ETH_SetDMAConfig+0x110>)
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <ETH_SetDMAConfig+0x2c>
 800242a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800242e:	e000      	b.n	8002432 <ETH_SetDMAConfig+0x2e>
 8002430:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7b5b      	ldrb	r3, [r3, #13]
 8002436:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002438:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	7f52      	ldrb	r2, [r2, #29]
 800243e:	2a00      	cmp	r2, #0
 8002440:	d102      	bne.n	8002448 <ETH_SetDMAConfig+0x44>
 8002442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002446:	e000      	b.n	800244a <ETH_SetDMAConfig+0x46>
 8002448:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800244a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	7b9b      	ldrb	r3, [r3, #14]
 8002450:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002452:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002458:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7f1b      	ldrb	r3, [r3, #28]
 800245e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002460:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	7f9b      	ldrb	r3, [r3, #30]
 8002466:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002468:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800246e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002476:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002478:	4313      	orrs	r3, r2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	461a      	mov	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800249a:	2001      	movs	r0, #1
 800249c:	f7fe fe38 	bl	8001110 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	461a      	mov	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fe fe09 	bl	8001110 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f8de3f23 	.word	0xf8de3f23

08002518 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0a6      	sub	sp, #152	; 0x98
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002536:	2301      	movs	r3, #1
 8002538:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002554:	2300      	movs	r3, #0
 8002556:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800255e:	2300      	movs	r3, #0
 8002560:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800257a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002584:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800258c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fe86 	bl	80022a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002598:	2301      	movs	r3, #1
 800259a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800259c:	2301      	movs	r3, #1
 800259e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff08 	bl	8002404 <ETH_SetDMAConfig>
}
 80025f4:	bf00      	nop
 80025f6:	3798      	adds	r7, #152	; 0x98
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3305      	adds	r3, #5
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	3204      	adds	r2, #4
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <ETH_MACAddressConfig+0x68>)
 800261e:	4413      	add	r3, r2
 8002620:	461a      	mov	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3303      	adds	r3, #3
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	061a      	lsls	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3302      	adds	r3, #2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3301      	adds	r3, #1
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4313      	orrs	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <ETH_MACAddressConfig+0x6c>)
 800264e:	4413      	add	r3, r2
 8002650:	461a      	mov	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	6013      	str	r3, [r2, #0]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40028040 	.word	0x40028040
 8002668:	40028044 	.word	0x40028044

0800266c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e03e      	b.n	80026f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	3206      	adds	r2, #6
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d80c      	bhi.n	80026dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68d9      	ldr	r1, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	e004      	b.n	80026e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d9bd      	bls.n	800267a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	611a      	str	r2, [r3, #16]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e046      	b.n	80027ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002768:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002770:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	3212      	adds	r2, #18
 8002786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d80c      	bhi.n	80027aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6919      	ldr	r1, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	e004      	b.n	80027b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d9b5      	bls.n	800272c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e175      	b.n	8002b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8164 	bne.w	8002afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d005      	beq.n	800284e <HAL_GPIO_Init+0x56>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d130      	bne.n	80028b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80be 	beq.w	8002afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_GPIO_Init+0x324>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800299a:	4a61      	ldr	r2, [pc, #388]	; (8002b20 <HAL_GPIO_Init+0x328>)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_GPIO_Init+0x32c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d037      	beq.n	8002a36 <HAL_GPIO_Init+0x23e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_GPIO_Init+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <HAL_GPIO_Init+0x23a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x334>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02b      	beq.n	8002a2e <HAL_GPIO_Init+0x236>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_GPIO_Init+0x338>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d025      	beq.n	8002a2a <HAL_GPIO_Init+0x232>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_GPIO_Init+0x33c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01f      	beq.n	8002a26 <HAL_GPIO_Init+0x22e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a53      	ldr	r2, [pc, #332]	; (8002b38 <HAL_GPIO_Init+0x340>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x22a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x344>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x348>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x222>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x34c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x21e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x350>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x21a>
 8002a0e:	2309      	movs	r3, #9
 8002a10:	e012      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a12:	230a      	movs	r3, #10
 8002a14:	e010      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a16:	2308      	movs	r3, #8
 8002a18:	e00e      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00c      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a1e:	2306      	movs	r3, #6
 8002a20:	e00a      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a22:	2305      	movs	r3, #5
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x240>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a48:	4935      	ldr	r1, [pc, #212]	; (8002b20 <HAL_GPIO_Init+0x328>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x354>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f ae86 	bls.w	8002818 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40021400 	.word	0x40021400
 8002b3c:	40021800 	.word	0x40021800
 8002b40:	40021c00 	.word	0x40021c00
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40022400 	.word	0x40022400
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b84:	b08f      	sub	sp, #60	; 0x3c
 8002b86:	af0a      	add	r7, sp, #40	; 0x28
 8002b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e116      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f932 	bl	8000e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 ff16 	bl	8004a04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	687e      	ldr	r6, [r7, #4]
 8002be0:	466d      	mov	r5, sp
 8002be2:	f106 0410 	add.w	r4, r6, #16
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf6:	1d33      	adds	r3, r6, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f001 feaa 	bl	8004954 <USB_CoreInit>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0d7      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 ff04 	bl	8004a26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e04a      	b.n	8002cba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333d      	adds	r3, #61	; 0x3d
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	b298      	uxth	r0, r3
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3344      	adds	r3, #68	; 0x44
 8002c60:	4602      	mov	r2, r0
 8002c62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3340      	adds	r3, #64	; 0x40
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	334c      	adds	r3, #76	; 0x4c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3354      	adds	r3, #84	; 0x54
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d3af      	bcc.n	8002c24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e044      	b.n	8002d54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	3301      	adds	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3b5      	bcc.n	8002cca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	687e      	ldr	r6, [r7, #4]
 8002d66:	466d      	mov	r5, sp
 8002d68:	f106 0410 	add.w	r4, r6, #16
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7c:	1d33      	adds	r3, r6, #4
 8002d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f001 fe9d 	bl	8004ac0 <USB_DevInit>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e014      	b.n	8002dc2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d102      	bne.n	8002db6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f80b 	bl	8002dcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 f85b 	bl	8004e76 <USB_DevDisconnect>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_PCDEx_ActivateLPM+0x44>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	10000003 	.word	0x10000003

08002e14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40007000 	.word	0x40007000

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e291      	b.n	800336e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e64:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d112      	bne.n	8002e96 <HAL_RCC_OscConfig+0x62>
 8002e70:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06c      	beq.n	8002f64 <HAL_RCC_OscConfig+0x130>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d168      	bne.n	8002f64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e26b      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x7a>
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e02e      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x9c>
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7b      	ldr	r2, [pc, #492]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6b      	ldr	r2, [pc, #428]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f8f0 	bl	80010f8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f8ec 	bl	80010f8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e21f      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f8dc 	bl	80010f8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe f8d8 	bl	80010f8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e20b      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x110>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d069      	beq.n	8003046 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f72:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x190>
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x17a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1df      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	493d      	ldr	r1, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e040      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f88e 	bl	80010f8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe f88a 	bl	80010f8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1bd      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4929      	ldr	r1, [pc, #164]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
 8003012:	e018      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe f86a 	bl	80010f8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe f866 	bl	80010f8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e199      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d038      	beq.n	80030c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe f847 	bl	80010f8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe f843 	bl	80010f8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e176      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x23a>
 800308c:	e01a      	b.n	80030c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe f82d 	bl	80010f8 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fe f829 	bl	80010f8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d903      	bls.n	80030b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e15c      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
 80030b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b91      	ldr	r3, [pc, #580]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a4 	beq.w	800321a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d2:	4b8b      	ldr	r3, [pc, #556]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a87      	ldr	r2, [pc, #540]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b85      	ldr	r3, [pc, #532]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fa:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7fd fff1 	bl	80010f8 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd ffed 	bl	80010f8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b64      	cmp	r3, #100	; 0x64
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e120      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312c:	4b75      	ldr	r3, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x31a>
 8003140:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e02d      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x33c>
 8003156:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a69      	ldr	r2, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a66      	ldr	r2, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e01c      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x35e>
 8003178:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a60      	ldr	r2, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a57      	ldr	r2, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fd ffa1 	bl	80010f8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd ff9d 	bl	80010f8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ce      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ee      	beq.n	80031ba <HAL_RCC_OscConfig+0x386>
 80031dc:	e014      	b.n	8003208 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7fd ff8b 	bl	80010f8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fd ff87 	bl	80010f8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d105      	bne.n	800321a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a3b      	ldr	r2, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a4 	beq.w	800336c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d06b      	beq.n	8003308 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d149      	bne.n	80032cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800323e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd ff58 	bl	80010f8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd ff54 	bl	80010f8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e087      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	4313      	orrs	r3, r2
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003296:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd ff28 	bl	80010f8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fd ff24 	bl	80010f8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e057      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x478>
 80032ca:	e04f      	b.n	800336c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff0e 	bl	80010f8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd ff0a 	bl	80010f8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03d      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4ac>
 80032fe:	e035      	b.n	800336c <HAL_RCC_OscConfig+0x538>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x544>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d028      	beq.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d121      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d11a      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d111      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d0      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	4965      	ldr	r1, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d040      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e073      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4936      	ldr	r1, [pc, #216]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003470:	f7fd fe42 	bl	80010f8 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fd fe3e 	bl	80010f8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e053      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d210      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	4922      	ldr	r1, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490a      	ldr	r1, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1cc>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1d0>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1d4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fd9e 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	080058ac 	.word	0x080058ac
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b094      	sub	sp, #80	; 0x50
 800355a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	647b      	str	r3, [r7, #68]	; 0x44
 8003560:	2300      	movs	r3, #0
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003564:	2300      	movs	r3, #0
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356c:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d00d      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x40>
 8003578:	2b08      	cmp	r3, #8
 800357a:	f200 80e1 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 8003582:	2b04      	cmp	r3, #4
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x3a>
 8003586:	e0db      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_GetSysClockFreq+0x204>)
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358c:	e0db      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_GetSysClockFreq+0x208>)
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003592:	e0d8      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d063      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2200      	movs	r2, #0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 80035be:	2300      	movs	r3, #0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
 80035c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	f04f 0000 	mov.w	r0, #0
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	0159      	lsls	r1, r3, #5
 80035d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d8:	0150      	lsls	r0, r2, #5
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4621      	mov	r1, r4
 80035e0:	1a51      	subs	r1, r2, r1
 80035e2:	6139      	str	r1, [r7, #16]
 80035e4:	4629      	mov	r1, r5
 80035e6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f8:	4659      	mov	r1, fp
 80035fa:	018b      	lsls	r3, r1, #6
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003602:	4651      	mov	r1, sl
 8003604:	018a      	lsls	r2, r1, #6
 8003606:	4651      	mov	r1, sl
 8003608:	ebb2 0801 	subs.w	r8, r2, r1
 800360c:	4659      	mov	r1, fp
 800360e:	eb63 0901 	sbc.w	r9, r3, r1
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003626:	4690      	mov	r8, r2
 8003628:	4699      	mov	r9, r3
 800362a:	4623      	mov	r3, r4
 800362c:	eb18 0303 	adds.w	r3, r8, r3
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	462b      	mov	r3, r5
 8003634:	eb49 0303 	adc.w	r3, r9, r3
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003646:	4629      	mov	r1, r5
 8003648:	024b      	lsls	r3, r1, #9
 800364a:	4621      	mov	r1, r4
 800364c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003650:	4621      	mov	r1, r4
 8003652:	024a      	lsls	r2, r1, #9
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	2200      	movs	r2, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
 800365e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003664:	f7fc fe24 	bl	80002b0 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003670:	e058      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	2200      	movs	r2, #0
 800367a:	4618      	mov	r0, r3
 800367c:	4611      	mov	r1, r2
 800367e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	0159      	lsls	r1, r3, #5
 800369a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369e:	0150      	lsls	r0, r2, #5
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4641      	mov	r1, r8
 80036a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036aa:	4649      	mov	r1, r9
 80036ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c4:	ebb2 040a 	subs.w	r4, r2, sl
 80036c8:	eb63 050b 	sbc.w	r5, r3, fp
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	464b      	mov	r3, r9
 80036e8:	eb45 0303 	adc.w	r3, r5, r3
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003704:	4621      	mov	r1, r4
 8003706:	028a      	lsls	r2, r1, #10
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2200      	movs	r2, #0
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	61fa      	str	r2, [r7, #28]
 8003714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003718:	f7fc fdca 	bl	80002b0 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_GetSysClockFreq+0x204>)
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003748:	4618      	mov	r0, r3
 800374a:	3750      	adds	r7, #80	; 0x50
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	007a1200 	.word	0x007a1200

08003760 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_GetHCLKFreq+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000000 	.word	0x20000000

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff0 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0a9b      	lsrs	r3, r3, #10
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	080058bc 	.word	0x080058bc

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a4:	f7ff ffdc 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0b5b      	lsrs	r3, r3, #13
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	080058bc 	.word	0x080058bc

080037c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d012      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037f0:	4b69      	ldr	r3, [pc, #420]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a68      	ldr	r2, [pc, #416]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	4964      	ldr	r1, [pc, #400]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003812:	2301      	movs	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d017      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003822:	4b5d      	ldr	r3, [pc, #372]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	4959      	ldr	r1, [pc, #356]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800384e:	2301      	movs	r3, #1
 8003850:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800385e:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	494a      	ldr	r1, [pc, #296]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 808b 	beq.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a39      	ldr	r2, [pc, #228]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6413      	str	r3, [r2, #64]	; 0x40
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fd fc12 	bl	80010f8 <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d8:	f7fd fc0e 	bl	80010f8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e357      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d035      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d02e      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003934:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d114      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fbd6 	bl	80010f8 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fd fbd2 	bl	80010f8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e319      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ee      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397e:	d111      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800398e:	400b      	ands	r3, r1
 8003990:	4901      	ldr	r1, [pc, #4]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
 8003996:	e00b      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000
 80039a0:	0ffffcff 	.word	0x0ffffcff
 80039a4:	4baa      	ldr	r3, [pc, #680]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4aa9      	ldr	r2, [pc, #676]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039ae:	6093      	str	r3, [r2, #8]
 80039b0:	4ba7      	ldr	r3, [pc, #668]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	49a4      	ldr	r1, [pc, #656]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ce:	4ba0      	ldr	r3, [pc, #640]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	4a9e      	ldr	r2, [pc, #632]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039de:	4b9c      	ldr	r3, [pc, #624]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	4999      	ldr	r1, [pc, #612]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fc:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0a:	4991      	ldr	r1, [pc, #580]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1e:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a2c:	4988      	ldr	r1, [pc, #544]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a40:	4b83      	ldr	r3, [pc, #524]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	4980      	ldr	r1, [pc, #512]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a62:	4b7b      	ldr	r3, [pc, #492]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4977      	ldr	r1, [pc, #476]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a84:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	496f      	ldr	r1, [pc, #444]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f023 020c 	bic.w	r2, r3, #12
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	4966      	ldr	r1, [pc, #408]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	495e      	ldr	r1, [pc, #376]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aea:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	4955      	ldr	r1, [pc, #340]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	494d      	ldr	r1, [pc, #308]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4944      	ldr	r1, [pc, #272]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b50:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	493c      	ldr	r1, [pc, #240]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	4933      	ldr	r1, [pc, #204]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b94:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba2:	492b      	ldr	r1, [pc, #172]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d011      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc4:	4922      	ldr	r1, [pc, #136]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	4912      	ldr	r1, [pc, #72]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c28:	4909      	ldr	r1, [pc, #36]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d006      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80d9 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a01      	ldr	r2, [pc, #4]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fd fa4f 	bl	80010f8 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c5e:	f7fd fa4b 	bl	80010f8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b64      	cmp	r3, #100	; 0x64
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e194      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c70:	4b6c      	ldr	r3, [pc, #432]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d021      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11d      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c90:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c9e:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca4:	0e1b      	lsrs	r3, r3, #24
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	019a      	lsls	r2, r3, #6
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	071b      	lsls	r3, r3, #28
 8003cc4:	4957      	ldr	r1, [pc, #348]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02e      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d129      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0c:	0f1b      	lsrs	r3, r3, #28
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	019a      	lsls	r2, r3, #6
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	431a      	orrs	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	071b      	lsls	r3, r3, #28
 8003d2c:	493d      	ldr	r1, [pc, #244]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d34:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3a:	f023 021f 	bic.w	r2, r3, #31
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4937      	ldr	r1, [pc, #220]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01d      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d58:	4b32      	ldr	r3, [pc, #200]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	0e1b      	lsrs	r3, r3, #24
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6c:	0f1b      	lsrs	r3, r3, #28
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	019a      	lsls	r2, r3, #6
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	071b      	lsls	r3, r3, #28
 8003d8c:	4925      	ldr	r1, [pc, #148]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d011      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	019a      	lsls	r2, r3, #6
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	071b      	lsls	r3, r3, #28
 8003dbc:	4919      	ldr	r1, [pc, #100]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd0:	f7fd f992 	bl	80010f8 <HAL_GetTick>
 8003dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dd8:	f7fd f98e 	bl	80010f8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0d7      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	f040 80cd 	bne.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fd f975 	bl	80010f8 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e12:	f7fd f971 	bl	80010f8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d903      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0ba      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e28:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e34:	d0ed      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d02e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d12a      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e5e:	4b51      	ldr	r3, [pc, #324]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e6c:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	019a      	lsls	r2, r3, #6
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	061b      	lsls	r3, r3, #24
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	071b      	lsls	r3, r3, #28
 8003e92:	4944      	ldr	r1, [pc, #272]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e9a:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	493d      	ldr	r1, [pc, #244]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d022      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec8:	d11d      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eca:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d028      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	0e1b      	lsrs	r3, r3, #24
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	019a      	lsls	r2, r3, #6
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	071b      	lsls	r3, r3, #28
 8003f46:	4917      	ldr	r1, [pc, #92]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4911      	ldr	r1, [pc, #68]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd f8c2 	bl	80010f8 <HAL_GetTick>
 8003f74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f78:	f7fd f8be 	bl	80010f8 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e007      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f96:	d1ef      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e040      	b.n	800403c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc fec4 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8b0 	bl	800414c <UART_SetConfig>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e022      	b.n	800403c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fb08 	bl	8004614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fb8f 	bl	8004758 <UART_CheckIdleState>
 800403a:	4603      	mov	r3, r0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004058:	2b20      	cmp	r3, #32
 800405a:	d171      	bne.n	8004140 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x24>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06a      	b.n	8004142 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2221      	movs	r2, #33	; 0x21
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd f83d 	bl	80010f8 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d108      	bne.n	80040ac <HAL_UART_Transmit+0x68>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b4:	e02c      	b.n	8004110 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb80 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e038      	b.n	8004142 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3302      	adds	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e007      	b.n	80040fe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1cc      	bne.n	80040b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	2140      	movs	r1, #64	; 0x40
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fb4d 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e005      	b.n	8004142 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4ba6      	ldr	r3, [pc, #664]	; (8004410 <UART_SetConfig+0x2c4>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a94      	ldr	r2, [pc, #592]	; (8004414 <UART_SetConfig+0x2c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d120      	bne.n	800420a <UART_SetConfig+0xbe>
 80041c8:	4b93      	ldr	r3, [pc, #588]	; (8004418 <UART_SetConfig+0x2cc>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d816      	bhi.n	8004204 <UART_SetConfig+0xb8>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x90>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041f3 	.word	0x080041f3
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e150      	b.n	8004494 <UART_SetConfig+0x348>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e14d      	b.n	8004494 <UART_SetConfig+0x348>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e14a      	b.n	8004494 <UART_SetConfig+0x348>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e147      	b.n	8004494 <UART_SetConfig+0x348>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e144      	b.n	8004494 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a83      	ldr	r2, [pc, #524]	; (800441c <UART_SetConfig+0x2d0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d132      	bne.n	800427a <UART_SetConfig+0x12e>
 8004214:	4b80      	ldr	r3, [pc, #512]	; (8004418 <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d828      	bhi.n	8004274 <UART_SetConfig+0x128>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0xdc>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800425d 	.word	0x0800425d
 800422c:	08004275 	.word	0x08004275
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	08004269 	.word	0x08004269
 800423c:	08004275 	.word	0x08004275
 8004240:	08004275 	.word	0x08004275
 8004244:	08004275 	.word	0x08004275
 8004248:	08004263 	.word	0x08004263
 800424c:	08004275 	.word	0x08004275
 8004250:	08004275 	.word	0x08004275
 8004254:	08004275 	.word	0x08004275
 8004258:	0800426f 	.word	0x0800426f
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e118      	b.n	8004494 <UART_SetConfig+0x348>
 8004262:	2302      	movs	r3, #2
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e115      	b.n	8004494 <UART_SetConfig+0x348>
 8004268:	2304      	movs	r3, #4
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e112      	b.n	8004494 <UART_SetConfig+0x348>
 800426e:	2308      	movs	r3, #8
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e10f      	b.n	8004494 <UART_SetConfig+0x348>
 8004274:	2310      	movs	r3, #16
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e10c      	b.n	8004494 <UART_SetConfig+0x348>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a68      	ldr	r2, [pc, #416]	; (8004420 <UART_SetConfig+0x2d4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0x17a>
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800428e:	2b30      	cmp	r3, #48	; 0x30
 8004290:	d013      	beq.n	80042ba <UART_SetConfig+0x16e>
 8004292:	2b30      	cmp	r3, #48	; 0x30
 8004294:	d814      	bhi.n	80042c0 <UART_SetConfig+0x174>
 8004296:	2b20      	cmp	r3, #32
 8004298:	d009      	beq.n	80042ae <UART_SetConfig+0x162>
 800429a:	2b20      	cmp	r3, #32
 800429c:	d810      	bhi.n	80042c0 <UART_SetConfig+0x174>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <UART_SetConfig+0x15c>
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d006      	beq.n	80042b4 <UART_SetConfig+0x168>
 80042a6:	e00b      	b.n	80042c0 <UART_SetConfig+0x174>
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e0f2      	b.n	8004494 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e0ef      	b.n	8004494 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e0ec      	b.n	8004494 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e0e9      	b.n	8004494 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0e6      	b.n	8004494 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a56      	ldr	r2, [pc, #344]	; (8004424 <UART_SetConfig+0x2d8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d120      	bne.n	8004312 <UART_SetConfig+0x1c6>
 80042d0:	4b51      	ldr	r3, [pc, #324]	; (8004418 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042da:	2bc0      	cmp	r3, #192	; 0xc0
 80042dc:	d013      	beq.n	8004306 <UART_SetConfig+0x1ba>
 80042de:	2bc0      	cmp	r3, #192	; 0xc0
 80042e0:	d814      	bhi.n	800430c <UART_SetConfig+0x1c0>
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d009      	beq.n	80042fa <UART_SetConfig+0x1ae>
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d810      	bhi.n	800430c <UART_SetConfig+0x1c0>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <UART_SetConfig+0x1a8>
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d006      	beq.n	8004300 <UART_SetConfig+0x1b4>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x1c0>
 80042f4:	2300      	movs	r3, #0
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e0cc      	b.n	8004494 <UART_SetConfig+0x348>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e0c9      	b.n	8004494 <UART_SetConfig+0x348>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e0c6      	b.n	8004494 <UART_SetConfig+0x348>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e0c3      	b.n	8004494 <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e0c0      	b.n	8004494 <UART_SetConfig+0x348>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a44      	ldr	r2, [pc, #272]	; (8004428 <UART_SetConfig+0x2dc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d125      	bne.n	8004368 <UART_SetConfig+0x21c>
 800431c:	4b3e      	ldr	r3, [pc, #248]	; (8004418 <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432a:	d017      	beq.n	800435c <UART_SetConfig+0x210>
 800432c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004330:	d817      	bhi.n	8004362 <UART_SetConfig+0x216>
 8004332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004336:	d00b      	beq.n	8004350 <UART_SetConfig+0x204>
 8004338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433c:	d811      	bhi.n	8004362 <UART_SetConfig+0x216>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <UART_SetConfig+0x1fe>
 8004342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004346:	d006      	beq.n	8004356 <UART_SetConfig+0x20a>
 8004348:	e00b      	b.n	8004362 <UART_SetConfig+0x216>
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e0a1      	b.n	8004494 <UART_SetConfig+0x348>
 8004350:	2302      	movs	r3, #2
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e09e      	b.n	8004494 <UART_SetConfig+0x348>
 8004356:	2304      	movs	r3, #4
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e09b      	b.n	8004494 <UART_SetConfig+0x348>
 800435c:	2308      	movs	r3, #8
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e098      	b.n	8004494 <UART_SetConfig+0x348>
 8004362:	2310      	movs	r3, #16
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e095      	b.n	8004494 <UART_SetConfig+0x348>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2f      	ldr	r2, [pc, #188]	; (800442c <UART_SetConfig+0x2e0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d125      	bne.n	80043be <UART_SetConfig+0x272>
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800437c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004380:	d017      	beq.n	80043b2 <UART_SetConfig+0x266>
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004386:	d817      	bhi.n	80043b8 <UART_SetConfig+0x26c>
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438c:	d00b      	beq.n	80043a6 <UART_SetConfig+0x25a>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d811      	bhi.n	80043b8 <UART_SetConfig+0x26c>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x254>
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x260>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x26c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e076      	b.n	8004494 <UART_SetConfig+0x348>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e073      	b.n	8004494 <UART_SetConfig+0x348>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e070      	b.n	8004494 <UART_SetConfig+0x348>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e06d      	b.n	8004494 <UART_SetConfig+0x348>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e06a      	b.n	8004494 <UART_SetConfig+0x348>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <UART_SetConfig+0x2e4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d138      	bne.n	800443a <UART_SetConfig+0x2ee>
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <UART_SetConfig+0x2cc>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0x2bc>
 80043d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043dc:	d82a      	bhi.n	8004434 <UART_SetConfig+0x2e8>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x2b0>
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d824      	bhi.n	8004434 <UART_SetConfig+0x2e8>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <UART_SetConfig+0x2aa>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d006      	beq.n	8004402 <UART_SetConfig+0x2b6>
 80043f4:	e01e      	b.n	8004434 <UART_SetConfig+0x2e8>
 80043f6:	2300      	movs	r3, #0
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e04b      	b.n	8004494 <UART_SetConfig+0x348>
 80043fc:	2302      	movs	r3, #2
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e048      	b.n	8004494 <UART_SetConfig+0x348>
 8004402:	2304      	movs	r3, #4
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e045      	b.n	8004494 <UART_SetConfig+0x348>
 8004408:	2308      	movs	r3, #8
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e042      	b.n	8004494 <UART_SetConfig+0x348>
 800440e:	bf00      	nop
 8004410:	efff69f3 	.word	0xefff69f3
 8004414:	40011000 	.word	0x40011000
 8004418:	40023800 	.word	0x40023800
 800441c:	40004400 	.word	0x40004400
 8004420:	40004800 	.word	0x40004800
 8004424:	40004c00 	.word	0x40004c00
 8004428:	40005000 	.word	0x40005000
 800442c:	40011400 	.word	0x40011400
 8004430:	40007800 	.word	0x40007800
 8004434:	2310      	movs	r3, #16
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e02c      	b.n	8004494 <UART_SetConfig+0x348>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a72      	ldr	r2, [pc, #456]	; (8004608 <UART_SetConfig+0x4bc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <UART_SetConfig+0x344>
 8004444:	4b71      	ldr	r3, [pc, #452]	; (800460c <UART_SetConfig+0x4c0>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800444e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004452:	d017      	beq.n	8004484 <UART_SetConfig+0x338>
 8004454:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004458:	d817      	bhi.n	800448a <UART_SetConfig+0x33e>
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445e:	d00b      	beq.n	8004478 <UART_SetConfig+0x32c>
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	d811      	bhi.n	800448a <UART_SetConfig+0x33e>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <UART_SetConfig+0x326>
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446e:	d006      	beq.n	800447e <UART_SetConfig+0x332>
 8004470:	e00b      	b.n	800448a <UART_SetConfig+0x33e>
 8004472:	2300      	movs	r3, #0
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e00d      	b.n	8004494 <UART_SetConfig+0x348>
 8004478:	2302      	movs	r3, #2
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e00a      	b.n	8004494 <UART_SetConfig+0x348>
 800447e:	2304      	movs	r3, #4
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e007      	b.n	8004494 <UART_SetConfig+0x348>
 8004484:	2308      	movs	r3, #8
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e004      	b.n	8004494 <UART_SetConfig+0x348>
 800448a:	2310      	movs	r3, #16
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e001      	b.n	8004494 <UART_SetConfig+0x348>
 8004490:	2310      	movs	r3, #16
 8004492:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	d15b      	bne.n	8004556 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d828      	bhi.n	80044f6 <UART_SetConfig+0x3aa>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x360>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7ff f952 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f962 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <UART_SetConfig+0x4c4>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7ff f835 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d074      	beq.n	80045f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	005a      	lsls	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d916      	bls.n	8004550 <UART_SetConfig+0x404>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d212      	bcs.n	8004550 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f023 030f 	bic.w	r3, r3, #15
 8004532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	b29b      	uxth	r3, r3
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	b29a      	uxth	r2, r3
 8004540:	89fb      	ldrh	r3, [r7, #14]
 8004542:	4313      	orrs	r3, r2
 8004544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	89fa      	ldrh	r2, [r7, #14]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e04f      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77bb      	strb	r3, [r7, #30]
 8004554:	e04c      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d828      	bhi.n	80045ae <UART_SetConfig+0x462>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x418>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff f8f6 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 800458c:	61b8      	str	r0, [r7, #24]
        break;
 800458e:	e013      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7ff f906 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004594:	61b8      	str	r0, [r7, #24]
        break;
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <UART_SetConfig+0x4c4>)
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e00c      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe ffd9 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80045a2:	61b8      	str	r0, [r7, #24]
        break;
 80045a4:	e008      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e004      	b.n	80045b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77bb      	strb	r3, [r7, #30]
        break;
 80045b6:	bf00      	nop
    }

    if (pclk != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085a      	lsrs	r2, r3, #1
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d909      	bls.n	80045ec <UART_SetConfig+0x4a0>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045de:	d205      	bcs.n	80045ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e001      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40007c00 	.word	0x40007c00
 800460c:	40023800 	.word	0x40023800
 8004610:	00f42400 	.word	0x00f42400

08004614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004712:	d10a      	bne.n	800472a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af02      	add	r7, sp, #8
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004768:	f7fc fcc6 	bl	80010f8 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d10e      	bne.n	800479a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f81b 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e011      	b.n	80047be <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b09c      	sub	sp, #112	; 0x70
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	e0a7      	b.n	8004928 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	f000 80a3 	beq.w	8004928 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fc fc89 	bl	80010f8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d13f      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800480c:	667b      	str	r3, [r7, #100]	; 0x64
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004818:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800481c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	663b      	str	r3, [r7, #96]	; 0x60
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800484a:	64ba      	str	r2, [r7, #72]	; 0x48
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e5      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e068      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d050      	beq.n	8004928 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004894:	d148      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800489e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	613b      	str	r3, [r7, #16]
   return(result);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048f2:	623a      	str	r2, [r7, #32]
 80048f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	69f9      	ldr	r1, [r7, #28]
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e010      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	429a      	cmp	r2, r3
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	429a      	cmp	r2, r3
 8004944:	f43f af48 	beq.w	80047d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3770      	adds	r7, #112	; 0x70
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004954:	b084      	sub	sp, #16
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	f107 001c 	add.w	r0, r7, #28
 8004962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d120      	bne.n	80049ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <USB_CoreInit+0xac>)
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa96 	bl	8004ed4 <USB_CoreReset>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e010      	b.n	80049d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa8a 	bl	8004ed4 <USB_CoreReset>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10b      	bne.n	80049ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f043 0206 	orr.w	r2, r3, #6
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fa:	b004      	add	sp, #16
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	ffbdffbf 	.word	0xffbdffbf

08004a04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 0201 	bic.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d115      	bne.n	8004a74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7fc fb5b 	bl	8001110 <HAL_Delay>
      ms++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa29 	bl	8004eb8 <USB_GetMode>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d01e      	beq.n	8004aaa <USB_SetCurrentMode+0x84>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b31      	cmp	r3, #49	; 0x31
 8004a70:	d9f0      	bls.n	8004a54 <USB_SetCurrentMode+0x2e>
 8004a72:	e01a      	b.n	8004aaa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d115      	bne.n	8004aa6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fc fb42 	bl	8001110 <HAL_Delay>
      ms++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa10 	bl	8004eb8 <USB_GetMode>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <USB_SetCurrentMode+0x84>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b31      	cmp	r3, #49	; 0x31
 8004aa2:	d9f0      	bls.n	8004a86 <USB_SetCurrentMode+0x60>
 8004aa4:	e001      	b.n	8004aaa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e005      	b.n	8004ab6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b32      	cmp	r3, #50	; 0x32
 8004aae:	d101      	bne.n	8004ab4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e009      	b.n	8004af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3340      	adds	r3, #64	; 0x40
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3301      	adds	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0e      	cmp	r3, #14
 8004af8:	d9f2      	bls.n	8004ae0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11c      	bne.n	8004b3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e005      	b.n	8004b46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	461a      	mov	r2, r3
 8004b62:	680b      	ldr	r3, [r1, #0]
 8004b64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10c      	bne.n	8004b86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b72:	2100      	movs	r1, #0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f965 	bl	8004e44 <USB_SetDevSpeed>
 8004b7a:	e008      	b.n	8004b8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f960 	bl	8004e44 <USB_SetDevSpeed>
 8004b84:	e003      	b.n	8004b8e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b86:	2103      	movs	r1, #3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f95b 	bl	8004e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b8e:	2110      	movs	r1, #16
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8f3 	bl	8004d7c <USB_FlushTxFifo>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f91f 	bl	8004de4 <USB_FlushRxFifo>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e043      	b.n	8004c62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf0:	d118      	bne.n	8004c24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e013      	b.n	8004c36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e008      	b.n	8004c36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	461a      	mov	r2, r3
 8004c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3b7      	bcc.n	8004bda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e043      	b.n	8004cf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c86:	d118      	bne.n	8004cba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e013      	b.n	8004ccc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e008      	b.n	8004ccc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3b7      	bcc.n	8004c70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f043 0210 	orr.w	r2, r3, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <USB_DevInit+0x2b4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f043 0208 	orr.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <USB_DevInit+0x2b8>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d70:	b004      	add	sp, #16
 8004d72:	4770      	bx	lr
 8004d74:	803c3800 	.word	0x803c3800
 8004d78:	40000004 	.word	0x40000004

08004d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <USB_FlushTxFifo+0x64>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e01b      	b.n	8004dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	daf2      	bge.n	8004d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	019b      	lsls	r3, r3, #6
 8004dac:	f043 0220 	orr.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <USB_FlushTxFifo+0x64>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e006      	b.n	8004dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d0f0      	beq.n	8004db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	00030d40 	.word	0x00030d40

08004de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <USB_FlushRxFifo+0x5c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e018      	b.n	8004e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	daf2      	bge.n	8004df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2210      	movs	r2, #16
 8004e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <USB_FlushRxFifo+0x5c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e006      	b.n	8004e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d0f0      	beq.n	8004e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	00030d40 	.word	0x00030d40

08004e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e90:	f023 0303 	bic.w	r3, r3, #3
 8004e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea4:	f043 0302 	orr.w	r3, r3, #2
 8004ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <USB_CoreReset+0x64>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e01b      	b.n	8004f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	daf2      	bge.n	8004ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <USB_CoreReset+0x64>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e006      	b.n	8004f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d0f0      	beq.n	8004f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	00030d40 	.word	0x00030d40

08004f3c <siprintf>:
 8004f3c:	b40e      	push	{r1, r2, r3}
 8004f3e:	b500      	push	{lr}
 8004f40:	b09c      	sub	sp, #112	; 0x70
 8004f42:	ab1d      	add	r3, sp, #116	; 0x74
 8004f44:	9002      	str	r0, [sp, #8]
 8004f46:	9006      	str	r0, [sp, #24]
 8004f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f4c:	4809      	ldr	r0, [pc, #36]	; (8004f74 <siprintf+0x38>)
 8004f4e:	9107      	str	r1, [sp, #28]
 8004f50:	9104      	str	r1, [sp, #16]
 8004f52:	4909      	ldr	r1, [pc, #36]	; (8004f78 <siprintf+0x3c>)
 8004f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f58:	9105      	str	r1, [sp, #20]
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	a902      	add	r1, sp, #8
 8004f60:	f000 f992 	bl	8005288 <_svfiprintf_r>
 8004f64:	9b02      	ldr	r3, [sp, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	b01c      	add	sp, #112	; 0x70
 8004f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f70:	b003      	add	sp, #12
 8004f72:	4770      	bx	lr
 8004f74:	20000058 	.word	0x20000058
 8004f78:	ffff0208 	.word	0xffff0208

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <__errno>:
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <__errno+0x8>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000058 	.word	0x20000058

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	; (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	; (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	; (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	; (8004fdc <__libc_init_array+0x44>)
 8004fac:	f000 fc6a 	bl	8005884 <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08005908 	.word	0x08005908
 8004fd4:	08005908 	.word	0x08005908
 8004fd8:	08005908 	.word	0x08005908
 8004fdc:	0800590c 	.word	0x0800590c

08004fe0 <__retarget_lock_acquire_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__retarget_lock_release_recursive>:
 8004fe2:	4770      	bx	lr

08004fe4 <_free_r>:
 8004fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	d044      	beq.n	8005074 <_free_r+0x90>
 8004fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fee:	9001      	str	r0, [sp, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ff6:	bfb8      	it	lt
 8004ff8:	18e4      	addlt	r4, r4, r3
 8004ffa:	f000 f8df 	bl	80051bc <__malloc_lock>
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <_free_r+0x94>)
 8005000:	9801      	ldr	r0, [sp, #4]
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	b933      	cbnz	r3, 8005014 <_free_r+0x30>
 8005006:	6063      	str	r3, [r4, #4]
 8005008:	6014      	str	r4, [r2, #0]
 800500a:	b003      	add	sp, #12
 800500c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005010:	f000 b8da 	b.w	80051c8 <__malloc_unlock>
 8005014:	42a3      	cmp	r3, r4
 8005016:	d908      	bls.n	800502a <_free_r+0x46>
 8005018:	6825      	ldr	r5, [r4, #0]
 800501a:	1961      	adds	r1, r4, r5
 800501c:	428b      	cmp	r3, r1
 800501e:	bf01      	itttt	eq
 8005020:	6819      	ldreq	r1, [r3, #0]
 8005022:	685b      	ldreq	r3, [r3, #4]
 8005024:	1949      	addeq	r1, r1, r5
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	e7ed      	b.n	8005006 <_free_r+0x22>
 800502a:	461a      	mov	r2, r3
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b10b      	cbz	r3, 8005034 <_free_r+0x50>
 8005030:	42a3      	cmp	r3, r4
 8005032:	d9fa      	bls.n	800502a <_free_r+0x46>
 8005034:	6811      	ldr	r1, [r2, #0]
 8005036:	1855      	adds	r5, r2, r1
 8005038:	42a5      	cmp	r5, r4
 800503a:	d10b      	bne.n	8005054 <_free_r+0x70>
 800503c:	6824      	ldr	r4, [r4, #0]
 800503e:	4421      	add	r1, r4
 8005040:	1854      	adds	r4, r2, r1
 8005042:	42a3      	cmp	r3, r4
 8005044:	6011      	str	r1, [r2, #0]
 8005046:	d1e0      	bne.n	800500a <_free_r+0x26>
 8005048:	681c      	ldr	r4, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	6053      	str	r3, [r2, #4]
 800504e:	440c      	add	r4, r1
 8005050:	6014      	str	r4, [r2, #0]
 8005052:	e7da      	b.n	800500a <_free_r+0x26>
 8005054:	d902      	bls.n	800505c <_free_r+0x78>
 8005056:	230c      	movs	r3, #12
 8005058:	6003      	str	r3, [r0, #0]
 800505a:	e7d6      	b.n	800500a <_free_r+0x26>
 800505c:	6825      	ldr	r5, [r4, #0]
 800505e:	1961      	adds	r1, r4, r5
 8005060:	428b      	cmp	r3, r1
 8005062:	bf04      	itt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	6063      	str	r3, [r4, #4]
 800506a:	bf04      	itt	eq
 800506c:	1949      	addeq	r1, r1, r5
 800506e:	6021      	streq	r1, [r4, #0]
 8005070:	6054      	str	r4, [r2, #4]
 8005072:	e7ca      	b.n	800500a <_free_r+0x26>
 8005074:	b003      	add	sp, #12
 8005076:	bd30      	pop	{r4, r5, pc}
 8005078:	20000a28 	.word	0x20000a28

0800507c <sbrk_aligned>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4e0e      	ldr	r6, [pc, #56]	; (80050b8 <sbrk_aligned+0x3c>)
 8005080:	460c      	mov	r4, r1
 8005082:	6831      	ldr	r1, [r6, #0]
 8005084:	4605      	mov	r5, r0
 8005086:	b911      	cbnz	r1, 800508e <sbrk_aligned+0x12>
 8005088:	f000 fba6 	bl	80057d8 <_sbrk_r>
 800508c:	6030      	str	r0, [r6, #0]
 800508e:	4621      	mov	r1, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fba1 	bl	80057d8 <_sbrk_r>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d00a      	beq.n	80050b0 <sbrk_aligned+0x34>
 800509a:	1cc4      	adds	r4, r0, #3
 800509c:	f024 0403 	bic.w	r4, r4, #3
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d007      	beq.n	80050b4 <sbrk_aligned+0x38>
 80050a4:	1a21      	subs	r1, r4, r0
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 fb96 	bl	80057d8 <_sbrk_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d101      	bne.n	80050b4 <sbrk_aligned+0x38>
 80050b0:	f04f 34ff 	mov.w	r4, #4294967295
 80050b4:	4620      	mov	r0, r4
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	20000a2c 	.word	0x20000a2c

080050bc <_malloc_r>:
 80050bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	1ccd      	adds	r5, r1, #3
 80050c2:	f025 0503 	bic.w	r5, r5, #3
 80050c6:	3508      	adds	r5, #8
 80050c8:	2d0c      	cmp	r5, #12
 80050ca:	bf38      	it	cc
 80050cc:	250c      	movcc	r5, #12
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	4607      	mov	r7, r0
 80050d2:	db01      	blt.n	80050d8 <_malloc_r+0x1c>
 80050d4:	42a9      	cmp	r1, r5
 80050d6:	d905      	bls.n	80050e4 <_malloc_r+0x28>
 80050d8:	230c      	movs	r3, #12
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	2600      	movs	r6, #0
 80050de:	4630      	mov	r0, r6
 80050e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051b8 <_malloc_r+0xfc>
 80050e8:	f000 f868 	bl	80051bc <__malloc_lock>
 80050ec:	f8d8 3000 	ldr.w	r3, [r8]
 80050f0:	461c      	mov	r4, r3
 80050f2:	bb5c      	cbnz	r4, 800514c <_malloc_r+0x90>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4638      	mov	r0, r7
 80050f8:	f7ff ffc0 	bl	800507c <sbrk_aligned>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	4604      	mov	r4, r0
 8005100:	d155      	bne.n	80051ae <_malloc_r+0xf2>
 8005102:	f8d8 4000 	ldr.w	r4, [r8]
 8005106:	4626      	mov	r6, r4
 8005108:	2e00      	cmp	r6, #0
 800510a:	d145      	bne.n	8005198 <_malloc_r+0xdc>
 800510c:	2c00      	cmp	r4, #0
 800510e:	d048      	beq.n	80051a2 <_malloc_r+0xe6>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	4631      	mov	r1, r6
 8005114:	4638      	mov	r0, r7
 8005116:	eb04 0903 	add.w	r9, r4, r3
 800511a:	f000 fb5d 	bl	80057d8 <_sbrk_r>
 800511e:	4581      	cmp	r9, r0
 8005120:	d13f      	bne.n	80051a2 <_malloc_r+0xe6>
 8005122:	6821      	ldr	r1, [r4, #0]
 8005124:	1a6d      	subs	r5, r5, r1
 8005126:	4629      	mov	r1, r5
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ffa7 	bl	800507c <sbrk_aligned>
 800512e:	3001      	adds	r0, #1
 8005130:	d037      	beq.n	80051a2 <_malloc_r+0xe6>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	442b      	add	r3, r5
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d038      	beq.n	80051b2 <_malloc_r+0xf6>
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	42a2      	cmp	r2, r4
 8005144:	d12b      	bne.n	800519e <_malloc_r+0xe2>
 8005146:	2200      	movs	r2, #0
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	e00f      	b.n	800516c <_malloc_r+0xb0>
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	1b52      	subs	r2, r2, r5
 8005150:	d41f      	bmi.n	8005192 <_malloc_r+0xd6>
 8005152:	2a0b      	cmp	r2, #11
 8005154:	d917      	bls.n	8005186 <_malloc_r+0xca>
 8005156:	1961      	adds	r1, r4, r5
 8005158:	42a3      	cmp	r3, r4
 800515a:	6025      	str	r5, [r4, #0]
 800515c:	bf18      	it	ne
 800515e:	6059      	strne	r1, [r3, #4]
 8005160:	6863      	ldr	r3, [r4, #4]
 8005162:	bf08      	it	eq
 8005164:	f8c8 1000 	streq.w	r1, [r8]
 8005168:	5162      	str	r2, [r4, r5]
 800516a:	604b      	str	r3, [r1, #4]
 800516c:	4638      	mov	r0, r7
 800516e:	f104 060b 	add.w	r6, r4, #11
 8005172:	f000 f829 	bl	80051c8 <__malloc_unlock>
 8005176:	f026 0607 	bic.w	r6, r6, #7
 800517a:	1d23      	adds	r3, r4, #4
 800517c:	1af2      	subs	r2, r6, r3
 800517e:	d0ae      	beq.n	80050de <_malloc_r+0x22>
 8005180:	1b9b      	subs	r3, r3, r6
 8005182:	50a3      	str	r3, [r4, r2]
 8005184:	e7ab      	b.n	80050de <_malloc_r+0x22>
 8005186:	42a3      	cmp	r3, r4
 8005188:	6862      	ldr	r2, [r4, #4]
 800518a:	d1dd      	bne.n	8005148 <_malloc_r+0x8c>
 800518c:	f8c8 2000 	str.w	r2, [r8]
 8005190:	e7ec      	b.n	800516c <_malloc_r+0xb0>
 8005192:	4623      	mov	r3, r4
 8005194:	6864      	ldr	r4, [r4, #4]
 8005196:	e7ac      	b.n	80050f2 <_malloc_r+0x36>
 8005198:	4634      	mov	r4, r6
 800519a:	6876      	ldr	r6, [r6, #4]
 800519c:	e7b4      	b.n	8005108 <_malloc_r+0x4c>
 800519e:	4613      	mov	r3, r2
 80051a0:	e7cc      	b.n	800513c <_malloc_r+0x80>
 80051a2:	230c      	movs	r3, #12
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4638      	mov	r0, r7
 80051a8:	f000 f80e 	bl	80051c8 <__malloc_unlock>
 80051ac:	e797      	b.n	80050de <_malloc_r+0x22>
 80051ae:	6025      	str	r5, [r4, #0]
 80051b0:	e7dc      	b.n	800516c <_malloc_r+0xb0>
 80051b2:	605b      	str	r3, [r3, #4]
 80051b4:	deff      	udf	#255	; 0xff
 80051b6:	bf00      	nop
 80051b8:	20000a28 	.word	0x20000a28

080051bc <__malloc_lock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__malloc_lock+0x8>)
 80051be:	f7ff bf0f 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 80051c2:	bf00      	nop
 80051c4:	20000a24 	.word	0x20000a24

080051c8 <__malloc_unlock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <__malloc_unlock+0x8>)
 80051ca:	f7ff bf0a 	b.w	8004fe2 <__retarget_lock_release_recursive>
 80051ce:	bf00      	nop
 80051d0:	20000a24 	.word	0x20000a24

080051d4 <__ssputs_r>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	688e      	ldr	r6, [r1, #8]
 80051da:	461f      	mov	r7, r3
 80051dc:	42be      	cmp	r6, r7
 80051de:	680b      	ldr	r3, [r1, #0]
 80051e0:	4682      	mov	sl, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	4690      	mov	r8, r2
 80051e6:	d82c      	bhi.n	8005242 <__ssputs_r+0x6e>
 80051e8:	898a      	ldrh	r2, [r1, #12]
 80051ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051ee:	d026      	beq.n	800523e <__ssputs_r+0x6a>
 80051f0:	6965      	ldr	r5, [r4, #20]
 80051f2:	6909      	ldr	r1, [r1, #16]
 80051f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051f8:	eba3 0901 	sub.w	r9, r3, r1
 80051fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005200:	1c7b      	adds	r3, r7, #1
 8005202:	444b      	add	r3, r9
 8005204:	106d      	asrs	r5, r5, #1
 8005206:	429d      	cmp	r5, r3
 8005208:	bf38      	it	cc
 800520a:	461d      	movcc	r5, r3
 800520c:	0553      	lsls	r3, r2, #21
 800520e:	d527      	bpl.n	8005260 <__ssputs_r+0x8c>
 8005210:	4629      	mov	r1, r5
 8005212:	f7ff ff53 	bl	80050bc <_malloc_r>
 8005216:	4606      	mov	r6, r0
 8005218:	b360      	cbz	r0, 8005274 <__ssputs_r+0xa0>
 800521a:	6921      	ldr	r1, [r4, #16]
 800521c:	464a      	mov	r2, r9
 800521e:	f000 faeb 	bl	80057f8 <memcpy>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	6126      	str	r6, [r4, #16]
 8005230:	6165      	str	r5, [r4, #20]
 8005232:	444e      	add	r6, r9
 8005234:	eba5 0509 	sub.w	r5, r5, r9
 8005238:	6026      	str	r6, [r4, #0]
 800523a:	60a5      	str	r5, [r4, #8]
 800523c:	463e      	mov	r6, r7
 800523e:	42be      	cmp	r6, r7
 8005240:	d900      	bls.n	8005244 <__ssputs_r+0x70>
 8005242:	463e      	mov	r6, r7
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	4632      	mov	r2, r6
 8005248:	4641      	mov	r1, r8
 800524a:	f000 faab 	bl	80057a4 <memmove>
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	1b9b      	subs	r3, r3, r6
 8005252:	60a3      	str	r3, [r4, #8]
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	4433      	add	r3, r6
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	2000      	movs	r0, #0
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	462a      	mov	r2, r5
 8005262:	f000 fad7 	bl	8005814 <_realloc_r>
 8005266:	4606      	mov	r6, r0
 8005268:	2800      	cmp	r0, #0
 800526a:	d1e0      	bne.n	800522e <__ssputs_r+0x5a>
 800526c:	6921      	ldr	r1, [r4, #16]
 800526e:	4650      	mov	r0, sl
 8005270:	f7ff feb8 	bl	8004fe4 <_free_r>
 8005274:	230c      	movs	r3, #12
 8005276:	f8ca 3000 	str.w	r3, [sl]
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	e7e9      	b.n	800525c <__ssputs_r+0x88>

08005288 <_svfiprintf_r>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	4698      	mov	r8, r3
 800528e:	898b      	ldrh	r3, [r1, #12]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	b09d      	sub	sp, #116	; 0x74
 8005294:	4607      	mov	r7, r0
 8005296:	460d      	mov	r5, r1
 8005298:	4614      	mov	r4, r2
 800529a:	d50e      	bpl.n	80052ba <_svfiprintf_r+0x32>
 800529c:	690b      	ldr	r3, [r1, #16]
 800529e:	b963      	cbnz	r3, 80052ba <_svfiprintf_r+0x32>
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	f7ff ff0b 	bl	80050bc <_malloc_r>
 80052a6:	6028      	str	r0, [r5, #0]
 80052a8:	6128      	str	r0, [r5, #16]
 80052aa:	b920      	cbnz	r0, 80052b6 <_svfiprintf_r+0x2e>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	e0d0      	b.n	8005458 <_svfiprintf_r+0x1d0>
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	616b      	str	r3, [r5, #20]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9309      	str	r3, [sp, #36]	; 0x24
 80052be:	2320      	movs	r3, #32
 80052c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c8:	2330      	movs	r3, #48	; 0x30
 80052ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005470 <_svfiprintf_r+0x1e8>
 80052ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d2:	f04f 0901 	mov.w	r9, #1
 80052d6:	4623      	mov	r3, r4
 80052d8:	469a      	mov	sl, r3
 80052da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052de:	b10a      	cbz	r2, 80052e4 <_svfiprintf_r+0x5c>
 80052e0:	2a25      	cmp	r2, #37	; 0x25
 80052e2:	d1f9      	bne.n	80052d8 <_svfiprintf_r+0x50>
 80052e4:	ebba 0b04 	subs.w	fp, sl, r4
 80052e8:	d00b      	beq.n	8005302 <_svfiprintf_r+0x7a>
 80052ea:	465b      	mov	r3, fp
 80052ec:	4622      	mov	r2, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff ff6f 	bl	80051d4 <__ssputs_r>
 80052f6:	3001      	adds	r0, #1
 80052f8:	f000 80a9 	beq.w	800544e <_svfiprintf_r+0x1c6>
 80052fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052fe:	445a      	add	r2, fp
 8005300:	9209      	str	r2, [sp, #36]	; 0x24
 8005302:	f89a 3000 	ldrb.w	r3, [sl]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80a1 	beq.w	800544e <_svfiprintf_r+0x1c6>
 800530c:	2300      	movs	r3, #0
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005316:	f10a 0a01 	add.w	sl, sl, #1
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	9307      	str	r3, [sp, #28]
 800531e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005322:	931a      	str	r3, [sp, #104]	; 0x68
 8005324:	4654      	mov	r4, sl
 8005326:	2205      	movs	r2, #5
 8005328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532c:	4850      	ldr	r0, [pc, #320]	; (8005470 <_svfiprintf_r+0x1e8>)
 800532e:	f7fa ff6f 	bl	8000210 <memchr>
 8005332:	9a04      	ldr	r2, [sp, #16]
 8005334:	b9d8      	cbnz	r0, 800536e <_svfiprintf_r+0xe6>
 8005336:	06d0      	lsls	r0, r2, #27
 8005338:	bf44      	itt	mi
 800533a:	2320      	movmi	r3, #32
 800533c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005340:	0711      	lsls	r1, r2, #28
 8005342:	bf44      	itt	mi
 8005344:	232b      	movmi	r3, #43	; 0x2b
 8005346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800534a:	f89a 3000 	ldrb.w	r3, [sl]
 800534e:	2b2a      	cmp	r3, #42	; 0x2a
 8005350:	d015      	beq.n	800537e <_svfiprintf_r+0xf6>
 8005352:	9a07      	ldr	r2, [sp, #28]
 8005354:	4654      	mov	r4, sl
 8005356:	2000      	movs	r0, #0
 8005358:	f04f 0c0a 	mov.w	ip, #10
 800535c:	4621      	mov	r1, r4
 800535e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005362:	3b30      	subs	r3, #48	; 0x30
 8005364:	2b09      	cmp	r3, #9
 8005366:	d94d      	bls.n	8005404 <_svfiprintf_r+0x17c>
 8005368:	b1b0      	cbz	r0, 8005398 <_svfiprintf_r+0x110>
 800536a:	9207      	str	r2, [sp, #28]
 800536c:	e014      	b.n	8005398 <_svfiprintf_r+0x110>
 800536e:	eba0 0308 	sub.w	r3, r0, r8
 8005372:	fa09 f303 	lsl.w	r3, r9, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	46a2      	mov	sl, r4
 800537c:	e7d2      	b.n	8005324 <_svfiprintf_r+0x9c>
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	1d19      	adds	r1, r3, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	9103      	str	r1, [sp, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfbb      	ittet	lt
 800538a:	425b      	neglt	r3, r3
 800538c:	f042 0202 	orrlt.w	r2, r2, #2
 8005390:	9307      	strge	r3, [sp, #28]
 8005392:	9307      	strlt	r3, [sp, #28]
 8005394:	bfb8      	it	lt
 8005396:	9204      	strlt	r2, [sp, #16]
 8005398:	7823      	ldrb	r3, [r4, #0]
 800539a:	2b2e      	cmp	r3, #46	; 0x2e
 800539c:	d10c      	bne.n	80053b8 <_svfiprintf_r+0x130>
 800539e:	7863      	ldrb	r3, [r4, #1]
 80053a0:	2b2a      	cmp	r3, #42	; 0x2a
 80053a2:	d134      	bne.n	800540e <_svfiprintf_r+0x186>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	9203      	str	r2, [sp, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bfb8      	it	lt
 80053b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b4:	3402      	adds	r4, #2
 80053b6:	9305      	str	r3, [sp, #20]
 80053b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005480 <_svfiprintf_r+0x1f8>
 80053bc:	7821      	ldrb	r1, [r4, #0]
 80053be:	2203      	movs	r2, #3
 80053c0:	4650      	mov	r0, sl
 80053c2:	f7fa ff25 	bl	8000210 <memchr>
 80053c6:	b138      	cbz	r0, 80053d8 <_svfiprintf_r+0x150>
 80053c8:	9b04      	ldr	r3, [sp, #16]
 80053ca:	eba0 000a 	sub.w	r0, r0, sl
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	4082      	lsls	r2, r0
 80053d2:	4313      	orrs	r3, r2
 80053d4:	3401      	adds	r4, #1
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	4825      	ldr	r0, [pc, #148]	; (8005474 <_svfiprintf_r+0x1ec>)
 80053de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053e2:	2206      	movs	r2, #6
 80053e4:	f7fa ff14 	bl	8000210 <memchr>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d038      	beq.n	800545e <_svfiprintf_r+0x1d6>
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <_svfiprintf_r+0x1f0>)
 80053ee:	bb1b      	cbnz	r3, 8005438 <_svfiprintf_r+0x1b0>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	3307      	adds	r3, #7
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	3308      	adds	r3, #8
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fe:	4433      	add	r3, r6
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	e768      	b.n	80052d6 <_svfiprintf_r+0x4e>
 8005404:	fb0c 3202 	mla	r2, ip, r2, r3
 8005408:	460c      	mov	r4, r1
 800540a:	2001      	movs	r0, #1
 800540c:	e7a6      	b.n	800535c <_svfiprintf_r+0xd4>
 800540e:	2300      	movs	r3, #0
 8005410:	3401      	adds	r4, #1
 8005412:	9305      	str	r3, [sp, #20]
 8005414:	4619      	mov	r1, r3
 8005416:	f04f 0c0a 	mov.w	ip, #10
 800541a:	4620      	mov	r0, r4
 800541c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005420:	3a30      	subs	r2, #48	; 0x30
 8005422:	2a09      	cmp	r2, #9
 8005424:	d903      	bls.n	800542e <_svfiprintf_r+0x1a6>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0c6      	beq.n	80053b8 <_svfiprintf_r+0x130>
 800542a:	9105      	str	r1, [sp, #20]
 800542c:	e7c4      	b.n	80053b8 <_svfiprintf_r+0x130>
 800542e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005432:	4604      	mov	r4, r0
 8005434:	2301      	movs	r3, #1
 8005436:	e7f0      	b.n	800541a <_svfiprintf_r+0x192>
 8005438:	ab03      	add	r3, sp, #12
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	462a      	mov	r2, r5
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <_svfiprintf_r+0x1f4>)
 8005440:	a904      	add	r1, sp, #16
 8005442:	4638      	mov	r0, r7
 8005444:	f3af 8000 	nop.w
 8005448:	1c42      	adds	r2, r0, #1
 800544a:	4606      	mov	r6, r0
 800544c:	d1d6      	bne.n	80053fc <_svfiprintf_r+0x174>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	065b      	lsls	r3, r3, #25
 8005452:	f53f af2d 	bmi.w	80052b0 <_svfiprintf_r+0x28>
 8005456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005458:	b01d      	add	sp, #116	; 0x74
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	ab03      	add	r3, sp, #12
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	462a      	mov	r2, r5
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <_svfiprintf_r+0x1f4>)
 8005466:	a904      	add	r1, sp, #16
 8005468:	4638      	mov	r0, r7
 800546a:	f000 f879 	bl	8005560 <_printf_i>
 800546e:	e7eb      	b.n	8005448 <_svfiprintf_r+0x1c0>
 8005470:	080058cc 	.word	0x080058cc
 8005474:	080058d6 	.word	0x080058d6
 8005478:	00000000 	.word	0x00000000
 800547c:	080051d5 	.word	0x080051d5
 8005480:	080058d2 	.word	0x080058d2

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4699      	mov	r9, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054a0:	4607      	mov	r7, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc26      	bgt.n	800551a <_printf_common+0x96>
 80054cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054d0:	1e13      	subs	r3, r2, #0
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d42b      	bmi.n	8005534 <_printf_common+0xb0>
 80054dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d01e      	beq.n	8005528 <_printf_common+0xa4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf02      	ittt	eq
 80054f6:	68e5      	ldreq	r5, [r4, #12]
 80054f8:	6833      	ldreq	r3, [r6, #0]
 80054fa:	1aed      	subeq	r5, r5, r3
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	2600      	movs	r6, #0
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xc8>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xa8>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4649      	mov	r1, r9
 8005520:	4638      	mov	r0, r7
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xac>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c6      	b.n	80054c2 <_printf_common+0x3e>
 8005534:	18e1      	adds	r1, r4, r3
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	2030      	movs	r0, #48	; 0x30
 800553a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800553e:	4422      	add	r2, r4
 8005540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005548:	3302      	adds	r3, #2
 800554a:	e7c7      	b.n	80054dc <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4649      	mov	r1, r9
 8005552:	4638      	mov	r0, r7
 8005554:	47c0      	blx	r8
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x8e>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7e0f      	ldrb	r7, [r1, #24]
 8005566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005568:	2f78      	cmp	r7, #120	; 0x78
 800556a:	4691      	mov	r9, r2
 800556c:	4680      	mov	r8, r0
 800556e:	460c      	mov	r4, r1
 8005570:	469a      	mov	sl, r3
 8005572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	; 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d4 	beq.w	800572a <_printf_i+0x1ca>
 8005582:	2f58      	cmp	r7, #88	; 0x58
 8005584:	f000 80c0 	beq.w	8005708 <_printf_i+0x1a8>
 8005588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a101      	add	r1, pc, #4	; (adr r1, 80055a0 <_printf_i+0x40>)
 800559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	08005711 	.word	0x08005711
 80055d0:	08005639 	.word	0x08005639
 80055d4:	080056cb 	.word	0x080056cb
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	08005733 	.word	0x08005733
 80055e4:	08005589 	.word	0x08005589
 80055e8:	08005639 	.word	0x08005639
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	080056d3 	.word	0x080056d3
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e09f      	b.n	800574c <_printf_i+0x1ec>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	0607      	lsls	r7, r0, #24
 8005612:	f103 0104 	add.w	r1, r3, #4
 8005616:	6029      	str	r1, [r5, #0]
 8005618:	d501      	bpl.n	800561e <_printf_i+0xbe>
 800561a:	681e      	ldr	r6, [r3, #0]
 800561c:	e003      	b.n	8005626 <_printf_i+0xc6>
 800561e:	0646      	lsls	r6, r0, #25
 8005620:	d5fb      	bpl.n	800561a <_printf_i+0xba>
 8005622:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005626:	2e00      	cmp	r6, #0
 8005628:	da03      	bge.n	8005632 <_printf_i+0xd2>
 800562a:	232d      	movs	r3, #45	; 0x2d
 800562c:	4276      	negs	r6, r6
 800562e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005632:	485a      	ldr	r0, [pc, #360]	; (800579c <_printf_i+0x23c>)
 8005634:	230a      	movs	r3, #10
 8005636:	e012      	b.n	800565e <_printf_i+0xfe>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	1d19      	adds	r1, r3, #4
 800563e:	6029      	str	r1, [r5, #0]
 8005640:	0605      	lsls	r5, r0, #24
 8005642:	d501      	bpl.n	8005648 <_printf_i+0xe8>
 8005644:	681e      	ldr	r6, [r3, #0]
 8005646:	e002      	b.n	800564e <_printf_i+0xee>
 8005648:	0641      	lsls	r1, r0, #25
 800564a:	d5fb      	bpl.n	8005644 <_printf_i+0xe4>
 800564c:	881e      	ldrh	r6, [r3, #0]
 800564e:	4853      	ldr	r0, [pc, #332]	; (800579c <_printf_i+0x23c>)
 8005650:	2f6f      	cmp	r7, #111	; 0x6f
 8005652:	bf0c      	ite	eq
 8005654:	2308      	moveq	r3, #8
 8005656:	230a      	movne	r3, #10
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800565e:	6865      	ldr	r5, [r4, #4]
 8005660:	60a5      	str	r5, [r4, #8]
 8005662:	2d00      	cmp	r5, #0
 8005664:	bfa2      	ittt	ge
 8005666:	6821      	ldrge	r1, [r4, #0]
 8005668:	f021 0104 	bicge.w	r1, r1, #4
 800566c:	6021      	strge	r1, [r4, #0]
 800566e:	b90e      	cbnz	r6, 8005674 <_printf_i+0x114>
 8005670:	2d00      	cmp	r5, #0
 8005672:	d04b      	beq.n	800570c <_printf_i+0x1ac>
 8005674:	4615      	mov	r5, r2
 8005676:	fbb6 f1f3 	udiv	r1, r6, r3
 800567a:	fb03 6711 	mls	r7, r3, r1, r6
 800567e:	5dc7      	ldrb	r7, [r0, r7]
 8005680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005684:	4637      	mov	r7, r6
 8005686:	42bb      	cmp	r3, r7
 8005688:	460e      	mov	r6, r1
 800568a:	d9f4      	bls.n	8005676 <_printf_i+0x116>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d10b      	bne.n	80056a8 <_printf_i+0x148>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07de      	lsls	r6, r3, #31
 8005694:	d508      	bpl.n	80056a8 <_printf_i+0x148>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6861      	ldr	r1, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	bfde      	ittt	le
 800569e:	2330      	movle	r3, #48	; 0x30
 80056a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056a8:	1b52      	subs	r2, r2, r5
 80056aa:	6122      	str	r2, [r4, #16]
 80056ac:	f8cd a000 	str.w	sl, [sp]
 80056b0:	464b      	mov	r3, r9
 80056b2:	aa03      	add	r2, sp, #12
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fee4 	bl	8005484 <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	d14a      	bne.n	8005756 <_printf_i+0x1f6>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	b004      	add	sp, #16
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f043 0320 	orr.w	r3, r3, #32
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	4833      	ldr	r0, [pc, #204]	; (80057a0 <_printf_i+0x240>)
 80056d4:	2778      	movs	r7, #120	; 0x78
 80056d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	6829      	ldr	r1, [r5, #0]
 80056de:	061f      	lsls	r7, r3, #24
 80056e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80056e4:	d402      	bmi.n	80056ec <_printf_i+0x18c>
 80056e6:	065f      	lsls	r7, r3, #25
 80056e8:	bf48      	it	mi
 80056ea:	b2b6      	uxthmi	r6, r6
 80056ec:	07df      	lsls	r7, r3, #31
 80056ee:	bf48      	it	mi
 80056f0:	f043 0320 	orrmi.w	r3, r3, #32
 80056f4:	6029      	str	r1, [r5, #0]
 80056f6:	bf48      	it	mi
 80056f8:	6023      	strmi	r3, [r4, #0]
 80056fa:	b91e      	cbnz	r6, 8005704 <_printf_i+0x1a4>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	2310      	movs	r3, #16
 8005706:	e7a7      	b.n	8005658 <_printf_i+0xf8>
 8005708:	4824      	ldr	r0, [pc, #144]	; (800579c <_printf_i+0x23c>)
 800570a:	e7e4      	b.n	80056d6 <_printf_i+0x176>
 800570c:	4615      	mov	r5, r2
 800570e:	e7bd      	b.n	800568c <_printf_i+0x12c>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	6826      	ldr	r6, [r4, #0]
 8005714:	6961      	ldr	r1, [r4, #20]
 8005716:	1d18      	adds	r0, r3, #4
 8005718:	6028      	str	r0, [r5, #0]
 800571a:	0635      	lsls	r5, r6, #24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	d501      	bpl.n	8005724 <_printf_i+0x1c4>
 8005720:	6019      	str	r1, [r3, #0]
 8005722:	e002      	b.n	800572a <_printf_i+0x1ca>
 8005724:	0670      	lsls	r0, r6, #25
 8005726:	d5fb      	bpl.n	8005720 <_printf_i+0x1c0>
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	4615      	mov	r5, r2
 8005730:	e7bc      	b.n	80056ac <_printf_i+0x14c>
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	602a      	str	r2, [r5, #0]
 8005738:	681d      	ldr	r5, [r3, #0]
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	2100      	movs	r1, #0
 800573e:	4628      	mov	r0, r5
 8005740:	f7fa fd66 	bl	8000210 <memchr>
 8005744:	b108      	cbz	r0, 800574a <_printf_i+0x1ea>
 8005746:	1b40      	subs	r0, r0, r5
 8005748:	6060      	str	r0, [r4, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005754:	e7aa      	b.n	80056ac <_printf_i+0x14c>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	462a      	mov	r2, r5
 800575a:	4649      	mov	r1, r9
 800575c:	4640      	mov	r0, r8
 800575e:	47d0      	blx	sl
 8005760:	3001      	adds	r0, #1
 8005762:	d0ad      	beq.n	80056c0 <_printf_i+0x160>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	d413      	bmi.n	8005792 <_printf_i+0x232>
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	4298      	cmp	r0, r3
 8005770:	bfb8      	it	lt
 8005772:	4618      	movlt	r0, r3
 8005774:	e7a6      	b.n	80056c4 <_printf_i+0x164>
 8005776:	2301      	movs	r3, #1
 8005778:	4632      	mov	r2, r6
 800577a:	4649      	mov	r1, r9
 800577c:	4640      	mov	r0, r8
 800577e:	47d0      	blx	sl
 8005780:	3001      	adds	r0, #1
 8005782:	d09d      	beq.n	80056c0 <_printf_i+0x160>
 8005784:	3501      	adds	r5, #1
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	9903      	ldr	r1, [sp, #12]
 800578a:	1a5b      	subs	r3, r3, r1
 800578c:	42ab      	cmp	r3, r5
 800578e:	dcf2      	bgt.n	8005776 <_printf_i+0x216>
 8005790:	e7eb      	b.n	800576a <_printf_i+0x20a>
 8005792:	2500      	movs	r5, #0
 8005794:	f104 0619 	add.w	r6, r4, #25
 8005798:	e7f5      	b.n	8005786 <_printf_i+0x226>
 800579a:	bf00      	nop
 800579c:	080058dd 	.word	0x080058dd
 80057a0:	080058ee 	.word	0x080058ee

080057a4 <memmove>:
 80057a4:	4288      	cmp	r0, r1
 80057a6:	b510      	push	{r4, lr}
 80057a8:	eb01 0402 	add.w	r4, r1, r2
 80057ac:	d902      	bls.n	80057b4 <memmove+0x10>
 80057ae:	4284      	cmp	r4, r0
 80057b0:	4623      	mov	r3, r4
 80057b2:	d807      	bhi.n	80057c4 <memmove+0x20>
 80057b4:	1e43      	subs	r3, r0, #1
 80057b6:	42a1      	cmp	r1, r4
 80057b8:	d008      	beq.n	80057cc <memmove+0x28>
 80057ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057c2:	e7f8      	b.n	80057b6 <memmove+0x12>
 80057c4:	4402      	add	r2, r0
 80057c6:	4601      	mov	r1, r0
 80057c8:	428a      	cmp	r2, r1
 80057ca:	d100      	bne.n	80057ce <memmove+0x2a>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057d6:	e7f7      	b.n	80057c8 <memmove+0x24>

080057d8 <_sbrk_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d06      	ldr	r5, [pc, #24]	; (80057f4 <_sbrk_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	602b      	str	r3, [r5, #0]
 80057e4:	f7fb fbc6 	bl	8000f74 <_sbrk>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_sbrk_r+0x1a>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_sbrk_r+0x1a>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20000a20 	.word	0x20000a20

080057f8 <memcpy>:
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005800:	d100      	bne.n	8005804 <memcpy+0xc>
 8005802:	4770      	bx	lr
 8005804:	b510      	push	{r4, lr}
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580e:	4291      	cmp	r1, r2
 8005810:	d1f9      	bne.n	8005806 <memcpy+0xe>
 8005812:	bd10      	pop	{r4, pc}

08005814 <_realloc_r>:
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	4680      	mov	r8, r0
 800581a:	4614      	mov	r4, r2
 800581c:	460e      	mov	r6, r1
 800581e:	b921      	cbnz	r1, 800582a <_realloc_r+0x16>
 8005820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005824:	4611      	mov	r1, r2
 8005826:	f7ff bc49 	b.w	80050bc <_malloc_r>
 800582a:	b92a      	cbnz	r2, 8005838 <_realloc_r+0x24>
 800582c:	f7ff fbda 	bl	8004fe4 <_free_r>
 8005830:	4625      	mov	r5, r4
 8005832:	4628      	mov	r0, r5
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	f000 f81b 	bl	8005872 <_malloc_usable_size_r>
 800583c:	4284      	cmp	r4, r0
 800583e:	4607      	mov	r7, r0
 8005840:	d802      	bhi.n	8005848 <_realloc_r+0x34>
 8005842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005846:	d812      	bhi.n	800586e <_realloc_r+0x5a>
 8005848:	4621      	mov	r1, r4
 800584a:	4640      	mov	r0, r8
 800584c:	f7ff fc36 	bl	80050bc <_malloc_r>
 8005850:	4605      	mov	r5, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d0ed      	beq.n	8005832 <_realloc_r+0x1e>
 8005856:	42bc      	cmp	r4, r7
 8005858:	4622      	mov	r2, r4
 800585a:	4631      	mov	r1, r6
 800585c:	bf28      	it	cs
 800585e:	463a      	movcs	r2, r7
 8005860:	f7ff ffca 	bl	80057f8 <memcpy>
 8005864:	4631      	mov	r1, r6
 8005866:	4640      	mov	r0, r8
 8005868:	f7ff fbbc 	bl	8004fe4 <_free_r>
 800586c:	e7e1      	b.n	8005832 <_realloc_r+0x1e>
 800586e:	4635      	mov	r5, r6
 8005870:	e7df      	b.n	8005832 <_realloc_r+0x1e>

08005872 <_malloc_usable_size_r>:
 8005872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005876:	1f18      	subs	r0, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	bfbc      	itt	lt
 800587c:	580b      	ldrlt	r3, [r1, r0]
 800587e:	18c0      	addlt	r0, r0, r3
 8005880:	4770      	bx	lr
	...

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
