
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007000  08007000  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000064  0800706c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e1c  0800706c  00020e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154bb  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e33  00000000  00000000  00035592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  000383c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d98  00000000  00000000  00039540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275cb  00000000  00000000  0003a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174bc  00000000  00000000  000618a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f25c5  00000000  00000000  00078d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004eb0  00000000  00000000  0016b324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001701d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ea8 	.word	0x08006ea8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08006ea8 	.word	0x08006ea8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <interpolate>:
uint16_t audio_buf_low[AUDIO_LOW_BUF_SIZE];
uint16_t audio_buf_high[AUDIO_HIGH_BUF_SIZE];
uint8_t delay_denom = 8;


static inline int16_t interpolate(uint16_t x, uint8_t delay_n, uint16_t* array, int dir, uint16_t size) {
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4603      	mov	r3, r0
 80005c8:	81fb      	strh	r3, [r7, #14]
 80005ca:	460b      	mov	r3, r1
 80005cc:	737b      	strb	r3, [r7, #13]
	return ((array[x % size] * (delay_denom - delay_n)+ array[(x + dir + size) % size] * delay_n) >> 3) - 32768;
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	8b3a      	ldrh	r2, [r7, #24]
 80005d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80005d6:	fb01 f202 	mul.w	r2, r1, r2
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	b29b      	uxth	r3, r3
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	4413      	add	r3, r2
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <interpolate+0x7c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	1acb      	subs	r3, r1, r3
 80005f2:	fb03 f102 	mul.w	r1, r3, r2
 80005f6:	89fa      	ldrh	r2, [r7, #14]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	441a      	add	r2, r3
 80005fc:	8b3b      	ldrh	r3, [r7, #24]
 80005fe:	4413      	add	r3, r2
 8000600:	8b3a      	ldrh	r2, [r7, #24]
 8000602:	fb93 f0f2 	sdiv	r0, r3, r2
 8000606:	fb00 f202 	mul.w	r2, r0, r2
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	440b      	add	r3, r1
 800061e:	10db      	asrs	r3, r3, #3
 8000620:	b29b      	uxth	r3, r3
 8000622:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000626:	b29b      	uxth	r3, r3
 8000628:	b21b      	sxth	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000

0800063c <read_ADC_Channel>:

uint16_t read_ADC_Channel(ADC_HandleTypeDef* hadc, int channel) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef chConfig = { 0 };
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
	chConfig.Channel = channel;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	60bb      	str	r3, [r7, #8]
	chConfig.Rank = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
	chConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &chConfig);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 fbc0 	bl	8001dec <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f001 fa57 	bl	8001b20 <HAL_ADC_Start>
	int status = HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000672:	f04f 31ff 	mov.w	r1, #4294967295
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f001 fb20 	bl	8001cbc <HAL_ADC_PollForConversion>
 800067c:	4603      	mov	r3, r0
 800067e:	61fb      	str	r3, [r7, #28]
		  if (status != HAL_OK) {
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <read_ADC_Channel+0x4e>
			Error_Handler();
 8000686:	f000 fe27 	bl	80012d8 <Error_Handler>
		  }
	uint16_t val = HAL_ADC_GetValue(hadc);
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f001 fba1 	bl	8001dd2 <HAL_ADC_GetValue>
 8000690:	4603      	mov	r3, r0
 8000692:	837b      	strh	r3, [r7, #26]
//	HAL_ADC_Stop(hadc);

	return val;
 8000694:	8b7b      	ldrh	r3, [r7, #26]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
//		audio_buf_high[i] = audio_buf_high_f[i];
//	}
//
//	counter ++;

	if(hsai == &hsai_BlockB1) return;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4aa0      	ldr	r2, [pc, #640]	; (800092c <HAL_SAI_TxCpltCallback+0x28c>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	f000 8138 	beq.w	8000922 <HAL_SAI_TxCpltCallback+0x282>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b2:	b672      	cpsid	i
}
 80006b4:	bf00      	nop

	__disable_irq();
	adc_get[0] = read_ADC_Channel(&hadc1, 0);
 80006b6:	2100      	movs	r1, #0
 80006b8:	489d      	ldr	r0, [pc, #628]	; (8000930 <HAL_SAI_TxCpltCallback+0x290>)
 80006ba:	f7ff ffbf 	bl	800063c <read_ADC_Channel>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b9c      	ldr	r3, [pc, #624]	; (8000934 <HAL_SAI_TxCpltCallback+0x294>)
 80006c4:	801a      	strh	r2, [r3, #0]
	adc_get[1] = read_ADC_Channel(&hadc1, 3);
 80006c6:	2103      	movs	r1, #3
 80006c8:	4899      	ldr	r0, [pc, #612]	; (8000930 <HAL_SAI_TxCpltCallback+0x290>)
 80006ca:	f7ff ffb7 	bl	800063c <read_ADC_Channel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b98      	ldr	r3, [pc, #608]	; (8000934 <HAL_SAI_TxCpltCallback+0x294>)
 80006d4:	805a      	strh	r2, [r3, #2]
	delay_nom = (read_ADC_Channel(&hadc1, 4) - 2000) * 64 / 2048;
 80006d6:	2104      	movs	r1, #4
 80006d8:	4895      	ldr	r0, [pc, #596]	; (8000930 <HAL_SAI_TxCpltCallback+0x290>)
 80006da:	f7ff ffaf 	bl	800063c <read_ADC_Channel>
 80006de:	4603      	mov	r3, r0
 80006e0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da00      	bge.n	80006ea <HAL_SAI_TxCpltCallback+0x4a>
 80006e8:	331f      	adds	r3, #31
 80006ea:	115b      	asrs	r3, r3, #5
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b92      	ldr	r3, [pc, #584]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 80006f0:	601a      	str	r2, [r3, #0]



	audio_buf_high[circ_offset_high] = (adc_get[0] << 4);// should be 0
 80006f2:	4b90      	ldr	r3, [pc, #576]	; (8000934 <HAL_SAI_TxCpltCallback+0x294>)
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	4b91      	ldr	r3, [pc, #580]	; (800093c <HAL_SAI_TxCpltCallback+0x29c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b291      	uxth	r1, r2
 80006fe:	4a90      	ldr	r2, [pc, #576]	; (8000940 <HAL_SAI_TxCpltCallback+0x2a0>)
 8000700:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	audio_buf_low[circ_offset_low] = (adc_get[1] << 4);// - (1 << 15);
 8000704:	4b8b      	ldr	r3, [pc, #556]	; (8000934 <HAL_SAI_TxCpltCallback+0x294>)
 8000706:	885a      	ldrh	r2, [r3, #2]
 8000708:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <HAL_SAI_TxCpltCallback+0x2a4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	0112      	lsls	r2, r2, #4
 800070e:	b291      	uxth	r1, r2
 8000710:	4a8d      	ldr	r2, [pc, #564]	; (8000948 <HAL_SAI_TxCpltCallback+0x2a8>)
 8000712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	circ_offset_high = (circ_offset_high + 1) % AUDIO_HIGH_BUF_SIZE;
 8000716:	4b89      	ldr	r3, [pc, #548]	; (800093c <HAL_SAI_TxCpltCallback+0x29c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	4b8b      	ldr	r3, [pc, #556]	; (800094c <HAL_SAI_TxCpltCallback+0x2ac>)
 800071e:	fb83 1302 	smull	r1, r3, r3, r2
 8000722:	1159      	asrs	r1, r3, #5
 8000724:	17d3      	asrs	r3, r2, #31
 8000726:	1acb      	subs	r3, r1, r3
 8000728:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800072c:	fb01 f303 	mul.w	r3, r1, r3
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4a82      	ldr	r2, [pc, #520]	; (800093c <HAL_SAI_TxCpltCallback+0x29c>)
 8000734:	6013      	str	r3, [r2, #0]
	circ_offset_low = (circ_offset_low + 1) % AUDIO_LOW_BUF_SIZE;
 8000736:	4b83      	ldr	r3, [pc, #524]	; (8000944 <HAL_SAI_TxCpltCallback+0x2a4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a84      	ldr	r2, [pc, #528]	; (8000950 <HAL_SAI_TxCpltCallback+0x2b0>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	441a      	add	r2, r3
 8000744:	11d1      	asrs	r1, r2, #7
 8000746:	17da      	asrs	r2, r3, #31
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	21b4      	movs	r1, #180	; 0xb4
 800074c:	fb01 f202 	mul.w	r2, r1, r2
 8000750:	1a9a      	subs	r2, r3, r2
 8000752:	4b7c      	ldr	r3, [pc, #496]	; (8000944 <HAL_SAI_TxCpltCallback+0x2a4>)
 8000754:	601a      	str	r2, [r3, #0]


	int dir = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
	if (delay_nom < 0) dir = -1;
 800075a:	4b77      	ldr	r3, [pc, #476]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	da02      	bge.n	8000768 <HAL_SAI_TxCpltCallback+0xc8>
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	617b      	str	r3, [r7, #20]
	//Fill the 12 subwoofers
	uint16_t buff_offset = ((AUDIO_LOW_BUF_SIZE >> 1) + AUDIO_LOW_BUF_SIZE + circ_offset_low);
 8000768:	4b76      	ldr	r3, [pc, #472]	; (8000944 <HAL_SAI_TxCpltCallback+0x2a4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	b29b      	uxth	r3, r3
 800076e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000772:	817b      	strh	r3, [r7, #10]
	uint16_t buff_index = buff_offset;
 8000774:	897b      	ldrh	r3, [r7, #10]
 8000776:	813b      	strh	r3, [r7, #8]
	uint8_t i = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	74fb      	strb	r3, [r7, #19]
	int int_delay = 4 * delay_nom;
 800077c:	4b6e      	ldr	r3, [pc, #440]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
	while (i < 12) {
 8000784:	e043      	b.n	800080e <HAL_SAI_TxCpltCallback+0x16e>
		buff_index = (int_delay / delay_denom + buff_offset + AUDIO_LOW_BUF_SIZE) % AUDIO_LOW_BUF_SIZE;
 8000786:	4b73      	ldr	r3, [pc, #460]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000792:	897b      	ldrh	r3, [r7, #10]
 8000794:	4413      	add	r3, r2
 8000796:	33b4      	adds	r3, #180	; 0xb4
 8000798:	4a6d      	ldr	r2, [pc, #436]	; (8000950 <HAL_SAI_TxCpltCallback+0x2b0>)
 800079a:	fb82 1203 	smull	r1, r2, r2, r3
 800079e:	441a      	add	r2, r3
 80007a0:	11d1      	asrs	r1, r2, #7
 80007a2:	17da      	asrs	r2, r3, #31
 80007a4:	1a8a      	subs	r2, r1, r2
 80007a6:	21b4      	movs	r1, #180	; 0xb4
 80007a8:	fb01 f202 	mul.w	r2, r1, r2
 80007ac:	1a9a      	subs	r2, r3, r2
 80007ae:	4613      	mov	r3, r2
 80007b0:	813b      	strh	r3, [r7, #8]
		sai_fifo_a[(6 + i) % 12] = interpolate(buff_index,
				(int_delay * dir) % delay_denom,
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	4a66      	ldr	r2, [pc, #408]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	fb93 f1f2 	sdiv	r1, r3, r2
 80007c2:	fb01 f202 	mul.w	r2, r1, r2
 80007c6:	1a9b      	subs	r3, r3, r2
		sai_fifo_a[(6 + i) % 12] = interpolate(buff_index,
 80007c8:	b2d9      	uxtb	r1, r3
 80007ca:	8938      	ldrh	r0, [r7, #8]
 80007cc:	23b4      	movs	r3, #180	; 0xb4
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	4a5d      	ldr	r2, [pc, #372]	; (8000948 <HAL_SAI_TxCpltCallback+0x2a8>)
 80007d4:	f7ff fef2 	bl	80005bc <interpolate>
 80007d8:	4603      	mov	r3, r0
 80007da:	4618      	mov	r0, r3
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	1d99      	adds	r1, r3, #6
 80007e0:	4b5d      	ldr	r3, [pc, #372]	; (8000958 <HAL_SAI_TxCpltCallback+0x2b8>)
 80007e2:	fb83 2301 	smull	r2, r3, r3, r1
 80007e6:	105a      	asrs	r2, r3, #1
 80007e8:	17cb      	asrs	r3, r1, #31
 80007ea:	1ad2      	subs	r2, r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	1aca      	subs	r2, r1, r3
 80007f6:	4601      	mov	r1, r0
 80007f8:	4b58      	ldr	r3, [pc, #352]	; (800095c <HAL_SAI_TxCpltCallback+0x2bc>)
 80007fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				audio_buf_low, dir,
				AUDIO_LOW_BUF_SIZE);
		int_delay += delay_nom;
 80007fe:	4b4e      	ldr	r3, [pc, #312]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
		i ++;
 8000808:	7cfb      	ldrb	r3, [r7, #19]
 800080a:	3301      	adds	r3, #1
 800080c:	74fb      	strb	r3, [r7, #19]
	while (i < 12) {
 800080e:	7cfb      	ldrb	r3, [r7, #19]
 8000810:	2b0b      	cmp	r3, #11
 8000812:	d9b8      	bls.n	8000786 <HAL_SAI_TxCpltCallback+0xe6>
	}
//	Fill the first 4 tweeters into the remaining space in DAC 1
	buff_offset = ((AUDIO_HIGH_BUF_SIZE >> 1) + AUDIO_HIGH_BUF_SIZE + circ_offset_high);
 8000814:	4b49      	ldr	r3, [pc, #292]	; (800093c <HAL_SAI_TxCpltCallback+0x29c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800081e:	817b      	strh	r3, [r7, #10]
	int_delay = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
	while (i < 16) {
 8000824:	e039      	b.n	800089a <HAL_SAI_TxCpltCallback+0x1fa>
		buff_index = (int_delay / delay_denom + buff_offset + AUDIO_HIGH_BUF_SIZE) % AUDIO_HIGH_BUF_SIZE;
 8000826:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	4413      	add	r3, r2
 8000836:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800083a:	4a44      	ldr	r2, [pc, #272]	; (800094c <HAL_SAI_TxCpltCallback+0x2ac>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	1151      	asrs	r1, r2, #5
 8000842:	17da      	asrs	r2, r3, #31
 8000844:	1a8a      	subs	r2, r1, r2
 8000846:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800084a:	fb01 f202 	mul.w	r2, r1, r2
 800084e:	1a9a      	subs	r2, r3, r2
 8000850:	4613      	mov	r3, r2
 8000852:	813b      	strh	r3, [r7, #8]
		sai_fifo_a[i] = interpolate(buff_index,
				(int_delay * dir) % delay_denom,
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	4a3d      	ldr	r2, [pc, #244]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	fb93 f1f2 	sdiv	r1, r3, r2
 8000864:	fb01 f202 	mul.w	r2, r1, r2
 8000868:	1a9b      	subs	r3, r3, r2
		sai_fifo_a[i] = interpolate(buff_index,
 800086a:	b2d9      	uxtb	r1, r3
 800086c:	8938      	ldrh	r0, [r7, #8]
 800086e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <HAL_SAI_TxCpltCallback+0x2a0>)
 8000878:	f7ff fea0 	bl	80005bc <interpolate>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	4611      	mov	r1, r2
 8000884:	4a35      	ldr	r2, [pc, #212]	; (800095c <HAL_SAI_TxCpltCallback+0x2bc>)
 8000886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				audio_buf_high, dir,
				AUDIO_HIGH_BUF_SIZE);
		int_delay += delay_nom;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4413      	add	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
		i++;
 8000894:	7cfb      	ldrb	r3, [r7, #19]
 8000896:	3301      	adds	r3, #1
 8000898:	74fb      	strb	r3, [r7, #19]
	while (i < 16) {
 800089a:	7cfb      	ldrb	r3, [r7, #19]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d9c2      	bls.n	8000826 <HAL_SAI_TxCpltCallback+0x186>
	}
////////	//Fill the remaining 16 tweeters into DAC 2
	while (i < 32) {
 80008a0:	e03a      	b.n	8000918 <HAL_SAI_TxCpltCallback+0x278>
		buff_index = (int_delay / delay_denom + buff_offset + AUDIO_HIGH_BUF_SIZE) % AUDIO_HIGH_BUF_SIZE;
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	fb93 f2f2 	sdiv	r2, r3, r2
 80008ae:	897b      	ldrh	r3, [r7, #10]
 80008b0:	4413      	add	r3, r2
 80008b2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <HAL_SAI_TxCpltCallback+0x2ac>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1151      	asrs	r1, r2, #5
 80008be:	17da      	asrs	r2, r3, #31
 80008c0:	1a8a      	subs	r2, r1, r2
 80008c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80008c6:	fb01 f202 	mul.w	r2, r1, r2
 80008ca:	1a9a      	subs	r2, r3, r2
 80008cc:	4613      	mov	r3, r2
 80008ce:	813b      	strh	r3, [r7, #8]
		sai_fifo_b[i - 16] = interpolate(buff_index,
				(int_delay * dir) % delay_denom,
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <HAL_SAI_TxCpltCallback+0x2b4>)
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80008e0:	fb01 f202 	mul.w	r2, r1, r2
 80008e4:	1a9b      	subs	r3, r3, r2
		sai_fifo_b[i - 16] = interpolate(buff_index,
 80008e6:	b2d9      	uxtb	r1, r3
 80008e8:	8938      	ldrh	r0, [r7, #8]
 80008ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <HAL_SAI_TxCpltCallback+0x2a0>)
 80008f4:	f7ff fe62 	bl	80005bc <interpolate>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	7cfb      	ldrb	r3, [r7, #19]
 80008fe:	3b10      	subs	r3, #16
 8000900:	4611      	mov	r1, r2
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_SAI_TxCpltCallback+0x2c0>)
 8000904:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				audio_buf_high, dir,
				AUDIO_HIGH_BUF_SIZE);
		int_delay += delay_nom;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_SAI_TxCpltCallback+0x298>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
		i++;
 8000912:	7cfb      	ldrb	r3, [r7, #19]
 8000914:	3301      	adds	r3, #1
 8000916:	74fb      	strb	r3, [r7, #19]
	while (i < 32) {
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	2b1f      	cmp	r3, #31
 800091c:	d9c1      	bls.n	80008a2 <HAL_SAI_TxCpltCallback+0x202>
  __ASM volatile ("cpsie i" : : : "memory");
 800091e:	b662      	cpsie	i
}
 8000920:	e000      	b.n	8000924 <HAL_SAI_TxCpltCallback+0x284>
	if(hsai == &hsai_BlockB1) return;
 8000922:	bf00      	nop
//	sprintf(msg1, "adc2 is %d\r\n", delay_nom);
//	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);
////	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);


}
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001a0 	.word	0x200001a0
 8000930:	20000080 	.word	0x20000080
 8000934:	20000874 	.word	0x20000874
 8000938:	20000cbc 	.word	0x20000cbc
 800093c:	20000cc0 	.word	0x20000cc0
 8000940:	20000a60 	.word	0x20000a60
 8000944:	20000cc4 	.word	0x20000cc4
 8000948:	200008f8 	.word	0x200008f8
 800094c:	1b4e81b5 	.word	0x1b4e81b5
 8000950:	b60b60b7 	.word	0xb60b60b7
 8000954:	20000000 	.word	0x20000000
 8000958:	2aaaaaab 	.word	0x2aaaaaab
 800095c:	20000878 	.word	0x20000878
 8000960:	200008b8 	.word	0x200008b8

08000964 <write_DAC1>:
uint8_t dac_ctrl1 = 0b10000100;
uint8_t dac_ctrl2 = 0b10000;



void write_DAC1(uint8_t reg, uint8_t* data) {
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b0ba      	sub	sp, #232	; 0xe8
 8000968:	af04      	add	r7, sp, #16
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC1_ADDR << 1, reg,
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	b29a      	uxth	r2, r3
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2301      	movs	r3, #1
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	2108      	movs	r1, #8
 8000986:	4827      	ldr	r0, [pc, #156]	; (8000a24 <write_DAC1+0xc0>)
 8000988:	f002 fb60 	bl	800304c <HAL_I2C_Mem_Write>
 800098c:	4603      	mov	r3, r0
 800098e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success on DAC1!\r\n";
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <write_DAC1+0xc4>)
 8000994:	f107 040c 	add.w	r4, r7, #12
 8000998:	461d      	mov	r5, r3
 800099a:	6828      	ldr	r0, [r5, #0]
 800099c:	6869      	ldr	r1, [r5, #4]
 800099e:	68aa      	ldr	r2, [r5, #8]
 80009a0:	68eb      	ldr	r3, [r5, #12]
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	8a2b      	ldrh	r3, [r5, #16]
 80009a6:	7caa      	ldrb	r2, [r5, #18]
 80009a8:	8023      	strh	r3, [r4, #0]
 80009aa:	4613      	mov	r3, r2
 80009ac:	70a3      	strb	r3, [r4, #2]
 80009ae:	f107 031f 	add.w	r3, r7, #31
 80009b2:	2251      	movs	r2, #81	; 0x51
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fdf2 	bl	80065a0 <memset>
	if (ret != HAL_OK) {
 80009bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d01d      	beq.n	8000a00 <write_DAC1+0x9c>
		sprintf(str_fail, "Error is %d on DAC1; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <write_DAC1+0xc0>)
 80009c6:	f002 fc55 	bl	8003274 <HAL_I2C_GetError>
 80009ca:	4601      	mov	r1, r0
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4613      	mov	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	4913      	ldr	r1, [pc, #76]	; (8000a2c <write_DAC1+0xc8>)
 80009de:	f005 fdbf 	bl	8006560 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80009e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc12 	bl	8000210 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <write_DAC1+0xcc>)
 80009fa:	f004 fe36 	bl	800566a <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 80009fe:	e00d      	b.n	8000a1c <write_DAC1+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc03 	bl	8000210 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <write_DAC1+0xcc>)
 8000a18:	f004 fe27 	bl	800566a <HAL_UART_Transmit>
}
 8000a1c:	bf00      	nop
 8000a1e:	37d8      	adds	r7, #216	; 0xd8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bdb0      	pop	{r4, r5, r7, pc}
 8000a24:	200000c8 	.word	0x200000c8
 8000a28:	08006ef4 	.word	0x08006ef4
 8000a2c:	08006ec0 	.word	0x08006ec0
 8000a30:	200002e4 	.word	0x200002e4

08000a34 <write_DAC2>:

void write_DAC2(uint8_t reg, uint8_t* data) {
 8000a34:	b5b0      	push	{r4, r5, r7, lr}
 8000a36:	b0ba      	sub	sp, #232	; 0xe8
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC2_ADDR << 1, reg,
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	2148      	movs	r1, #72	; 0x48
 8000a56:	4827      	ldr	r0, [pc, #156]	; (8000af4 <write_DAC2+0xc0>)
 8000a58:	f002 faf8 	bl	800304c <HAL_I2C_Mem_Write>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <write_DAC2+0xc4>)
 8000a64:	f107 040c 	add.w	r4, r7, #12
 8000a68:	461d      	mov	r5, r3
 8000a6a:	6828      	ldr	r0, [r5, #0]
 8000a6c:	6869      	ldr	r1, [r5, #4]
 8000a6e:	68aa      	ldr	r2, [r5, #8]
 8000a70:	68eb      	ldr	r3, [r5, #12]
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	8a2b      	ldrh	r3, [r5, #16]
 8000a76:	7caa      	ldrb	r2, [r5, #18]
 8000a78:	8023      	strh	r3, [r4, #0]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	70a3      	strb	r3, [r4, #2]
 8000a7e:	f107 031f 	add.w	r3, r7, #31
 8000a82:	2251      	movs	r2, #81	; 0x51
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fd8a 	bl	80065a0 <memset>
	if (ret != HAL_OK) {
 8000a8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d01d      	beq.n	8000ad0 <write_DAC2+0x9c>
		sprintf(str_fail, "Error is %d on DAC2; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <write_DAC2+0xc0>)
 8000a96:	f002 fbed 	bl	8003274 <HAL_I2C_GetError>
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	460a      	mov	r2, r1
 8000aac:	4913      	ldr	r1, [pc, #76]	; (8000afc <write_DAC2+0xc8>)
 8000aae:	f005 fd57 	bl	8006560 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 8000ab2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fbaa 	bl	8000210 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <write_DAC2+0xcc>)
 8000aca:	f004 fdce 	bl	800566a <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000ace:	e00d      	b.n	8000aec <write_DAC2+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fb9b 	bl	8000210 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <write_DAC2+0xcc>)
 8000ae8:	f004 fdbf 	bl	800566a <HAL_UART_Transmit>
}
 8000aec:	bf00      	nop
 8000aee:	37d8      	adds	r7, #216	; 0xd8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	08006f3c 	.word	0x08006f3c
 8000afc:	08006f08 	.word	0x08006f08
 8000b00:	200002e4 	.word	0x200002e4

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 ff44 	bl	8001996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f8b1 	bl	8000c74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b12:	f000 f91d 	bl	8000d50 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 fb25 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1a:	f000 fafd 	bl	8001118 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b1e:	f000 facd 	bl	80010bc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000b22:	f000 f9ab 	bl	8000e7c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000b26:	f000 fa99 	bl	800105c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000b2a:	f000 f9e7 	bl	8000efc <MX_SAI1_Init>
  MX_ADC1_Init();
 8000b2e:	f000 f937 	bl	8000da0 <MX_ADC1_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b32:	b672      	cpsid	i
}
 8000b34:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __disable_irq();
//  HAL_ADC_Start_DMA(&hadc1, &adc_get, 2);
  sai_fifo_a[0] = 0x7000U;
 8000b36:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <main+0x130>)
 8000b38:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000b3c:	601a      	str	r2, [r3, #0]
  sai_fifo_b[0] = 0x7000U;
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <main+0x134>)
 8000b40:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000b44:	601a      	str	r2, [r3, #0]
  int error;
  error = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint32_t * )&sai_fifo_a, 16);
 8000b46:	2210      	movs	r2, #16
 8000b48:	493a      	ldr	r1, [pc, #232]	; (8000c34 <main+0x130>)
 8000b4a:	483c      	ldr	r0, [pc, #240]	; (8000c3c <main+0x138>)
 8000b4c:	f004 fb9c 	bl	8005288 <HAL_SAI_Transmit_DMA>
 8000b50:	4603      	mov	r3, r0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  char error_msg[50];
  sprintf(error_msg, "Error is %d on DMA1\r\n", error);
 8000b54:	463b      	mov	r3, r7
 8000b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b58:	4939      	ldr	r1, [pc, #228]	; (8000c40 <main+0x13c>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fd00 	bl	8006560 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000b60:	463b      	mov	r3, r7
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb54 	bl	8000210 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	4834      	ldr	r0, [pc, #208]	; (8000c44 <main+0x140>)
 8000b74:	f004 fd79 	bl	800566a <HAL_UART_Transmit>


  error = HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint32_t * )&sai_fifo_b, 16);
 8000b78:	2210      	movs	r2, #16
 8000b7a:	492f      	ldr	r1, [pc, #188]	; (8000c38 <main+0x134>)
 8000b7c:	4832      	ldr	r0, [pc, #200]	; (8000c48 <main+0x144>)
 8000b7e:	f004 fb83 	bl	8005288 <HAL_SAI_Transmit_DMA>
 8000b82:	4603      	mov	r3, r0
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  sprintf(error_msg, "Error is %d on DMA2\r\n", error);
 8000b86:	463b      	mov	r3, r7
 8000b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b8a:	4930      	ldr	r1, [pc, #192]	; (8000c4c <main+0x148>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fce7 	bl	8006560 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb3b 	bl	8000210 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4639      	mov	r1, r7
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	4827      	ldr	r0, [pc, #156]	; (8000c44 <main+0x140>)
 8000ba6:	f004 fd60 	bl	800566a <HAL_UART_Transmit>

  //HAL_Delay(1000);



  sprintf(error_msg, "UART good!\r\n");
 8000baa:	463b      	mov	r3, r7
 8000bac:	4928      	ldr	r1, [pc, #160]	; (8000c50 <main+0x14c>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fcd6 	bl	8006560 <siprintf>

  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb2a 	bl	8000210 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <main+0x140>)
 8000bc8:	f004 fd4f 	bl	800566a <HAL_UART_Transmit>


  write_DAC1(PLL_CLK_CTRL0, &pll_clk_data);
 8000bcc:	4921      	ldr	r1, [pc, #132]	; (8000c54 <main+0x150>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fec8 	bl	8000964 <write_DAC1>
  write_DAC1(DAC_MUTE1, &mute1_data_DAC1);
 8000bd4:	4920      	ldr	r1, [pc, #128]	; (8000c58 <main+0x154>)
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f7ff fec4 	bl	8000964 <write_DAC1>
  write_DAC1(DAC_MUTE2, &mute2_data_DAC1);
 8000bdc:	491f      	ldr	r1, [pc, #124]	; (8000c5c <main+0x158>)
 8000bde:	200a      	movs	r0, #10
 8000be0:	f7ff fec0 	bl	8000964 <write_DAC1>
  write_DAC1(DAC_CTRL0, &dac_ctrl0);
 8000be4:	491e      	ldr	r1, [pc, #120]	; (8000c60 <main+0x15c>)
 8000be6:	2006      	movs	r0, #6
 8000be8:	f7ff febc 	bl	8000964 <write_DAC1>
  write_DAC1(DAC_CTRL1, &dac_ctrl1);
 8000bec:	491d      	ldr	r1, [pc, #116]	; (8000c64 <main+0x160>)
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f7ff feb8 	bl	8000964 <write_DAC1>
  write_DAC1(DAC_CTRL2, &dac_ctrl2);
 8000bf4:	491c      	ldr	r1, [pc, #112]	; (8000c68 <main+0x164>)
 8000bf6:	2008      	movs	r0, #8
 8000bf8:	f7ff feb4 	bl	8000964 <write_DAC1>

  write_DAC2(PLL_CLK_CTRL0, &pll_clk_data);
 8000bfc:	4915      	ldr	r1, [pc, #84]	; (8000c54 <main+0x150>)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ff18 	bl	8000a34 <write_DAC2>
  write_DAC2(DAC_MUTE1, &mute1_data_DAC2);
 8000c04:	4919      	ldr	r1, [pc, #100]	; (8000c6c <main+0x168>)
 8000c06:	2009      	movs	r0, #9
 8000c08:	f7ff ff14 	bl	8000a34 <write_DAC2>
    write_DAC2(DAC_MUTE2, &mute2_data_DAC2);
 8000c0c:	4918      	ldr	r1, [pc, #96]	; (8000c70 <main+0x16c>)
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f7ff ff10 	bl	8000a34 <write_DAC2>
write_DAC2(DAC_CTRL0, &dac_ctrl0);
 8000c14:	4912      	ldr	r1, [pc, #72]	; (8000c60 <main+0x15c>)
 8000c16:	2006      	movs	r0, #6
 8000c18:	f7ff ff0c 	bl	8000a34 <write_DAC2>
write_DAC2(DAC_CTRL1, &dac_ctrl1);
 8000c1c:	4911      	ldr	r1, [pc, #68]	; (8000c64 <main+0x160>)
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f7ff ff08 	bl	8000a34 <write_DAC2>
write_DAC2(DAC_CTRL2, &dac_ctrl2);
 8000c24:	4910      	ldr	r1, [pc, #64]	; (8000c68 <main+0x164>)
 8000c26:	2008      	movs	r0, #8
 8000c28:	f7ff ff04 	bl	8000a34 <write_DAC2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c2c:	b662      	cpsie	i
}
 8000c2e:	bf00      	nop

  __enable_irq();



  while (1)
 8000c30:	e7fe      	b.n	8000c30 <main+0x12c>
 8000c32:	bf00      	nop
 8000c34:	20000878 	.word	0x20000878
 8000c38:	200008b8 	.word	0x200008b8
 8000c3c:	2000011c 	.word	0x2000011c
 8000c40:	08006f50 	.word	0x08006f50
 8000c44:	200002e4 	.word	0x200002e4
 8000c48:	200001a0 	.word	0x200001a0
 8000c4c:	08006f68 	.word	0x08006f68
 8000c50:	08006f80 	.word	0x08006f80
 8000c54:	20000001 	.word	0x20000001
 8000c58:	20000cb8 	.word	0x20000cb8
 8000c5c:	20000cb9 	.word	0x20000cb9
 8000c60:	20000002 	.word	0x20000002
 8000c64:	20000003 	.word	0x20000003
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000cba 	.word	0x20000cba
 8000c70:	20000cbb 	.word	0x20000cbb

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 fc8c 	bl	80065a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c98:	f002 ff1e 	bl	8003ad8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <SystemClock_Config+0xd4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <SystemClock_Config+0xd4>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <SystemClock_Config+0xd4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xd8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a24      	ldr	r2, [pc, #144]	; (8000d4c <SystemClock_Config+0xd8>)
 8000cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <SystemClock_Config+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ce4:	23d8      	movs	r3, #216	; 0xd8
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cec:	2309      	movs	r3, #9
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 ff4f 	bl	8003b98 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d00:	f000 faea 	bl	80012d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d04:	f002 fef8 	bl	8003af8 <HAL_PWREx_EnableOverDrive>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d0e:	f000 fae3 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2107      	movs	r1, #7
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f9d5 	bl	80040e0 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d3c:	f000 facc 	bl	80012d8 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3750      	adds	r7, #80	; 0x50
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0a2      	sub	sp, #136	; 0x88
 8000d54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2284      	movs	r2, #132	; 0x84
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fc1f 	bl	80065a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000d62:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000d66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d68:	2332      	movs	r3, #50	; 0x32
 8000d6a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000d80:	2300      	movs	r3, #0
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fbd0 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000d92:	f000 faa1 	bl	80012d8 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3788      	adds	r7, #136	; 0x88
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <MX_ADC1_Init+0xd4>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <MX_ADC1_Init+0xd8>)
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	481b      	ldr	r0, [pc, #108]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000e02:	f000 fe49 	bl	8001a98 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e0c:	f000 fa64 	bl	80012d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000e22:	f000 ffe3 	bl	8001dec <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f000 fa54 	bl	80012d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e30:	2303      	movs	r3, #3
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000e3e:	f000 ffd5 	bl	8001dec <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e48:	f000 fa46 	bl	80012d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_ADC1_Init+0xd0>)
 8000e5a:	f000 ffc7 	bl	8001dec <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e64:	f000 fa38 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000080 	.word	0x20000080
 8000e74:	40012000 	.word	0x40012000
 8000e78:	0f000001 	.word	0x0f000001

08000e7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C2_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x80102AFF;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C2_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000eb8:	f002 f838 	bl	8002f2c <HAL_I2C_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ec2:	f000 fa09 	bl	80012d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000eca:	f002 fc25 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 fa00 	bl	80012d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_I2C2_Init+0x74>)
 8000edc:	f002 fc67 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f9f7 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000c8 	.word	0x200000c8
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	80102aff 	.word	0x80102aff

08000efc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f00:	4b52      	ldr	r3, [pc, #328]	; (800104c <MX_SAI1_Init+0x150>)
 8000f02:	4a53      	ldr	r2, [pc, #332]	; (8001050 <MX_SAI1_Init+0x154>)
 8000f04:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <MX_SAI1_Init+0x150>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f0c:	4b4f      	ldr	r3, [pc, #316]	; (800104c <MX_SAI1_Init+0x150>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <MX_SAI1_Init+0x150>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <MX_SAI1_Init+0x150>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000f1e:	4b4b      	ldr	r3, [pc, #300]	; (800104c <MX_SAI1_Init+0x150>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <MX_SAI1_Init+0x150>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <MX_SAI1_Init+0x150>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <MX_SAI1_Init+0x150>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <MX_SAI1_Init+0x150>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <MX_SAI1_Init+0x150>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 2;
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <MX_SAI1_Init+0x150>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <MX_SAI1_Init+0x150>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <MX_SAI1_Init+0x150>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f54:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_SAI1_Init+0x150>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <MX_SAI1_Init+0x150>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_SAI1_Init+0x150>)
 8000f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_SAI1_Init+0x150>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_SAI1_Init+0x150>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_SAI1_Init+0x150>)
 8000f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_SAI1_Init+0x150>)
 8000f7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f82:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <MX_SAI1_Init+0x150>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_SAI1_Init+0x150>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <MX_SAI1_Init+0x150>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <MX_SAI1_Init+0x150>)
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f9e:	482b      	ldr	r0, [pc, #172]	; (800104c <MX_SAI1_Init+0x150>)
 8000fa0:	f003 fff4 	bl	8004f8c <HAL_SAI_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_SAI1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f000 f995 	bl	80012d8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fb0:	4a29      	ldr	r2, [pc, #164]	; (8001058 <MX_SAI1_Init+0x15c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_SAI1_Init+0x158>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SAI1_Init+0x158>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_SAI1_Init+0x158>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_SAI1_Init+0x158>)
 8000ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SAI1_Init+0x158>)
 8001006:	2201      	movs	r2, #1
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_SAI1_Init+0x158>)
 800100c:	2200      	movs	r2, #0
 800100e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_SAI1_Init+0x158>)
 8001012:	2200      	movs	r2, #0
 8001014:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SAI1_Init+0x158>)
 8001018:	2200      	movs	r2, #0
 800101a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_SAI1_Init+0x158>)
 800101e:	2200      	movs	r2, #0
 8001020:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SAI1_Init+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SAI1_Init+0x158>)
 800102a:	2210      	movs	r2, #16
 800102c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SAI1_Init+0x158>)
 8001030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001034:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_SAI1_Init+0x158>)
 8001038:	f003 ffa8 	bl	8004f8c <HAL_SAI_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_SAI1_Init+0x14a>
  {
    Error_Handler();
 8001042:	f000 f949 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000011c 	.word	0x2000011c
 8001050:	40015804 	.word	0x40015804
 8001054:	200001a0 	.word	0x200001a0
 8001058:	40015824 	.word	0x40015824

0800105c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <MX_USART3_UART_Init+0x5c>)
 8001064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 80010a0:	f004 fa95 	bl	80055ce <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010aa:	f000 f915 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002e4 	.word	0x200002e4
 80010b8:	40004800 	.word	0x40004800

080010bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ca:	2206      	movs	r2, #6
 80010cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010dc:	2202      	movs	r2, #2
 80010de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001100:	f002 fba1 	bl	8003846 <HAL_PCD_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 f8e5 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000036c 	.word	0x2000036c

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_DMA_Init+0x48>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <MX_DMA_Init+0x48>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_DMA_Init+0x48>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2039      	movs	r0, #57	; 0x39
 800113c:	f001 f981 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001140:	2039      	movs	r0, #57	; 0x39
 8001142:	f001 f99a 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	203c      	movs	r0, #60	; 0x3c
 800114c:	f001 f979 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001150:	203c      	movs	r0, #60	; 0x3c
 8001152:	f001 f992 	bl	800247a <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <MX_GPIO_Init+0x168>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a53      	ldr	r2, [pc, #332]	; (80012cc <MX_GPIO_Init+0x168>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b51      	ldr	r3, [pc, #324]	; (80012cc <MX_GPIO_Init+0x168>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <MX_GPIO_Init+0x168>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <MX_GPIO_Init+0x168>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <MX_GPIO_Init+0x168>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <MX_GPIO_Init+0x168>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a47      	ldr	r2, [pc, #284]	; (80012cc <MX_GPIO_Init+0x168>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <MX_GPIO_Init+0x168>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <MX_GPIO_Init+0x168>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a41      	ldr	r2, [pc, #260]	; (80012cc <MX_GPIO_Init+0x168>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <MX_GPIO_Init+0x168>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <MX_GPIO_Init+0x168>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <MX_GPIO_Init+0x168>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <MX_GPIO_Init+0x168>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <MX_GPIO_Init+0x168>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a35      	ldr	r2, [pc, #212]	; (80012cc <MX_GPIO_Init+0x168>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_GPIO_Init+0x168>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_GPIO_Init+0x168>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <MX_GPIO_Init+0x168>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <MX_GPIO_Init+0x168>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_GPIO_Init+0x168>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <MX_GPIO_Init+0x168>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <MX_GPIO_Init+0x168>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001240:	4823      	ldr	r0, [pc, #140]	; (80012d0 <MX_GPIO_Init+0x16c>)
 8001242:	f001 fe59 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x170>)
 800124c:	f001 fe54 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001262:	230b      	movs	r3, #11
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_GPIO_Init+0x16c>)
 800126e:	f001 fc97 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001278:	2311      	movs	r3, #17
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_GPIO_Init+0x16c>)
 800128c:	f001 fc88 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <MX_GPIO_Init+0x170>)
 80012a8:	f001 fc7a 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_GPIO_Init+0x170>)
 80012c0:	f001 fc6e 	bl	8002ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40021800 	.word	0x40021800

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b09a      	sub	sp, #104	; 0x68
 80012dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012de:	b672      	cpsid	i
}
 80012e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <Error_Handler+0x48>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	461d      	mov	r5, r3
 80012e8:	6828      	ldr	r0, [r5, #0]
 80012ea:	6869      	ldr	r1, [r5, #4]
 80012ec:	68aa      	ldr	r2, [r5, #8]
 80012ee:	68eb      	ldr	r3, [r5, #12]
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	7c2b      	ldrb	r3, [r5, #16]
 80012f4:	7023      	strb	r3, [r4, #0]
 80012f6:	f107 0315 	add.w	r3, r7, #21
 80012fa:	2253      	movs	r2, #83	; 0x53
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 f94e 	bl	80065a0 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff82 	bl	8000210 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	1d39      	adds	r1, r7, #4
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <Error_Handler+0x4c>)
 8001318:	f004 f9a7 	bl	800566a <HAL_UART_Transmit>

  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x44>
 800131e:	bf00      	nop
 8001320:	08006f90 	.word	0x08006f90
 8001324:	200002e4 	.word	0x200002e4

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x44>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x44>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x44>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x44>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x44>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x44>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_ADC_MspInit+0x74>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d123      	bne.n	80013da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_ADC_MspInit+0x78>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80013c2:	2319      	movs	r3, #25
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_ADC_MspInit+0x7c>)
 80013d6:	f001 fbe3 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012000 	.word	0x40012000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0aa      	sub	sp, #168	; 0xa8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2284      	movs	r2, #132	; 0x84
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f005 f8c5 	bl	80065a0 <memset>
  if(hi2c->Instance==I2C2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_I2C_MspInit+0xb0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d13b      	bne.n	8001498 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f87c 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff ff4d 	bl	80012d8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800146e:	2304      	movs	r3, #4
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_I2C_MspInit+0xb8>)
 800147c:	f001 fb90 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 8001486:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0xb4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	37a8      	adds	r7, #168	; 0xa8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005800 	.word	0x40005800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021400 	.word	0x40021400

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0aa      	sub	sp, #168	; 0xa8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	2284      	movs	r2, #132	; 0x84
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 f867 	bl	80065a0 <memset>
  if(huart->Instance==USART3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_UART_MspInit+0xb4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d13c      	bne.n	8001556 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 f81e 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014f6:	f7ff feef 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_UART_MspInit+0xb8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_UART_MspInit+0xb8>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_UART_MspInit+0xb8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_UART_MspInit+0xb8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_UART_MspInit+0xb8>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0xb8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001544:	2307      	movs	r3, #7
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_MspInit+0xbc>)
 8001552:	f001 fb25 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	37a8      	adds	r7, #168	; 0xa8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004800 	.word	0x40004800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020c00 	.word	0x40020c00

0800156c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	2284      	movs	r2, #132	; 0x84
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f005 f807 	bl	80065a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159a:	d159      	bne.n	8001650 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800159c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 ffbd 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80015b8:	f7ff fe8e 	bl	80012d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_PCD_MspInit+0xec>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a25      	ldr	r2, [pc, #148]	; (8001658 <HAL_PCD_MspInit+0xec>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_PCD_MspInit+0xec>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ee:	230a      	movs	r3, #10
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f8:	4619      	mov	r1, r3
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <HAL_PCD_MspInit+0xf0>)
 80015fc:	f001 fad0 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001618:	4619      	mov	r1, r3
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <HAL_PCD_MspInit+0xf0>)
 800161c:	f001 fac0 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_PCD_MspInit+0xec>)
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_PCD_MspInit+0xec>)
 8001626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162a:	6353      	str	r3, [r2, #52]	; 0x34
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_PCD_MspInit+0xec>)
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_PCD_MspInit+0xec>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_PCD_MspInit+0xec>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6453      	str	r3, [r2, #68]	; 0x44
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_PCD_MspInit+0xec>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	37b0      	adds	r7, #176	; 0xb0
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a69      	ldr	r2, [pc, #420]	; (8001814 <HAL_SAI_MspInit+0x1b4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d16b      	bne.n	800174a <HAL_SAI_MspInit+0xea>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001672:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10b      	bne.n	8001692 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800167a:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a67      	ldr	r2, [pc, #412]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a5f      	ldr	r2, [pc, #380]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 800169a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800169c:	2304      	movs	r3, #4
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016ac:	2306      	movs	r3, #6
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	485a      	ldr	r0, [pc, #360]	; (8001820 <HAL_SAI_MspInit+0x1c0>)
 80016b8:	f001 fa72 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016bc:	2370      	movs	r3, #112	; 0x70
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016cc:	2306      	movs	r3, #6
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4852      	ldr	r0, [pc, #328]	; (8001820 <HAL_SAI_MspInit+0x1c0>)
 80016d8:	f001 fa62 	bl	8002ba0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016de:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_SAI_MspInit+0x1c8>)
 80016e0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ee:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fa:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 80016fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001702:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 800170e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001712:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001716:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800171a:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001722:	4840      	ldr	r0, [pc, #256]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001724:	f000 fec4 	bl	80024b0 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_SAI_MspInit+0xd2>
    {
      Error_Handler();
 800172e:	f7ff fdd3 	bl	80012d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001736:	671a      	str	r2, [r3, #112]	; 0x70
 8001738:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a38      	ldr	r2, [pc, #224]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c
 8001744:	4a37      	ldr	r2, [pc, #220]	; (8001824 <HAL_SAI_MspInit+0x1c4>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_SAI_MspInit+0x1cc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d15b      	bne.n	800180c <HAL_SAI_MspInit+0x1ac>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10b      	bne.n	8001774 <HAL_SAI_MspInit+0x114>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 8001762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001766:	6453      	str	r3, [r2, #68]	; 0x44
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_SAI_MspInit+0x1bc>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_SAI_MspInit+0x1b8>)
 800177c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800177e:	2308      	movs	r3, #8
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800178e:	2306      	movs	r3, #6
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <HAL_SAI_MspInit+0x1c0>)
 800179a:	f001 fa01 	bl	8002ba0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017a0:	4a24      	ldr	r2, [pc, #144]	; (8001834 <HAL_SAI_MspInit+0x1d4>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017e6:	f000 fe63 	bl	80024b0 <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_SAI_MspInit+0x194>
    {
      Error_Handler();
 80017f0:	f7ff fd72 	bl	80012d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017f8:	671a      	str	r2, [r3, #112]	; 0x70
 80017fa:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 8001804:	66da      	str	r2, [r3, #108]	; 0x6c
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_SAI_MspInit+0x1d0>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40015804 	.word	0x40015804
 8001818:	20000cc8 	.word	0x20000cc8
 800181c:	40023800 	.word	0x40023800
 8001820:	40021000 	.word	0x40021000
 8001824:	20000224 	.word	0x20000224
 8001828:	40026428 	.word	0x40026428
 800182c:	40015824 	.word	0x40015824
 8001830:	20000284 	.word	0x20000284
 8001834:	40026470 	.word	0x40026470

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f8c4 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA2_Stream1_IRQHandler+0x10>)
 8001892:	f000 ff1b 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000224 	.word	0x20000224

080018a0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA2_Stream4_IRQHandler+0x10>)
 80018a6:	f000 ff11 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000284 	.word	0x20000284

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f004 fe64 	bl	80065b0 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20050000 	.word	0x20050000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000ccc 	.word	0x20000ccc
 800191c:	20000e20 	.word	0x20000e20

08001920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f004 fe23 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff f8c5 	bl	8000b04 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001988:	08007008 	.word	0x08007008
  ldr r2, =_sbss
 800198c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001990:	20000e1c 	.word	0x20000e1c

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	2003      	movs	r0, #3
 800199c:	f000 fd46 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f805 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a6:	f7ff fcbf 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fd61 	bl	8002496 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 fd29 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	2000000c 	.word	0x2000000c

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010
 8001a34:	20000cd0 	.word	0x20000cd0

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000cd0 	.word	0x20000cd0

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000010 	.word	0x20000010

08001a98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e031      	b.n	8001b12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fc5a 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_ADC_Init+0x84>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fad6 	bl	8002098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
 8001b02:	e001      	b.n	8001b08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	ffffeefd 	.word	0xffffeefd

08001b20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_Start+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0ad      	b.n	8001c96 <HAL_ADC_Start+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d018      	beq.n	8001b82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_ADC_Start+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a50      	ldr	r2, [pc, #320]	; (8001ca8 <HAL_ADC_Start+0x188>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9a      	lsrs	r2, r3, #18
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d175      	bne.n	8001c7c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_ADC_Start+0x18c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f023 0206 	bic.w	r2, r3, #6
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_ADC_Start+0x190>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d143      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e03a      	b.n	8001c94 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_ADC_Start+0x194>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10e      	bne.n	8001c46 <HAL_ADC_Start+0x126>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c44:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_ADC_Start+0x190>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d120      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_ADC_Start+0x198>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_ADC_Start+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00b      	b.n	8001c94 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	fffff8fe 	.word	0xfffff8fe
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd8:	d113      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e063      	b.n	8001dca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d02:	f7ff fe99 	bl	8001a38 <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d08:	e021      	b.n	8001d4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d01d      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x6c>
 8001d18:	f7ff fe8e 	bl	8001a38 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d212      	bcs.n	8001d4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d00b      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f043 0204 	orr.w	r2, r3, #4
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e03d      	b.n	8001dca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d1d6      	bne.n	8001d0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0212 	mvn.w	r2, #18
 8001d64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d123      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11f      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1c>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e136      	b.n	8002076 <HAL_ADC_ConfigChannel+0x28a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d93a      	bls.n	8001e8e <HAL_ADC_ConfigChannel+0xa2>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e20:	d035      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68d9      	ldr	r1, [r3, #12]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	3b1e      	subs	r3, #30
 8001e38:	2207      	movs	r2, #7
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a8d      	ldr	r2, [pc, #564]	; (8002084 <HAL_ADC_ConfigChannel+0x298>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d10a      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e66:	e035      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4403      	add	r3, r0
 8001e80:	3b1e      	subs	r3, #30
 8001e82:	409a      	lsls	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e8c:	e022      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6919      	ldr	r1, [r3, #16]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	400a      	ands	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6919      	ldr	r1, [r3, #16]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4403      	add	r3, r0
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	d824      	bhi.n	8001f26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b05      	subs	r3, #5
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b05      	subs	r3, #5
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
 8001f24:	e04c      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d824      	bhi.n	8001f78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b23      	subs	r3, #35	; 0x23
 8001f40:	221f      	movs	r2, #31
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b23      	subs	r3, #35	; 0x23
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
 8001f76:	e023      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b41      	subs	r3, #65	; 0x41
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43da      	mvns	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	400a      	ands	r2, r1
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b41      	subs	r3, #65	; 0x41
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_ADC_ConfigChannel+0x29c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_ADC_ConfigChannel+0x29c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10f      	bne.n	800200a <HAL_ADC_ConfigChannel+0x21e>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d10b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ffc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8002004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002008:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_ADC_ConfigChannel+0x29c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d12b      	bne.n	800206c <HAL_ADC_ConfigChannel+0x280>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_ADC_ConfigChannel+0x298>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x23a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b11      	cmp	r3, #17
 8002024:	d122      	bne.n	800206c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 800202c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002030:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_ADC_ConfigChannel+0x2a0>)
 8002038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800203c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_ADC_ConfigChannel+0x298>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_ADC_ConfigChannel+0x2a4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_ADC_ConfigChannel+0x2a8>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9a      	lsrs	r2, r3, #18
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800205e:	e002      	b.n	8002066 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	10000012 	.word	0x10000012
 8002088:	40012000 	.word	0x40012000
 800208c:	40012300 	.word	0x40012300
 8002090:	20000008 	.word	0x20000008
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020a0:	4b78      	ldr	r3, [pc, #480]	; (8002284 <ADC_Init+0x1ec>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a77      	ldr	r2, [pc, #476]	; (8002284 <ADC_Init+0x1ec>)
 80020a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <ADC_Init+0x1ec>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4973      	ldr	r1, [pc, #460]	; (8002284 <ADC_Init+0x1ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	021a      	lsls	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	4a58      	ldr	r2, [pc, #352]	; (8002288 <ADC_Init+0x1f0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e00f      	b.n	8002192 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0202 	bic.w	r2, r2, #2
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	035a      	lsls	r2, r3, #13
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	051a      	lsls	r2, r3, #20
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224a:	025a      	lsls	r2, r3, #9
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40012300 	.word	0x40012300
 8002288:	0f000001 	.word	0x0f000001

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <__NVIC_SetPriorityGrouping+0x40>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x40>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00
 80022d0:	05fa0000 	.word	0x05fa0000

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff3e 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fabc 	bl	8001a38 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e099      	b.n	8002600 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ec:	e00f      	b.n	800250e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ee:	f7ff faa3 	bl	8001a38 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d908      	bls.n	800250e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e078      	b.n	8002600 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e8      	bne.n	80024ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_DMA_Init+0x158>)
 8002528:	4013      	ands	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4313      	orrs	r3, r2
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d117      	bne.n	80025d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fa77 	bl	8002aa8 <DMA_CheckFifoParam>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ce:	2301      	movs	r3, #1
 80025d0:	e016      	b.n	8002600 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa2e 	bl	8002a3c <DMA_CalcBaseAndBitshift>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	223f      	movs	r2, #63	; 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	f010803f 	.word	0xf010803f

0800260c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Start_IT+0x26>
 800262e:	2302      	movs	r3, #2
 8002630:	e048      	b.n	80026c4 <HAL_DMA_Start_IT+0xb8>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d137      	bne.n	80026b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f9c0 	bl	80029e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0216 	orr.w	r2, r2, #22
 800267a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e005      	b.n	80026c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026d8:	4b8e      	ldr	r3, [pc, #568]	; (8002914 <HAL_DMA_IRQHandler+0x248>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_DMA_IRQHandler+0x24c>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2208      	movs	r2, #8
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	2208      	movs	r2, #8
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2204      	movs	r2, #4
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2204      	movs	r2, #4
 8002792:	409a      	lsls	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0204 	orr.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2210      	movs	r2, #16
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03c      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2210      	movs	r2, #16
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d018      	beq.n	800280e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d024      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e01f      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
 800280c:	e016      	b.n	800283c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0208 	bic.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2220      	movs	r2, #32
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 808f 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8087 	beq.w	800296c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2220      	movs	r2, #32
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b05      	cmp	r3, #5
 8002874:	d136      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0216 	bic.w	r2, r2, #22
 8002884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x1da>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	223f      	movs	r2, #63	; 0x3f
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d07e      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
        }
        return;
 80028e2:	e079      	b.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	2b00      	cmp	r3, #0
 8002906:	d031      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e02c      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
 8002912:	bf00      	nop
 8002914:	20000008 	.word	0x20000008
 8002918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d023      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e01e      	b.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0210 	bic.w	r2, r2, #16
 800294a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d032      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2205      	movs	r2, #5
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d307      	bcc.n	80029b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f2      	bne.n	8002998 <HAL_DMA_IRQHandler+0x2cc>
 80029b2:	e000      	b.n	80029b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x30e>
        return;
 80029d8:	bf00      	nop
    }
  }
}
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d108      	bne.n	8002a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a1e:	e007      	b.n	8002a30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3b10      	subs	r3, #16
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <DMA_CalcBaseAndBitshift+0x60>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d908      	bls.n	8002a7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7a:	e006      	b.n	8002a8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	aaaaaaab 	.word	0xaaaaaaab
 8002aa0:	08006fbc 	.word	0x08006fbc
 8002aa4:	fffffc00 	.word	0xfffffc00

08002aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d856      	bhi.n	8002b76 <DMA_CheckFifoParam+0xce>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <DMA_CheckFifoParam+0x28>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002ae1 	.word	0x08002ae1
 8002adc:	08002b77 	.word	0x08002b77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d046      	beq.n	8002b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e043      	b.n	8002b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afa:	d140      	bne.n	8002b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e03d      	b.n	8002b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	d121      	bne.n	8002b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d837      	bhi.n	8002b82 <DMA_CheckFifoParam+0xda>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x70>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b2f 	.word	0x08002b2f
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002b41 	.word	0x08002b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e030      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d025      	beq.n	8002b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e022      	b.n	8002b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b48:	d11f      	bne.n	8002b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b4e:	e01c      	b.n	8002b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d903      	bls.n	8002b5e <DMA_CheckFifoParam+0xb6>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d003      	beq.n	8002b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b5c:	e018      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      break;
 8002b62:	e015      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e00b      	b.n	8002b8e <DMA_CheckFifoParam+0xe6>
      break;
 8002b76:	bf00      	nop
 8002b78:	e00a      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e008      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e006      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e004      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e175      	b.n	8002eac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f040 8164 	bne.w	8002ea6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d005      	beq.n	8002bf6 <HAL_GPIO_Init+0x56>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d130      	bne.n	8002c58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d017      	beq.n	8002c94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80be 	beq.w	8002ea6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d42:	4a61      	ldr	r2, [pc, #388]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_GPIO_Init+0x32c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d037      	beq.n	8002dde <HAL_GPIO_Init+0x23e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_GPIO_Init+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0x23a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a56      	ldr	r2, [pc, #344]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x236>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_GPIO_Init+0x338>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x232>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a54      	ldr	r2, [pc, #336]	; (8002edc <HAL_GPIO_Init+0x33c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x22e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_GPIO_Init+0x340>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x22a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_GPIO_Init+0x344>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_GPIO_Init+0x348>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x222>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_GPIO_Init+0x34c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x21e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <HAL_GPIO_Init+0x350>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x21a>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e012      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e010      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e00e      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00c      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e00a      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f ae86 	bls.w	8002bc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40021c00 	.word	0x40021c00
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40022400 	.word	0x40022400
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fa4c 	bl	80013f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e006      	b.n	8002fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d104      	bne.n	8002fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_I2C_Init+0x11c>)
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	02008000 	.word	0x02008000

0800304c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 80f9 	bne.w	8003266 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_I2C_Mem_Write+0x34>
 800307a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0ed      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_I2C_Mem_Write+0x4e>
 8003096:	2302      	movs	r3, #2
 8003098:	e0e6      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a2:	f7fe fcc9 	bl	8001a38 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2319      	movs	r3, #25
 80030ae:	2201      	movs	r2, #1
 80030b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f961 	bl	800337c <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d1      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2221      	movs	r2, #33	; 0x21
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ec:	88f8      	ldrh	r0, [r7, #6]
 80030ee:	893a      	ldrh	r2, [r7, #8]
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	4603      	mov	r3, r0
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f8c5 	bl	800328c <I2C_RequestMemoryWrite>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0a9      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fabd 	bl	80036b4 <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 faac 	bl	80036b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f94b 	bl	80033fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e07b      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d034      	beq.n	8003214 <HAL_I2C_Mem_Write+0x1c8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f8dd 	bl	800337c <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e04d      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d90e      	bls.n	80031f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fa61 	bl	80036b4 <I2C_TransferConfig>
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	b2da      	uxtb	r2, r3
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa50 	bl	80036b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d19e      	bne.n	800315c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f92a 	bl	800347c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01a      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2220      	movs	r2, #32
 8003238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_I2C_Mem_Write+0x224>)
 8003246:	400b      	ands	r3, r1
 8003248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	461a      	mov	r2, r3
 800329a:	4603      	mov	r3, r0
 800329c:	817b      	strh	r3, [r7, #10]
 800329e:	460b      	mov	r3, r1
 80032a0:	813b      	strh	r3, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <I2C_RequestMemoryWrite+0xa4>)
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f9fd 	bl	80036b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f89c 	bl	80033fc <I2C_WaitOnTXISFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e02c      	b.n	8003328 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
 80032de:	e015      	b.n	800330c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032e0:	893b      	ldrh	r3, [r7, #8]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	69b9      	ldr	r1, [r7, #24]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f882 	bl	80033fc <I2C_WaitOnTXISFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e012      	b.n	8003328 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003302:	893b      	ldrh	r3, [r7, #8]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2200      	movs	r2, #0
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f830 	bl	800337c <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	80002000 	.word	0x80002000

08003334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d103      	bne.n	8003352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d007      	beq.n	8003370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	619a      	str	r2, [r3, #24]
  }
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800338c:	e022      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d01e      	beq.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fb4f 	bl	8001a38 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e00f      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d0cd      	beq.n	800338e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003408:	e02c      	b.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f870 	bl	80034f4 <I2C_IsErrorOccurred>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e02a      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d01e      	beq.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe fb07 	bl	8001a38 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d1cb      	bne.n	800340a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	e028      	b.n	80034dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f830 	bl	80034f4 <I2C_IsErrorOccurred>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e026      	b.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe facb 	bl	8001a38 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d113      	bne.n	80034dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e007      	b.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d1cf      	bne.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d068      	beq.n	80035f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2210      	movs	r2, #16
 8003526:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003528:	e049      	b.n	80035be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d045      	beq.n	80035be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fa81 	bl	8001a38 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_IsErrorOccurred+0x54>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d13a      	bne.n	80035be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800355a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d121      	bne.n	80035b0 <I2C_IsErrorOccurred+0xbc>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003572:	d01d      	beq.n	80035b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b20      	cmp	r3, #32
 8003578:	d01a      	beq.n	80035b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003588:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800358a:	f7fe fa55 	bl	8001a38 <HAL_GetTick>
 800358e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003590:	e00e      	b.n	80035b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003592:	f7fe fa51 	bl	8001a38 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b19      	cmp	r3, #25
 800359e:	d907      	bls.n	80035b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f043 0320 	orr.w	r3, r3, #32
 80035a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035ae:	e006      	b.n	80035be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d1e9      	bne.n	8003592 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d003      	beq.n	80035d4 <I2C_IsErrorOccurred+0xe0>
 80035cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0aa      	beq.n	800352a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2220      	movs	r2, #32
 80035e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00b      	beq.n	8003660 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01c      	beq.n	80036a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff fe63 	bl	8003334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <I2C_IsErrorOccurred+0x1bc>)
 800367a:	400b      	ands	r3, r1
 800367c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	431a      	orrs	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3728      	adds	r7, #40	; 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	fe00e800 	.word	0xfe00e800

080036b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	4613      	mov	r3, r2
 80036c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036cc:	7a7b      	ldrb	r3, [r7, #9]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	4313      	orrs	r3, r2
 80036de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	0d5b      	lsrs	r3, r3, #21
 80036ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <I2C_TransferConfig+0x60>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	43db      	mvns	r3, r3
 80036f8:	ea02 0103 	and.w	r1, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	03ff63ff 	.word	0x03ff63ff

08003718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d138      	bne.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003738:	2302      	movs	r3, #2
 800373a:	e032      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d139      	bne.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e033      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003848:	b08f      	sub	sp, #60	; 0x3c
 800384a:	af0a      	add	r7, sp, #40	; 0x28
 800384c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e116      	b.n	8003a86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fe7a 	bl	800156c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2203      	movs	r2, #3
 800387c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fbc6 	bl	8006028 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	687e      	ldr	r6, [r7, #4]
 80038a4:	466d      	mov	r5, sp
 80038a6:	f106 0410 	add.w	r4, r6, #16
 80038aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80038ba:	1d33      	adds	r3, r6, #4
 80038bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f002 fb5a 	bl	8005f78 <USB_CoreInit>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0d7      	b.n	8003a86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fbb4 	bl	800604a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e04a      	b.n	800397e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	333d      	adds	r3, #61	; 0x3d
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	333c      	adds	r3, #60	; 0x3c
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	b298      	uxth	r0, r3
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3344      	adds	r3, #68	; 0x44
 8003924:	4602      	mov	r2, r0
 8003926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	3340      	adds	r3, #64	; 0x40
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3348      	adds	r3, #72	; 0x48
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	334c      	adds	r3, #76	; 0x4c
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3354      	adds	r3, #84	; 0x54
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	3301      	adds	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3af      	bcc.n	80038e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
 800398c:	e044      	b.n	8003a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	3301      	adds	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d3b5      	bcc.n	800398e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	687e      	ldr	r6, [r7, #4]
 8003a2a:	466d      	mov	r5, sp
 8003a2c:	f106 0410 	add.w	r4, r6, #16
 8003a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a40:	1d33      	adds	r3, r6, #4
 8003a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f002 fb4d 	bl	80060e4 <USB_DevInit>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e014      	b.n	8003a86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f80b 	bl	8003a90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fd0b 	bl	800649a <USB_DevDisconnect>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	10000003 	.word	0x10000003

08003ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b26:	f7fd ff87 	bl	8001a38 <HAL_GetTick>
 8003b2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b2c:	e009      	b.n	8003b42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b2e:	f7fd ff83 	bl	8001a38 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3c:	d901      	bls.n	8003b42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e022      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5c:	f7fd ff6c 	bl	8001a38 <HAL_GetTick>
 8003b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b62:	e009      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b64:	f7fd ff68 	bl	8001a38 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b72:	d901      	bls.n	8003b78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e007      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b84:	d1ee      	bne.n	8003b64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40007000 	.word	0x40007000

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e291      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8087 	beq.w	8003cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	4b96      	ldr	r3, [pc, #600]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d00c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc8:	4b93      	ldr	r3, [pc, #588]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d112      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62>
 8003bd4:	4b90      	ldr	r3, [pc, #576]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b8d      	ldr	r3, [pc, #564]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x130>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d168      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e26b      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x7a>
 8003c04:	4b84      	ldr	r3, [pc, #528]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a83      	ldr	r2, [pc, #524]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02e      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x9c>
 8003c1a:	4b7f      	ldr	r3, [pc, #508]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7e      	ldr	r2, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b7c      	ldr	r3, [pc, #496]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7b      	ldr	r2, [pc, #492]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a72      	ldr	r2, [pc, #456]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6e      	ldr	r2, [pc, #440]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fede 	bl	8001a38 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd feda 	bl	8001a38 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e21f      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd feca 	bl	8001a38 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fec6 	bl	8001a38 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e20b      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x110>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d069      	beq.n	8003daa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x190>
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1df      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	493d      	ldr	r1, [pc, #244]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e040      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d023      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fe7c 	bl	8001a38 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fd fe78 	bl	8001a38 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1bd      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4929      	ldr	r1, [pc, #164]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
 8003d76:	e018      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd fe58 	bl	8001a38 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fd fe54 	bl	8001a38 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e199      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d038      	beq.n	8003e28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d019      	beq.n	8003df2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fe35 	bl	8001a38 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fd fe31 	bl	8001a38 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e176      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x23a>
 8003df0:	e01a      	b.n	8003e28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fe1b 	bl	8001a38 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd fe17 	bl	8001a38 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d903      	bls.n	8003e1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e15c      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
 8003e18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b91      	ldr	r3, [pc, #580]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ee      	bne.n	8003e06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a4 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fd fddf 	bl	8001a38 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fd fddb 	bl	8001a38 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e120      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x31a>
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x33c>
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a69      	ldr	r2, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x35e>
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a60      	ldr	r2, [pc, #384]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a5a      	ldr	r2, [pc, #360]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fd8f 	bl	8001a38 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fd8b 	bl	8001a38 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0ce      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x386>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd fd79 	bl	8001a38 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd fd75 	bl	8001a38 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a4 	beq.w	80040d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d06b      	beq.n	800406c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d149      	bne.n	8004030 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a30      	ldr	r2, [pc, #192]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fd46 	bl	8001a38 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fd42 	bl	8001a38 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e087      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fd16 	bl	8001a38 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fd12 	bl	8001a38 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e057      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x478>
 800402e:	e04f      	b.n	80040d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fcfc 	bl	8001a38 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fcf8 	bl	8001a38 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e03d      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x4ac>
 8004062:	e035      	b.n	80040d0 <HAL_RCC_OscConfig+0x538>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <HAL_RCC_OscConfig+0x544>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d028      	beq.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d121      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d11a      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d111      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	3b01      	subs	r3, #1
 80040b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d0      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4965      	ldr	r1, [pc, #404]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d040      	beq.n	8004204 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e073      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4936      	ldr	r1, [pc, #216]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fc30 	bl	8001a38 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fd fc2c 	bl	8001a38 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e053      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d210      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4922      	ldr	r1, [pc, #136]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1cc>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1d0>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fb8c 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	08006fa4 	.word	0x08006fa4
 80042b0:	20000008 	.word	0x20000008
 80042b4:	2000000c 	.word	0x2000000c

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b094      	sub	sp, #80	; 0x50
 80042be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	647b      	str	r3, [r7, #68]	; 0x44
 80042c4:	2300      	movs	r3, #0
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	2300      	movs	r3, #0
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d0:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d00d      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x40>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	f200 80e1 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x34>
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ea:	e0db      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80042ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f0:	e0db      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f6:	e0d8      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f8:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004302:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d063      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	2200      	movs	r2, #0
 8004316:	63bb      	str	r3, [r7, #56]	; 0x38
 8004318:	63fa      	str	r2, [r7, #60]	; 0x3c
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4621      	mov	r1, r4
 8004344:	1a51      	subs	r1, r2, r1
 8004346:	6139      	str	r1, [r7, #16]
 8004348:	4629      	mov	r1, r5
 800434a:	eb63 0301 	sbc.w	r3, r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004366:	4651      	mov	r1, sl
 8004368:	018a      	lsls	r2, r1, #6
 800436a:	4651      	mov	r1, sl
 800436c:	ebb2 0801 	subs.w	r8, r2, r1
 8004370:	4659      	mov	r1, fp
 8004372:	eb63 0901 	sbc.w	r9, r3, r1
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	4623      	mov	r3, r4
 8004390:	eb18 0303 	adds.w	r3, r8, r3
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	462b      	mov	r3, r5
 8004398:	eb49 0303 	adc.w	r3, r9, r3
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043aa:	4629      	mov	r1, r5
 80043ac:	024b      	lsls	r3, r1, #9
 80043ae:	4621      	mov	r1, r4
 80043b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b4:	4621      	mov	r1, r4
 80043b6:	024a      	lsls	r2, r1, #9
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043be:	2200      	movs	r2, #0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c8:	f7fb ff7a 	bl	80002c0 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	e058      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	4611      	mov	r1, r2
 80043e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	0159      	lsls	r1, r3, #5
 80043fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004402:	0150      	lsls	r0, r2, #5
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4641      	mov	r1, r8
 800440a:	ebb2 0a01 	subs.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb63 0b01 	sbc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004428:	ebb2 040a 	subs.w	r4, r2, sl
 800442c:	eb63 050b 	sbc.w	r5, r3, fp
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	00eb      	lsls	r3, r5, #3
 800443a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443e:	00e2      	lsls	r2, r4, #3
 8004440:	4614      	mov	r4, r2
 8004442:	461d      	mov	r5, r3
 8004444:	4643      	mov	r3, r8
 8004446:	18e3      	adds	r3, r4, r3
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	464b      	mov	r3, r9
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445e:	4629      	mov	r1, r5
 8004460:	028b      	lsls	r3, r1, #10
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004468:	4621      	mov	r1, r4
 800446a:	028a      	lsls	r2, r1, #10
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	2200      	movs	r2, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	61fa      	str	r2, [r7, #28]
 8004478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447c:	f7fb ff20 	bl	80002c0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3750      	adds	r7, #80	; 0x50
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	007a1200 	.word	0x007a1200

080044c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000008 	.word	0x20000008

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff0 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	08006fb4 	.word	0x08006fb4

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffdc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	08006fb4 	.word	0x08006fb4

0800452c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d012      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004554:	4b69      	ldr	r3, [pc, #420]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a68      	ldr	r2, [pc, #416]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800455e:	6093      	str	r3, [r2, #8]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	4964      	ldr	r1, [pc, #400]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004586:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	4959      	ldr	r1, [pc, #356]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d017      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	494a      	ldr	r1, [pc, #296]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e0:	d101      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045fe:	2301      	movs	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 808b 	beq.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	4a39      	ldr	r2, [pc, #228]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	; 0x40
 800461c:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a34      	ldr	r2, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd fa00 	bl	8001a38 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463c:	f7fd f9fc 	bl	8001a38 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e357      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800465a:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d035      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d02e      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004680:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d114      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd f9c4 	bl	8001a38 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd f9c0 	bl	8001a38 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e319      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ee      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e2:	d111      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046f2:	400b      	ands	r3, r1
 80046f4:	4901      	ldr	r1, [pc, #4]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
 80046fa:	e00b      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046fc:	40023800 	.word	0x40023800
 8004700:	40007000 	.word	0x40007000
 8004704:	0ffffcff 	.word	0x0ffffcff
 8004708:	4baa      	ldr	r3, [pc, #680]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4aa9      	ldr	r2, [pc, #676]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	4ba7      	ldr	r3, [pc, #668]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004720:	49a4      	ldr	r1, [pc, #656]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004722:	4313      	orrs	r3, r2
 8004724:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004732:	4ba0      	ldr	r3, [pc, #640]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004738:	4a9e      	ldr	r2, [pc, #632]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004742:	4b9c      	ldr	r3, [pc, #624]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004744:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	4999      	ldr	r1, [pc, #612]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004760:	4b94      	ldr	r3, [pc, #592]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476e:	4991      	ldr	r1, [pc, #580]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004782:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004790:	4988      	ldr	r1, [pc, #544]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047a4:	4b83      	ldr	r3, [pc, #524]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b2:	4980      	ldr	r1, [pc, #512]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047c6:	4b7b      	ldr	r3, [pc, #492]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d4:	4977      	ldr	r1, [pc, #476]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e8:	4b72      	ldr	r3, [pc, #456]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	496f      	ldr	r1, [pc, #444]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800480a:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f023 020c 	bic.w	r2, r3, #12
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004818:	4966      	ldr	r1, [pc, #408]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482c:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	495e      	ldr	r1, [pc, #376]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800484e:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	4955      	ldr	r1, [pc, #340]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004870:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	494d      	ldr	r1, [pc, #308]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004892:	4b48      	ldr	r3, [pc, #288]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4944      	ldr	r1, [pc, #272]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048b4:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	493c      	ldr	r1, [pc, #240]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	4933      	ldr	r1, [pc, #204]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048f8:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	492b      	ldr	r1, [pc, #172]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	4922      	ldr	r1, [pc, #136]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004938:	d101      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800494a:	2301      	movs	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	4912      	ldr	r1, [pc, #72]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498c:	4909      	ldr	r1, [pc, #36]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d006      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80d9 	beq.w	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a01      	ldr	r2, [pc, #4]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ba:	f7fd f83d 	bl	8001a38 <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c2:	f7fd f839 	bl	8001a38 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b64      	cmp	r3, #100	; 0x64
 80049ce:	d901      	bls.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e194      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d021      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11d      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049f4:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fa:	0c1b      	lsrs	r3, r3, #16
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a02:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	019a      	lsls	r2, r3, #6
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	071b      	lsls	r3, r3, #28
 8004a28:	4957      	ldr	r1, [pc, #348]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a5a:	d129      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a70:	0f1b      	lsrs	r3, r3, #28
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	019a      	lsls	r2, r3, #6
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	071b      	lsls	r3, r3, #28
 8004a90:	493d      	ldr	r1, [pc, #244]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9e:	f023 021f 	bic.w	r2, r3, #31
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	4937      	ldr	r1, [pc, #220]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01d      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aca:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad0:	0f1b      	lsrs	r3, r3, #28
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	019a      	lsls	r2, r3, #6
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	071b      	lsls	r3, r3, #28
 8004af0:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	019a      	lsls	r2, r3, #6
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	071b      	lsls	r3, r3, #28
 8004b20:	4919      	ldr	r1, [pc, #100]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b34:	f7fc ff80 	bl	8001a38 <HAL_GetTick>
 8004b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b3c:	f7fc ff7c 	bl	8001a38 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e0d7      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	f040 80cd 	bne.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fc ff63 	bl	8001a38 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b76:	f7fc ff5f 	bl	8001a38 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b64      	cmp	r3, #100	; 0x64
 8004b82:	d903      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0ba      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8c:	4b5e      	ldr	r3, [pc, #376]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b98:	d0ed      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02e      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d12a      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bc2:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd0:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4944      	ldr	r1, [pc, #272]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bfe:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	493d      	ldr	r1, [pc, #244]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d022      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2c:	d11d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c3c:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	0f1b      	lsrs	r3, r3, #28
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4929      	ldr	r1, [pc, #164]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	0e1b      	lsrs	r3, r3, #24
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4917      	ldr	r1, [pc, #92]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4911      	ldr	r1, [pc, #68]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fc feb0 	bl	8001a38 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cdc:	f7fc feac 	bl	8001a38 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e007      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfa:	d1ef      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d2a:	f040 808d 	bne.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004d2e:	4b93      	ldr	r3, [pc, #588]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d34:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d3c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d44:	d07c      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d4c:	d87b      	bhi.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d039      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004d5c:	e073      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d5e:	4b87      	ldr	r3, [pc, #540]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d6a:	4b84      	ldr	r3, [pc, #528]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d72:	4a83      	ldr	r2, [pc, #524]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e007      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d7c:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	4a7f      	ldr	r2, [pc, #508]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	0e1b      	lsrs	r3, r3, #24
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004d9a:	4b78      	ldr	r3, [pc, #480]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	fb03 f202 	mul.w	r2, r3, r2
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004db4:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
        break;
 8004dce:	e03b      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004dd0:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ddc:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	4a66      	ldr	r2, [pc, #408]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	e007      	b.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df6:	4a63      	ldr	r2, [pc, #396]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e04:	0e1b      	lsrs	r3, r3, #24
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004e0c:	4b5b      	ldr	r3, [pc, #364]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e12:	099b      	lsrs	r3, r3, #6
 8004e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	fb03 f202 	mul.w	r2, r3, r2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
        break;
 8004e3e:	e003      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e40:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004e42:	617b      	str	r3, [r7, #20]
        break;
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004e46:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4e:	f040 808d 	bne.w	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004e52:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e68:	d07c      	beq.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e70:	d87b      	bhi.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7e:	d039      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004e80:	e073      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	e007      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea8:	4a36      	ldr	r2, [pc, #216]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	0e1b      	lsrs	r3, r3, #24
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	099b      	lsrs	r3, r3, #6
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	fb03 f202 	mul.w	r2, r3, r2
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
        break;
 8004ef2:	e03b      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d108      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f08:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e007      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f28:	0e1b      	lsrs	r3, r3, #24
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	fb03 f202 	mul.w	r2, r3, r2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
        break;
 8004f62:	e003      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f66:	617b      	str	r3, [r7, #20]
        break;
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8004f6a:	bf00      	nop
      }
    }
  }

  return frequency;
 8004f6c:	697b      	ldr	r3, [r7, #20]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	00bb8000 	.word	0x00bb8000

08004f8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e156      	b.n	8005258 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fb4e 	bl	8001660 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa55 	bl	800547c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_SAI_Init+0x68>
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d80d      	bhi.n	8004ffa <HAL_SAI_Init+0x6e>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_SAI_Init+0x5c>
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004fe6:	e008      	b.n	8004ffa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
      break;
 8004fec:	e006      	b.n	8004ffc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004fee:	2310      	movs	r3, #16
 8004ff0:	61fb      	str	r3, [r7, #28]
      break;
 8004ff2:	e003      	b.n	8004ffc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	61fb      	str	r3, [r7, #28]
      break;
 8004ff8:	e000      	b.n	8004ffc <HAL_SAI_Init+0x70>
      break;
 8004ffa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d81e      	bhi.n	8005042 <HAL_SAI_Init+0xb6>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HAL_SAI_Init+0x80>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005023 	.word	0x08005023
 8005014:	0800502b 	.word	0x0800502b
 8005018:	08005033 	.word	0x08005033
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005020:	e010      	b.n	8005044 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005026:	617b      	str	r3, [r7, #20]
    }
    break;
 8005028:	e00c      	b.n	8005044 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800502a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800502e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005030:	e008      	b.n	8005044 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005036:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005040:	e000      	b.n	8005044 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005042:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a85      	ldr	r2, [pc, #532]	; (8005260 <HAL_SAI_Init+0x2d4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_SAI_Init+0xcc>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a84      	ldr	r2, [pc, #528]	; (8005264 <HAL_SAI_Init+0x2d8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d103      	bne.n	8005060 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005058:	4a83      	ldr	r2, [pc, #524]	; (8005268 <HAL_SAI_Init+0x2dc>)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e002      	b.n	8005066 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005060:	4a82      	ldr	r2, [pc, #520]	; (800526c <HAL_SAI_Init+0x2e0>)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04c      	beq.n	8005108 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7a      	ldr	r2, [pc, #488]	; (8005260 <HAL_SAI_Init+0x2d4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_SAI_Init+0xfa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a78      	ldr	r2, [pc, #480]	; (8005264 <HAL_SAI_Init+0x2d8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d104      	bne.n	8005090 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005086:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800508a:	f7ff fe3f 	bl	8004d0c <HAL_RCCEx_GetPeriphCLKFreq>
 800508e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a76      	ldr	r2, [pc, #472]	; (8005270 <HAL_SAI_Init+0x2e4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_SAI_Init+0x118>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a75      	ldr	r2, [pc, #468]	; (8005274 <HAL_SAI_Init+0x2e8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d104      	bne.n	80050ae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80050a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80050a8:	f7ff fe30 	bl	8004d0c <HAL_RCCEx_GetPeriphCLKFreq>
 80050ac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	025b      	lsls	r3, r3, #9
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a6b      	ldr	r2, [pc, #428]	; (8005278 <HAL_SAI_Init+0x2ec>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	08da      	lsrs	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	4b68      	ldr	r3, [pc, #416]	; (8005278 <HAL_SAI_Init+0x2ec>)
 80050d8:	fba3 2301 	umull	r2, r3, r3, r1
 80050dc:	08da      	lsrs	r2, r3, #3
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	1aca      	subs	r2, r1, r3
 80050e8:	2a08      	cmp	r2, #8
 80050ea:	d904      	bls.n	80050f6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d104      	bne.n	8005108 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	085a      	lsrs	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_SAI_Init+0x18c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d109      	bne.n	800512c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_SAI_Init+0x198>
 8005120:	2300      	movs	r3, #0
 8005122:	e001      	b.n	8005128 <HAL_SAI_Init+0x19c>
 8005124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e008      	b.n	800513e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d102      	bne.n	800513a <HAL_SAI_Init+0x1ae>
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	e000      	b.n	800513c <HAL_SAI_Init+0x1b0>
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6819      	ldr	r1, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b4c      	ldr	r3, [pc, #304]	; (800527c <HAL_SAI_Init+0x2f0>)
 800514a:	400b      	ands	r3, r1
 800514c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005162:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	431a      	orrs	r2, r3
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005176:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005182:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	051b      	lsls	r3, r3, #20
 800518a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b38      	ldr	r3, [pc, #224]	; (8005280 <HAL_SAI_Init+0x2f4>)
 80051a0:	400b      	ands	r3, r1
 80051a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_SAI_Init+0x2f8>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6899      	ldr	r1, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80051e8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80051ee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f4:	3b01      	subs	r3, #1
 80051f6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80051f8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68d9      	ldr	r1, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005210:	400b      	ands	r3, r1
 8005212:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	3b01      	subs	r3, #1
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40015804 	.word	0x40015804
 8005264:	40015824 	.word	0x40015824
 8005268:	40015800 	.word	0x40015800
 800526c:	40015c00 	.word	0x40015c00
 8005270:	40015c04 	.word	0x40015c04
 8005274:	40015c24 	.word	0x40015c24
 8005278:	cccccccd 	.word	0xcccccccd
 800527c:	ff05c010 	.word	0xff05c010
 8005280:	ffff1ff0 	.word	0xffff1ff0
 8005284:	fff88000 	.word	0xfff88000

08005288 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005296:	f7fc fbcf 	bl	8001a38 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SAI_Transmit_DMA+0x20>
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e093      	b.n	80053d4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 808c 	bne.w	80053d2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_SAI_Transmit_DMA+0x40>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e085      	b.n	80053d4 <HAL_SAI_Transmit_DMA+0x14c>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2212      	movs	r2, #18
 80052f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fa:	4a38      	ldr	r2, [pc, #224]	; (80053dc <HAL_SAI_Transmit_DMA+0x154>)
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005302:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <HAL_SAI_Transmit_DMA+0x158>)
 8005304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800530a:	4a36      	ldr	r2, [pc, #216]	; (80053e4 <HAL_SAI_Transmit_DMA+0x15c>)
 800530c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005312:	2200      	movs	r2, #0
 8005314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531e:	4619      	mov	r1, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	331c      	adds	r3, #28
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800532e:	f7fd f96d 	bl	800260c <HAL_DMA_Start_IT>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e047      	b.n	80053d4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005344:	2100      	movs	r1, #0
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f862 	bl	8005410 <SAI_InterruptFlag>
 800534c:	4601      	mov	r1, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800536a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800536c:	e015      	b.n	800539a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800536e:	f7fc fb63 	bl	8001a38 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537c:	d90d      	bls.n	800539a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e01c      	b.n	80053d4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0e2      	beq.n	800536e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053c4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	0800554d 	.word	0x0800554d
 80053e0:	080054ed 	.word	0x080054ed
 80053e4:	08005569 	.word	0x08005569

080053e8 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800541a:	2301      	movs	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d103      	bne.n	800542c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b08      	cmp	r3, #8
 8005432:	d10b      	bne.n	800544c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005438:	2b03      	cmp	r3, #3
 800543a:	d003      	beq.n	8005444 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d103      	bne.n	800544c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f043 0310 	orr.w	r3, r3, #16
 800544a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d003      	beq.n	800545c <SAI_InterruptFlag+0x4c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d104      	bne.n	8005466 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e003      	b.n	800546e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005484:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <SAI_Disable+0x68>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <SAI_Disable+0x6c>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0b1b      	lsrs	r3, r3, #12
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	60fa      	str	r2, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	72fb      	strb	r3, [r7, #11]
      break;
 80054c6:	e006      	b.n	80054d6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e8      	bne.n	80054a8 <SAI_Disable+0x2c>

  return status;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000008 	.word	0x20000008
 80054e8:	95cbec1b 	.word	0x95cbec1b

080054ec <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d01c      	beq.n	800553e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800551a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800551c:	2100      	movs	r1, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff ff76 	bl	8005410 <SAI_InterruptFlag>
 8005524:	4603      	mov	r3, r0
 8005526:	43d9      	mvns	r1, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	400a      	ands	r2, r1
 8005534:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7fb f8ae 	bl	80006a0 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff44 	bl	80053e8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	2b01      	cmp	r3, #1
 800558e:	d004      	beq.n	800559a <SAI_DMAError+0x32>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	2b01      	cmp	r3, #1
 8005598:	d112      	bne.n	80055c0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80055a8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff66 	bl	800547c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff1b 	bl	80053fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e040      	b.n	8005662 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fb ff5b 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2224      	movs	r2, #36	; 0x24
 80055fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8af 	bl	8005770 <UART_SetConfig>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e022      	b.n	8005662 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb07 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005638:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005648:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fb8e 	bl	8005d7c <UART_CheckIdleState>
 8005660:	4603      	mov	r3, r0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567e:	2b20      	cmp	r3, #32
 8005680:	d171      	bne.n	8005766 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_Transmit+0x24>
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e06a      	b.n	8005768 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2221      	movs	r2, #33	; 0x21
 800569e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a0:	f7fc f9ca 	bl	8001a38 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	d108      	bne.n	80056d2 <HAL_UART_Transmit+0x68>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e003      	b.n	80056da <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056da:	e02c      	b.n	8005736 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fb7f 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e038      	b.n	8005768 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	3302      	adds	r3, #2
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e007      	b.n	8005724 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1cc      	bne.n	80056dc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	2140      	movs	r1, #64	; 0x40
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fb4c 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e005      	b.n	8005768 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e000      	b.n	8005768 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005766:	2302      	movs	r3, #2
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4ba6      	ldr	r3, [pc, #664]	; (8005a34 <UART_SetConfig+0x2c4>)
 800579c:	4013      	ands	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a94      	ldr	r2, [pc, #592]	; (8005a38 <UART_SetConfig+0x2c8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d120      	bne.n	800582e <UART_SetConfig+0xbe>
 80057ec:	4b93      	ldr	r3, [pc, #588]	; (8005a3c <UART_SetConfig+0x2cc>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d816      	bhi.n	8005828 <UART_SetConfig+0xb8>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x90>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005811 	.word	0x08005811
 8005804:	0800581d 	.word	0x0800581d
 8005808:	08005817 	.word	0x08005817
 800580c:	08005823 	.word	0x08005823
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e150      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005816:	2302      	movs	r3, #2
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e14d      	b.n	8005ab8 <UART_SetConfig+0x348>
 800581c:	2304      	movs	r3, #4
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e14a      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005822:	2308      	movs	r3, #8
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e147      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005828:	2310      	movs	r3, #16
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e144      	b.n	8005ab8 <UART_SetConfig+0x348>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <UART_SetConfig+0x2d0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d132      	bne.n	800589e <UART_SetConfig+0x12e>
 8005838:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <UART_SetConfig+0x2cc>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d828      	bhi.n	8005898 <UART_SetConfig+0x128>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0xdc>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005881 	.word	0x08005881
 8005850:	08005899 	.word	0x08005899
 8005854:	08005899 	.word	0x08005899
 8005858:	08005899 	.word	0x08005899
 800585c:	0800588d 	.word	0x0800588d
 8005860:	08005899 	.word	0x08005899
 8005864:	08005899 	.word	0x08005899
 8005868:	08005899 	.word	0x08005899
 800586c:	08005887 	.word	0x08005887
 8005870:	08005899 	.word	0x08005899
 8005874:	08005899 	.word	0x08005899
 8005878:	08005899 	.word	0x08005899
 800587c:	08005893 	.word	0x08005893
 8005880:	2300      	movs	r3, #0
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e118      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005886:	2302      	movs	r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e115      	b.n	8005ab8 <UART_SetConfig+0x348>
 800588c:	2304      	movs	r3, #4
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e112      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005892:	2308      	movs	r3, #8
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e10f      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005898:	2310      	movs	r3, #16
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e10c      	b.n	8005ab8 <UART_SetConfig+0x348>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a68      	ldr	r2, [pc, #416]	; (8005a44 <UART_SetConfig+0x2d4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d120      	bne.n	80058ea <UART_SetConfig+0x17a>
 80058a8:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <UART_SetConfig+0x2cc>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058b2:	2b30      	cmp	r3, #48	; 0x30
 80058b4:	d013      	beq.n	80058de <UART_SetConfig+0x16e>
 80058b6:	2b30      	cmp	r3, #48	; 0x30
 80058b8:	d814      	bhi.n	80058e4 <UART_SetConfig+0x174>
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d009      	beq.n	80058d2 <UART_SetConfig+0x162>
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d810      	bhi.n	80058e4 <UART_SetConfig+0x174>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <UART_SetConfig+0x15c>
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d006      	beq.n	80058d8 <UART_SetConfig+0x168>
 80058ca:	e00b      	b.n	80058e4 <UART_SetConfig+0x174>
 80058cc:	2300      	movs	r3, #0
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e0f2      	b.n	8005ab8 <UART_SetConfig+0x348>
 80058d2:	2302      	movs	r3, #2
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e0ef      	b.n	8005ab8 <UART_SetConfig+0x348>
 80058d8:	2304      	movs	r3, #4
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e0ec      	b.n	8005ab8 <UART_SetConfig+0x348>
 80058de:	2308      	movs	r3, #8
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e0e9      	b.n	8005ab8 <UART_SetConfig+0x348>
 80058e4:	2310      	movs	r3, #16
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e0e6      	b.n	8005ab8 <UART_SetConfig+0x348>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a56      	ldr	r2, [pc, #344]	; (8005a48 <UART_SetConfig+0x2d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d120      	bne.n	8005936 <UART_SetConfig+0x1c6>
 80058f4:	4b51      	ldr	r3, [pc, #324]	; (8005a3c <UART_SetConfig+0x2cc>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005900:	d013      	beq.n	800592a <UART_SetConfig+0x1ba>
 8005902:	2bc0      	cmp	r3, #192	; 0xc0
 8005904:	d814      	bhi.n	8005930 <UART_SetConfig+0x1c0>
 8005906:	2b80      	cmp	r3, #128	; 0x80
 8005908:	d009      	beq.n	800591e <UART_SetConfig+0x1ae>
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d810      	bhi.n	8005930 <UART_SetConfig+0x1c0>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <UART_SetConfig+0x1a8>
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d006      	beq.n	8005924 <UART_SetConfig+0x1b4>
 8005916:	e00b      	b.n	8005930 <UART_SetConfig+0x1c0>
 8005918:	2300      	movs	r3, #0
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e0cc      	b.n	8005ab8 <UART_SetConfig+0x348>
 800591e:	2302      	movs	r3, #2
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e0c9      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005924:	2304      	movs	r3, #4
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e0c6      	b.n	8005ab8 <UART_SetConfig+0x348>
 800592a:	2308      	movs	r3, #8
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e0c3      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005930:	2310      	movs	r3, #16
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e0c0      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a44      	ldr	r2, [pc, #272]	; (8005a4c <UART_SetConfig+0x2dc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d125      	bne.n	800598c <UART_SetConfig+0x21c>
 8005940:	4b3e      	ldr	r3, [pc, #248]	; (8005a3c <UART_SetConfig+0x2cc>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594e:	d017      	beq.n	8005980 <UART_SetConfig+0x210>
 8005950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005954:	d817      	bhi.n	8005986 <UART_SetConfig+0x216>
 8005956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595a:	d00b      	beq.n	8005974 <UART_SetConfig+0x204>
 800595c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005960:	d811      	bhi.n	8005986 <UART_SetConfig+0x216>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <UART_SetConfig+0x1fe>
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	d006      	beq.n	800597a <UART_SetConfig+0x20a>
 800596c:	e00b      	b.n	8005986 <UART_SetConfig+0x216>
 800596e:	2300      	movs	r3, #0
 8005970:	77fb      	strb	r3, [r7, #31]
 8005972:	e0a1      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005974:	2302      	movs	r3, #2
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e09e      	b.n	8005ab8 <UART_SetConfig+0x348>
 800597a:	2304      	movs	r3, #4
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e09b      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005980:	2308      	movs	r3, #8
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e098      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005986:	2310      	movs	r3, #16
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e095      	b.n	8005ab8 <UART_SetConfig+0x348>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <UART_SetConfig+0x2e0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d125      	bne.n	80059e2 <UART_SetConfig+0x272>
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <UART_SetConfig+0x2cc>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a4:	d017      	beq.n	80059d6 <UART_SetConfig+0x266>
 80059a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059aa:	d817      	bhi.n	80059dc <UART_SetConfig+0x26c>
 80059ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b0:	d00b      	beq.n	80059ca <UART_SetConfig+0x25a>
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b6:	d811      	bhi.n	80059dc <UART_SetConfig+0x26c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <UART_SetConfig+0x254>
 80059bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c0:	d006      	beq.n	80059d0 <UART_SetConfig+0x260>
 80059c2:	e00b      	b.n	80059dc <UART_SetConfig+0x26c>
 80059c4:	2301      	movs	r3, #1
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e076      	b.n	8005ab8 <UART_SetConfig+0x348>
 80059ca:	2302      	movs	r3, #2
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e073      	b.n	8005ab8 <UART_SetConfig+0x348>
 80059d0:	2304      	movs	r3, #4
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e070      	b.n	8005ab8 <UART_SetConfig+0x348>
 80059d6:	2308      	movs	r3, #8
 80059d8:	77fb      	strb	r3, [r7, #31]
 80059da:	e06d      	b.n	8005ab8 <UART_SetConfig+0x348>
 80059dc:	2310      	movs	r3, #16
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e06a      	b.n	8005ab8 <UART_SetConfig+0x348>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <UART_SetConfig+0x2e4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d138      	bne.n	8005a5e <UART_SetConfig+0x2ee>
 80059ec:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <UART_SetConfig+0x2cc>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059fa:	d017      	beq.n	8005a2c <UART_SetConfig+0x2bc>
 80059fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a00:	d82a      	bhi.n	8005a58 <UART_SetConfig+0x2e8>
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a06:	d00b      	beq.n	8005a20 <UART_SetConfig+0x2b0>
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	d824      	bhi.n	8005a58 <UART_SetConfig+0x2e8>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <UART_SetConfig+0x2aa>
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	d006      	beq.n	8005a26 <UART_SetConfig+0x2b6>
 8005a18:	e01e      	b.n	8005a58 <UART_SetConfig+0x2e8>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e04b      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a20:	2302      	movs	r3, #2
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e048      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a26:	2304      	movs	r3, #4
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e045      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e042      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a32:	bf00      	nop
 8005a34:	efff69f3 	.word	0xefff69f3
 8005a38:	40011000 	.word	0x40011000
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40004400 	.word	0x40004400
 8005a44:	40004800 	.word	0x40004800
 8005a48:	40004c00 	.word	0x40004c00
 8005a4c:	40005000 	.word	0x40005000
 8005a50:	40011400 	.word	0x40011400
 8005a54:	40007800 	.word	0x40007800
 8005a58:	2310      	movs	r3, #16
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e02c      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a72      	ldr	r2, [pc, #456]	; (8005c2c <UART_SetConfig+0x4bc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d125      	bne.n	8005ab4 <UART_SetConfig+0x344>
 8005a68:	4b71      	ldr	r3, [pc, #452]	; (8005c30 <UART_SetConfig+0x4c0>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a76:	d017      	beq.n	8005aa8 <UART_SetConfig+0x338>
 8005a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a7c:	d817      	bhi.n	8005aae <UART_SetConfig+0x33e>
 8005a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a82:	d00b      	beq.n	8005a9c <UART_SetConfig+0x32c>
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a88:	d811      	bhi.n	8005aae <UART_SetConfig+0x33e>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <UART_SetConfig+0x326>
 8005a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a92:	d006      	beq.n	8005aa2 <UART_SetConfig+0x332>
 8005a94:	e00b      	b.n	8005aae <UART_SetConfig+0x33e>
 8005a96:	2300      	movs	r3, #0
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e00d      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e00a      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e007      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e004      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005aae:	2310      	movs	r3, #16
 8005ab0:	77fb      	strb	r3, [r7, #31]
 8005ab2:	e001      	b.n	8005ab8 <UART_SetConfig+0x348>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac0:	d15b      	bne.n	8005b7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ac2:	7ffb      	ldrb	r3, [r7, #31]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d828      	bhi.n	8005b1a <UART_SetConfig+0x3aa>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <UART_SetConfig+0x360>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005b05 	.word	0x08005b05
 8005adc:	08005b1b 	.word	0x08005b1b
 8005ae0:	08005b0b 	.word	0x08005b0b
 8005ae4:	08005b1b 	.word	0x08005b1b
 8005ae8:	08005b1b 	.word	0x08005b1b
 8005aec:	08005b1b 	.word	0x08005b1b
 8005af0:	08005b13 	.word	0x08005b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af4:	f7fe fcf2 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8005af8:	61b8      	str	r0, [r7, #24]
        break;
 8005afa:	e013      	b.n	8005b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005afc:	f7fe fd02 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8005b00:	61b8      	str	r0, [r7, #24]
        break;
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b04:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <UART_SetConfig+0x4c4>)
 8005b06:	61bb      	str	r3, [r7, #24]
        break;
 8005b08:	e00c      	b.n	8005b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0a:	f7fe fbd5 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8005b0e:	61b8      	str	r0, [r7, #24]
        break;
 8005b10:	e008      	b.n	8005b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b16:	61bb      	str	r3, [r7, #24]
        break;
 8005b18:	e004      	b.n	8005b24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	77bb      	strb	r3, [r7, #30]
        break;
 8005b22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d074      	beq.n	8005c14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	005a      	lsls	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	d916      	bls.n	8005b74 <UART_SetConfig+0x404>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d212      	bcs.n	8005b74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f023 030f 	bic.w	r3, r3, #15
 8005b56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	89fa      	ldrh	r2, [r7, #14]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	e04f      	b.n	8005c14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	77bb      	strb	r3, [r7, #30]
 8005b78:	e04c      	b.n	8005c14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b7a:	7ffb      	ldrb	r3, [r7, #31]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d828      	bhi.n	8005bd2 <UART_SetConfig+0x462>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x418>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	08005bd3 	.word	0x08005bd3
 8005b98:	08005bc3 	.word	0x08005bc3
 8005b9c:	08005bd3 	.word	0x08005bd3
 8005ba0:	08005bd3 	.word	0x08005bd3
 8005ba4:	08005bd3 	.word	0x08005bd3
 8005ba8:	08005bcb 	.word	0x08005bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bac:	f7fe fc96 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8005bb0:	61b8      	str	r0, [r7, #24]
        break;
 8005bb2:	e013      	b.n	8005bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fe fca6 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	61b8      	str	r0, [r7, #24]
        break;
 8005bba:	e00f      	b.n	8005bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <UART_SetConfig+0x4c4>)
 8005bbe:	61bb      	str	r3, [r7, #24]
        break;
 8005bc0:	e00c      	b.n	8005bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc2:	f7fe fb79 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8005bc6:	61b8      	str	r0, [r7, #24]
        break;
 8005bc8:	e008      	b.n	8005bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bce:	61bb      	str	r3, [r7, #24]
        break;
 8005bd0:	e004      	b.n	8005bdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8005bda:	bf00      	nop
    }

    if (pclk != 0U)
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085a      	lsrs	r2, r3, #1
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	441a      	add	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b0f      	cmp	r3, #15
 8005bfa:	d909      	bls.n	8005c10 <UART_SetConfig+0x4a0>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c02:	d205      	bcs.n	8005c10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e001      	b.n	8005c14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40007c00 	.word	0x40007c00
 8005c30:	40023800 	.word	0x40023800
 8005c34:	00f42400 	.word	0x00f42400

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d36:	d10a      	bne.n	8005d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d8c:	f7fb fe54 	bl	8001a38 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d10e      	bne.n	8005dbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f81b 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e011      	b.n	8005de2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b09c      	sub	sp, #112	; 0x70
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	e0a7      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	f000 80a3 	beq.w	8005f4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fb fe17 	bl	8001a38 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d13f      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e30:	667b      	str	r3, [r7, #100]	; 0x64
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	663b      	str	r3, [r7, #96]	; 0x60
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e068      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d050      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d148      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e6      	bne.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f16:	623a      	str	r2, [r7, #32]
 8005f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e010      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4013      	ands	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	f43f af48 	beq.w	8005dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3770      	adds	r7, #112	; 0x70
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f78:	b084      	sub	sp, #16
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	f107 001c 	add.w	r0, r7, #28
 8005f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d120      	bne.n	8005fd2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	4b20      	ldr	r3, [pc, #128]	; (8006024 <USB_CoreInit+0xac>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa96 	bl	80064f8 <USB_CoreReset>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e010      	b.n	8005ff4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa8a 	bl	80064f8 <USB_CoreReset>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d10b      	bne.n	8006012 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f043 0206 	orr.w	r2, r3, #6
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800601e:	b004      	add	sp, #16
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	ffbdffbf 	.word	0xffbdffbf

08006028 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 0201 	bic.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d115      	bne.n	8006098 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006078:	2001      	movs	r0, #1
 800607a:	f7fb fce9 	bl	8001a50 <HAL_Delay>
      ms++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fa29 	bl	80064dc <USB_GetMode>
 800608a:	4603      	mov	r3, r0
 800608c:	2b01      	cmp	r3, #1
 800608e:	d01e      	beq.n	80060ce <USB_SetCurrentMode+0x84>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b31      	cmp	r3, #49	; 0x31
 8006094:	d9f0      	bls.n	8006078 <USB_SetCurrentMode+0x2e>
 8006096:	e01a      	b.n	80060ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d115      	bne.n	80060ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7fb fcd0 	bl	8001a50 <HAL_Delay>
      ms++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa10 	bl	80064dc <USB_GetMode>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <USB_SetCurrentMode+0x84>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b31      	cmp	r3, #49	; 0x31
 80060c6:	d9f0      	bls.n	80060aa <USB_SetCurrentMode+0x60>
 80060c8:	e001      	b.n	80060ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e005      	b.n	80060da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b32      	cmp	r3, #50	; 0x32
 80060d2:	d101      	bne.n	80060d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e4:	b084      	sub	sp, #16
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e009      	b.n	8006118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3340      	adds	r3, #64	; 0x40
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	2200      	movs	r2, #0
 8006110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3301      	adds	r3, #1
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b0e      	cmp	r3, #14
 800611c:	d9f2      	bls.n	8006104 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800611e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11c      	bne.n	800615e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006132:	f043 0302 	orr.w	r3, r3, #2
 8006136:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e005      	b.n	800616a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006170:	461a      	mov	r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	4619      	mov	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006184:	461a      	mov	r2, r3
 8006186:	680b      	ldr	r3, [r1, #0]
 8006188:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10c      	bne.n	80061aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f965 	bl	8006468 <USB_SetDevSpeed>
 800619e:	e008      	b.n	80061b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f960 	bl	8006468 <USB_SetDevSpeed>
 80061a8:	e003      	b.n	80061b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061aa:	2103      	movs	r1, #3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f95b 	bl	8006468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061b2:	2110      	movs	r1, #16
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8f3 	bl	80063a0 <USB_FlushTxFifo>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f91f 	bl	8006408 <USB_FlushRxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	461a      	mov	r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	461a      	mov	r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	461a      	mov	r2, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	e043      	b.n	8006286 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d118      	bne.n	8006248 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e013      	b.n	800625a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e008      	b.n	800625a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	2300      	movs	r3, #0
 8006258:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	461a      	mov	r2, r3
 800627a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800627e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	d3b7      	bcc.n	80061fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	e043      	b.n	800631c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062aa:	d118      	bne.n	80062de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	461a      	mov	r2, r3
 80062c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e013      	b.n	80062f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e008      	b.n	80062f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3301      	adds	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d3b7      	bcc.n	8006294 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006336:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006344:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f043 0210 	orr.w	r2, r3, #16
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <USB_DevInit+0x2b4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <USB_DevInit+0x2b8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006394:	b004      	add	sp, #16
 8006396:	4770      	bx	lr
 8006398:	803c3800 	.word	0x803c3800
 800639c:	40000004 	.word	0x40000004

080063a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <USB_FlushTxFifo+0x64>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e01b      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	daf2      	bge.n	80063ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a08      	ldr	r2, [pc, #32]	; (8006404 <USB_FlushTxFifo+0x64>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e006      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d0f0      	beq.n	80063d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	00030d40 	.word	0x00030d40

08006408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a11      	ldr	r2, [pc, #68]	; (8006464 <USB_FlushRxFifo+0x5c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e018      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2210      	movs	r2, #16
 8006436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <USB_FlushRxFifo+0x5c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e006      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d0f0      	beq.n	8006438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	00030d40 	.word	0x00030d40

08006468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064b4:	f023 0303 	bic.w	r3, r3, #3
 80064b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c8:	f043 0302 	orr.w	r3, r3, #2
 80064cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0301 	and.w	r3, r3, #1
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <USB_CoreReset+0x64>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e01b      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	daf2      	bge.n	8006504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a09      	ldr	r2, [pc, #36]	; (800655c <USB_CoreReset+0x64>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e006      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d0f0      	beq.n	800652e <USB_CoreReset+0x36>

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	00030d40 	.word	0x00030d40

08006560 <siprintf>:
 8006560:	b40e      	push	{r1, r2, r3}
 8006562:	b500      	push	{lr}
 8006564:	b09c      	sub	sp, #112	; 0x70
 8006566:	ab1d      	add	r3, sp, #116	; 0x74
 8006568:	9002      	str	r0, [sp, #8]
 800656a:	9006      	str	r0, [sp, #24]
 800656c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006570:	4809      	ldr	r0, [pc, #36]	; (8006598 <siprintf+0x38>)
 8006572:	9107      	str	r1, [sp, #28]
 8006574:	9104      	str	r1, [sp, #16]
 8006576:	4909      	ldr	r1, [pc, #36]	; (800659c <siprintf+0x3c>)
 8006578:	f853 2b04 	ldr.w	r2, [r3], #4
 800657c:	9105      	str	r1, [sp, #20]
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	a902      	add	r1, sp, #8
 8006584:	f000 f992 	bl	80068ac <_svfiprintf_r>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	b01c      	add	sp, #112	; 0x70
 8006590:	f85d eb04 	ldr.w	lr, [sp], #4
 8006594:	b003      	add	sp, #12
 8006596:	4770      	bx	lr
 8006598:	20000060 	.word	0x20000060
 800659c:	ffff0208 	.word	0xffff0208

080065a0 <memset>:
 80065a0:	4402      	add	r2, r0
 80065a2:	4603      	mov	r3, r0
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d100      	bne.n	80065aa <memset+0xa>
 80065a8:	4770      	bx	lr
 80065aa:	f803 1b01 	strb.w	r1, [r3], #1
 80065ae:	e7f9      	b.n	80065a4 <memset+0x4>

080065b0 <__errno>:
 80065b0:	4b01      	ldr	r3, [pc, #4]	; (80065b8 <__errno+0x8>)
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000060 	.word	0x20000060

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4d0d      	ldr	r5, [pc, #52]	; (80065f4 <__libc_init_array+0x38>)
 80065c0:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c2:	1b64      	subs	r4, r4, r5
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	2600      	movs	r6, #0
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	4d0b      	ldr	r5, [pc, #44]	; (80065fc <__libc_init_array+0x40>)
 80065ce:	4c0c      	ldr	r4, [pc, #48]	; (8006600 <__libc_init_array+0x44>)
 80065d0:	f000 fc6a 	bl	8006ea8 <_init>
 80065d4:	1b64      	subs	r4, r4, r5
 80065d6:	10a4      	asrs	r4, r4, #2
 80065d8:	2600      	movs	r6, #0
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	08007000 	.word	0x08007000
 80065f8:	08007000 	.word	0x08007000
 80065fc:	08007000 	.word	0x08007000
 8006600:	08007004 	.word	0x08007004

08006604 <__retarget_lock_acquire_recursive>:
 8006604:	4770      	bx	lr

08006606 <__retarget_lock_release_recursive>:
 8006606:	4770      	bx	lr

08006608 <_free_r>:
 8006608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800660a:	2900      	cmp	r1, #0
 800660c:	d044      	beq.n	8006698 <_free_r+0x90>
 800660e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006612:	9001      	str	r0, [sp, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f1a1 0404 	sub.w	r4, r1, #4
 800661a:	bfb8      	it	lt
 800661c:	18e4      	addlt	r4, r4, r3
 800661e:	f000 f8df 	bl	80067e0 <__malloc_lock>
 8006622:	4a1e      	ldr	r2, [pc, #120]	; (800669c <_free_r+0x94>)
 8006624:	9801      	ldr	r0, [sp, #4]
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	b933      	cbnz	r3, 8006638 <_free_r+0x30>
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	6014      	str	r4, [r2, #0]
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006634:	f000 b8da 	b.w	80067ec <__malloc_unlock>
 8006638:	42a3      	cmp	r3, r4
 800663a:	d908      	bls.n	800664e <_free_r+0x46>
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	1961      	adds	r1, r4, r5
 8006640:	428b      	cmp	r3, r1
 8006642:	bf01      	itttt	eq
 8006644:	6819      	ldreq	r1, [r3, #0]
 8006646:	685b      	ldreq	r3, [r3, #4]
 8006648:	1949      	addeq	r1, r1, r5
 800664a:	6021      	streq	r1, [r4, #0]
 800664c:	e7ed      	b.n	800662a <_free_r+0x22>
 800664e:	461a      	mov	r2, r3
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	b10b      	cbz	r3, 8006658 <_free_r+0x50>
 8006654:	42a3      	cmp	r3, r4
 8006656:	d9fa      	bls.n	800664e <_free_r+0x46>
 8006658:	6811      	ldr	r1, [r2, #0]
 800665a:	1855      	adds	r5, r2, r1
 800665c:	42a5      	cmp	r5, r4
 800665e:	d10b      	bne.n	8006678 <_free_r+0x70>
 8006660:	6824      	ldr	r4, [r4, #0]
 8006662:	4421      	add	r1, r4
 8006664:	1854      	adds	r4, r2, r1
 8006666:	42a3      	cmp	r3, r4
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	d1e0      	bne.n	800662e <_free_r+0x26>
 800666c:	681c      	ldr	r4, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	440c      	add	r4, r1
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	e7da      	b.n	800662e <_free_r+0x26>
 8006678:	d902      	bls.n	8006680 <_free_r+0x78>
 800667a:	230c      	movs	r3, #12
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	e7d6      	b.n	800662e <_free_r+0x26>
 8006680:	6825      	ldr	r5, [r4, #0]
 8006682:	1961      	adds	r1, r4, r5
 8006684:	428b      	cmp	r3, r1
 8006686:	bf04      	itt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	bf04      	itt	eq
 8006690:	1949      	addeq	r1, r1, r5
 8006692:	6021      	streq	r1, [r4, #0]
 8006694:	6054      	str	r4, [r2, #4]
 8006696:	e7ca      	b.n	800662e <_free_r+0x26>
 8006698:	b003      	add	sp, #12
 800669a:	bd30      	pop	{r4, r5, pc}
 800669c:	20000e14 	.word	0x20000e14

080066a0 <sbrk_aligned>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4e0e      	ldr	r6, [pc, #56]	; (80066dc <sbrk_aligned+0x3c>)
 80066a4:	460c      	mov	r4, r1
 80066a6:	6831      	ldr	r1, [r6, #0]
 80066a8:	4605      	mov	r5, r0
 80066aa:	b911      	cbnz	r1, 80066b2 <sbrk_aligned+0x12>
 80066ac:	f000 fba6 	bl	8006dfc <_sbrk_r>
 80066b0:	6030      	str	r0, [r6, #0]
 80066b2:	4621      	mov	r1, r4
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 fba1 	bl	8006dfc <_sbrk_r>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d00a      	beq.n	80066d4 <sbrk_aligned+0x34>
 80066be:	1cc4      	adds	r4, r0, #3
 80066c0:	f024 0403 	bic.w	r4, r4, #3
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	d007      	beq.n	80066d8 <sbrk_aligned+0x38>
 80066c8:	1a21      	subs	r1, r4, r0
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 fb96 	bl	8006dfc <_sbrk_r>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d101      	bne.n	80066d8 <sbrk_aligned+0x38>
 80066d4:	f04f 34ff 	mov.w	r4, #4294967295
 80066d8:	4620      	mov	r0, r4
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	20000e18 	.word	0x20000e18

080066e0 <_malloc_r>:
 80066e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e4:	1ccd      	adds	r5, r1, #3
 80066e6:	f025 0503 	bic.w	r5, r5, #3
 80066ea:	3508      	adds	r5, #8
 80066ec:	2d0c      	cmp	r5, #12
 80066ee:	bf38      	it	cc
 80066f0:	250c      	movcc	r5, #12
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	4607      	mov	r7, r0
 80066f6:	db01      	blt.n	80066fc <_malloc_r+0x1c>
 80066f8:	42a9      	cmp	r1, r5
 80066fa:	d905      	bls.n	8006708 <_malloc_r+0x28>
 80066fc:	230c      	movs	r3, #12
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	2600      	movs	r6, #0
 8006702:	4630      	mov	r0, r6
 8006704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006708:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067dc <_malloc_r+0xfc>
 800670c:	f000 f868 	bl	80067e0 <__malloc_lock>
 8006710:	f8d8 3000 	ldr.w	r3, [r8]
 8006714:	461c      	mov	r4, r3
 8006716:	bb5c      	cbnz	r4, 8006770 <_malloc_r+0x90>
 8006718:	4629      	mov	r1, r5
 800671a:	4638      	mov	r0, r7
 800671c:	f7ff ffc0 	bl	80066a0 <sbrk_aligned>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	4604      	mov	r4, r0
 8006724:	d155      	bne.n	80067d2 <_malloc_r+0xf2>
 8006726:	f8d8 4000 	ldr.w	r4, [r8]
 800672a:	4626      	mov	r6, r4
 800672c:	2e00      	cmp	r6, #0
 800672e:	d145      	bne.n	80067bc <_malloc_r+0xdc>
 8006730:	2c00      	cmp	r4, #0
 8006732:	d048      	beq.n	80067c6 <_malloc_r+0xe6>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	4631      	mov	r1, r6
 8006738:	4638      	mov	r0, r7
 800673a:	eb04 0903 	add.w	r9, r4, r3
 800673e:	f000 fb5d 	bl	8006dfc <_sbrk_r>
 8006742:	4581      	cmp	r9, r0
 8006744:	d13f      	bne.n	80067c6 <_malloc_r+0xe6>
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	1a6d      	subs	r5, r5, r1
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff ffa7 	bl	80066a0 <sbrk_aligned>
 8006752:	3001      	adds	r0, #1
 8006754:	d037      	beq.n	80067c6 <_malloc_r+0xe6>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	442b      	add	r3, r5
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	f8d8 3000 	ldr.w	r3, [r8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d038      	beq.n	80067d6 <_malloc_r+0xf6>
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	42a2      	cmp	r2, r4
 8006768:	d12b      	bne.n	80067c2 <_malloc_r+0xe2>
 800676a:	2200      	movs	r2, #0
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	e00f      	b.n	8006790 <_malloc_r+0xb0>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	1b52      	subs	r2, r2, r5
 8006774:	d41f      	bmi.n	80067b6 <_malloc_r+0xd6>
 8006776:	2a0b      	cmp	r2, #11
 8006778:	d917      	bls.n	80067aa <_malloc_r+0xca>
 800677a:	1961      	adds	r1, r4, r5
 800677c:	42a3      	cmp	r3, r4
 800677e:	6025      	str	r5, [r4, #0]
 8006780:	bf18      	it	ne
 8006782:	6059      	strne	r1, [r3, #4]
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	bf08      	it	eq
 8006788:	f8c8 1000 	streq.w	r1, [r8]
 800678c:	5162      	str	r2, [r4, r5]
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	4638      	mov	r0, r7
 8006792:	f104 060b 	add.w	r6, r4, #11
 8006796:	f000 f829 	bl	80067ec <__malloc_unlock>
 800679a:	f026 0607 	bic.w	r6, r6, #7
 800679e:	1d23      	adds	r3, r4, #4
 80067a0:	1af2      	subs	r2, r6, r3
 80067a2:	d0ae      	beq.n	8006702 <_malloc_r+0x22>
 80067a4:	1b9b      	subs	r3, r3, r6
 80067a6:	50a3      	str	r3, [r4, r2]
 80067a8:	e7ab      	b.n	8006702 <_malloc_r+0x22>
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	6862      	ldr	r2, [r4, #4]
 80067ae:	d1dd      	bne.n	800676c <_malloc_r+0x8c>
 80067b0:	f8c8 2000 	str.w	r2, [r8]
 80067b4:	e7ec      	b.n	8006790 <_malloc_r+0xb0>
 80067b6:	4623      	mov	r3, r4
 80067b8:	6864      	ldr	r4, [r4, #4]
 80067ba:	e7ac      	b.n	8006716 <_malloc_r+0x36>
 80067bc:	4634      	mov	r4, r6
 80067be:	6876      	ldr	r6, [r6, #4]
 80067c0:	e7b4      	b.n	800672c <_malloc_r+0x4c>
 80067c2:	4613      	mov	r3, r2
 80067c4:	e7cc      	b.n	8006760 <_malloc_r+0x80>
 80067c6:	230c      	movs	r3, #12
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4638      	mov	r0, r7
 80067cc:	f000 f80e 	bl	80067ec <__malloc_unlock>
 80067d0:	e797      	b.n	8006702 <_malloc_r+0x22>
 80067d2:	6025      	str	r5, [r4, #0]
 80067d4:	e7dc      	b.n	8006790 <_malloc_r+0xb0>
 80067d6:	605b      	str	r3, [r3, #4]
 80067d8:	deff      	udf	#255	; 0xff
 80067da:	bf00      	nop
 80067dc:	20000e14 	.word	0x20000e14

080067e0 <__malloc_lock>:
 80067e0:	4801      	ldr	r0, [pc, #4]	; (80067e8 <__malloc_lock+0x8>)
 80067e2:	f7ff bf0f 	b.w	8006604 <__retarget_lock_acquire_recursive>
 80067e6:	bf00      	nop
 80067e8:	20000e10 	.word	0x20000e10

080067ec <__malloc_unlock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <__malloc_unlock+0x8>)
 80067ee:	f7ff bf0a 	b.w	8006606 <__retarget_lock_release_recursive>
 80067f2:	bf00      	nop
 80067f4:	20000e10 	.word	0x20000e10

080067f8 <__ssputs_r>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	688e      	ldr	r6, [r1, #8]
 80067fe:	461f      	mov	r7, r3
 8006800:	42be      	cmp	r6, r7
 8006802:	680b      	ldr	r3, [r1, #0]
 8006804:	4682      	mov	sl, r0
 8006806:	460c      	mov	r4, r1
 8006808:	4690      	mov	r8, r2
 800680a:	d82c      	bhi.n	8006866 <__ssputs_r+0x6e>
 800680c:	898a      	ldrh	r2, [r1, #12]
 800680e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006812:	d026      	beq.n	8006862 <__ssputs_r+0x6a>
 8006814:	6965      	ldr	r5, [r4, #20]
 8006816:	6909      	ldr	r1, [r1, #16]
 8006818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800681c:	eba3 0901 	sub.w	r9, r3, r1
 8006820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006824:	1c7b      	adds	r3, r7, #1
 8006826:	444b      	add	r3, r9
 8006828:	106d      	asrs	r5, r5, #1
 800682a:	429d      	cmp	r5, r3
 800682c:	bf38      	it	cc
 800682e:	461d      	movcc	r5, r3
 8006830:	0553      	lsls	r3, r2, #21
 8006832:	d527      	bpl.n	8006884 <__ssputs_r+0x8c>
 8006834:	4629      	mov	r1, r5
 8006836:	f7ff ff53 	bl	80066e0 <_malloc_r>
 800683a:	4606      	mov	r6, r0
 800683c:	b360      	cbz	r0, 8006898 <__ssputs_r+0xa0>
 800683e:	6921      	ldr	r1, [r4, #16]
 8006840:	464a      	mov	r2, r9
 8006842:	f000 faeb 	bl	8006e1c <memcpy>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	6126      	str	r6, [r4, #16]
 8006854:	6165      	str	r5, [r4, #20]
 8006856:	444e      	add	r6, r9
 8006858:	eba5 0509 	sub.w	r5, r5, r9
 800685c:	6026      	str	r6, [r4, #0]
 800685e:	60a5      	str	r5, [r4, #8]
 8006860:	463e      	mov	r6, r7
 8006862:	42be      	cmp	r6, r7
 8006864:	d900      	bls.n	8006868 <__ssputs_r+0x70>
 8006866:	463e      	mov	r6, r7
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	4632      	mov	r2, r6
 800686c:	4641      	mov	r1, r8
 800686e:	f000 faab 	bl	8006dc8 <memmove>
 8006872:	68a3      	ldr	r3, [r4, #8]
 8006874:	1b9b      	subs	r3, r3, r6
 8006876:	60a3      	str	r3, [r4, #8]
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4433      	add	r3, r6
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	2000      	movs	r0, #0
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	462a      	mov	r2, r5
 8006886:	f000 fad7 	bl	8006e38 <_realloc_r>
 800688a:	4606      	mov	r6, r0
 800688c:	2800      	cmp	r0, #0
 800688e:	d1e0      	bne.n	8006852 <__ssputs_r+0x5a>
 8006890:	6921      	ldr	r1, [r4, #16]
 8006892:	4650      	mov	r0, sl
 8006894:	f7ff feb8 	bl	8006608 <_free_r>
 8006898:	230c      	movs	r3, #12
 800689a:	f8ca 3000 	str.w	r3, [sl]
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e7e9      	b.n	8006880 <__ssputs_r+0x88>

080068ac <_svfiprintf_r>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	4698      	mov	r8, r3
 80068b2:	898b      	ldrh	r3, [r1, #12]
 80068b4:	061b      	lsls	r3, r3, #24
 80068b6:	b09d      	sub	sp, #116	; 0x74
 80068b8:	4607      	mov	r7, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	4614      	mov	r4, r2
 80068be:	d50e      	bpl.n	80068de <_svfiprintf_r+0x32>
 80068c0:	690b      	ldr	r3, [r1, #16]
 80068c2:	b963      	cbnz	r3, 80068de <_svfiprintf_r+0x32>
 80068c4:	2140      	movs	r1, #64	; 0x40
 80068c6:	f7ff ff0b 	bl	80066e0 <_malloc_r>
 80068ca:	6028      	str	r0, [r5, #0]
 80068cc:	6128      	str	r0, [r5, #16]
 80068ce:	b920      	cbnz	r0, 80068da <_svfiprintf_r+0x2e>
 80068d0:	230c      	movs	r3, #12
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e0d0      	b.n	8006a7c <_svfiprintf_r+0x1d0>
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	616b      	str	r3, [r5, #20]
 80068de:	2300      	movs	r3, #0
 80068e0:	9309      	str	r3, [sp, #36]	; 0x24
 80068e2:	2320      	movs	r3, #32
 80068e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ec:	2330      	movs	r3, #48	; 0x30
 80068ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a94 <_svfiprintf_r+0x1e8>
 80068f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068f6:	f04f 0901 	mov.w	r9, #1
 80068fa:	4623      	mov	r3, r4
 80068fc:	469a      	mov	sl, r3
 80068fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006902:	b10a      	cbz	r2, 8006908 <_svfiprintf_r+0x5c>
 8006904:	2a25      	cmp	r2, #37	; 0x25
 8006906:	d1f9      	bne.n	80068fc <_svfiprintf_r+0x50>
 8006908:	ebba 0b04 	subs.w	fp, sl, r4
 800690c:	d00b      	beq.n	8006926 <_svfiprintf_r+0x7a>
 800690e:	465b      	mov	r3, fp
 8006910:	4622      	mov	r2, r4
 8006912:	4629      	mov	r1, r5
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff ff6f 	bl	80067f8 <__ssputs_r>
 800691a:	3001      	adds	r0, #1
 800691c:	f000 80a9 	beq.w	8006a72 <_svfiprintf_r+0x1c6>
 8006920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006922:	445a      	add	r2, fp
 8006924:	9209      	str	r2, [sp, #36]	; 0x24
 8006926:	f89a 3000 	ldrb.w	r3, [sl]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80a1 	beq.w	8006a72 <_svfiprintf_r+0x1c6>
 8006930:	2300      	movs	r3, #0
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693a:	f10a 0a01 	add.w	sl, sl, #1
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	9307      	str	r3, [sp, #28]
 8006942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006946:	931a      	str	r3, [sp, #104]	; 0x68
 8006948:	4654      	mov	r4, sl
 800694a:	2205      	movs	r2, #5
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	4850      	ldr	r0, [pc, #320]	; (8006a94 <_svfiprintf_r+0x1e8>)
 8006952:	f7f9 fc65 	bl	8000220 <memchr>
 8006956:	9a04      	ldr	r2, [sp, #16]
 8006958:	b9d8      	cbnz	r0, 8006992 <_svfiprintf_r+0xe6>
 800695a:	06d0      	lsls	r0, r2, #27
 800695c:	bf44      	itt	mi
 800695e:	2320      	movmi	r3, #32
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006964:	0711      	lsls	r1, r2, #28
 8006966:	bf44      	itt	mi
 8006968:	232b      	movmi	r3, #43	; 0x2b
 800696a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800696e:	f89a 3000 	ldrb.w	r3, [sl]
 8006972:	2b2a      	cmp	r3, #42	; 0x2a
 8006974:	d015      	beq.n	80069a2 <_svfiprintf_r+0xf6>
 8006976:	9a07      	ldr	r2, [sp, #28]
 8006978:	4654      	mov	r4, sl
 800697a:	2000      	movs	r0, #0
 800697c:	f04f 0c0a 	mov.w	ip, #10
 8006980:	4621      	mov	r1, r4
 8006982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006986:	3b30      	subs	r3, #48	; 0x30
 8006988:	2b09      	cmp	r3, #9
 800698a:	d94d      	bls.n	8006a28 <_svfiprintf_r+0x17c>
 800698c:	b1b0      	cbz	r0, 80069bc <_svfiprintf_r+0x110>
 800698e:	9207      	str	r2, [sp, #28]
 8006990:	e014      	b.n	80069bc <_svfiprintf_r+0x110>
 8006992:	eba0 0308 	sub.w	r3, r0, r8
 8006996:	fa09 f303 	lsl.w	r3, r9, r3
 800699a:	4313      	orrs	r3, r2
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	46a2      	mov	sl, r4
 80069a0:	e7d2      	b.n	8006948 <_svfiprintf_r+0x9c>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	9103      	str	r1, [sp, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfbb      	ittet	lt
 80069ae:	425b      	neglt	r3, r3
 80069b0:	f042 0202 	orrlt.w	r2, r2, #2
 80069b4:	9307      	strge	r3, [sp, #28]
 80069b6:	9307      	strlt	r3, [sp, #28]
 80069b8:	bfb8      	it	lt
 80069ba:	9204      	strlt	r2, [sp, #16]
 80069bc:	7823      	ldrb	r3, [r4, #0]
 80069be:	2b2e      	cmp	r3, #46	; 0x2e
 80069c0:	d10c      	bne.n	80069dc <_svfiprintf_r+0x130>
 80069c2:	7863      	ldrb	r3, [r4, #1]
 80069c4:	2b2a      	cmp	r3, #42	; 0x2a
 80069c6:	d134      	bne.n	8006a32 <_svfiprintf_r+0x186>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	9203      	str	r2, [sp, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bfb8      	it	lt
 80069d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069d8:	3402      	adds	r4, #2
 80069da:	9305      	str	r3, [sp, #20]
 80069dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006aa4 <_svfiprintf_r+0x1f8>
 80069e0:	7821      	ldrb	r1, [r4, #0]
 80069e2:	2203      	movs	r2, #3
 80069e4:	4650      	mov	r0, sl
 80069e6:	f7f9 fc1b 	bl	8000220 <memchr>
 80069ea:	b138      	cbz	r0, 80069fc <_svfiprintf_r+0x150>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	eba0 000a 	sub.w	r0, r0, sl
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	4082      	lsls	r2, r0
 80069f6:	4313      	orrs	r3, r2
 80069f8:	3401      	adds	r4, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a00:	4825      	ldr	r0, [pc, #148]	; (8006a98 <_svfiprintf_r+0x1ec>)
 8006a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a06:	2206      	movs	r2, #6
 8006a08:	f7f9 fc0a 	bl	8000220 <memchr>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d038      	beq.n	8006a82 <_svfiprintf_r+0x1d6>
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <_svfiprintf_r+0x1f0>)
 8006a12:	bb1b      	cbnz	r3, 8006a5c <_svfiprintf_r+0x1b0>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	3307      	adds	r3, #7
 8006a18:	f023 0307 	bic.w	r3, r3, #7
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	9303      	str	r3, [sp, #12]
 8006a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a22:	4433      	add	r3, r6
 8006a24:	9309      	str	r3, [sp, #36]	; 0x24
 8006a26:	e768      	b.n	80068fa <_svfiprintf_r+0x4e>
 8006a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	2001      	movs	r0, #1
 8006a30:	e7a6      	b.n	8006980 <_svfiprintf_r+0xd4>
 8006a32:	2300      	movs	r3, #0
 8006a34:	3401      	adds	r4, #1
 8006a36:	9305      	str	r3, [sp, #20]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f04f 0c0a 	mov.w	ip, #10
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a44:	3a30      	subs	r2, #48	; 0x30
 8006a46:	2a09      	cmp	r2, #9
 8006a48:	d903      	bls.n	8006a52 <_svfiprintf_r+0x1a6>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0c6      	beq.n	80069dc <_svfiprintf_r+0x130>
 8006a4e:	9105      	str	r1, [sp, #20]
 8006a50:	e7c4      	b.n	80069dc <_svfiprintf_r+0x130>
 8006a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a56:	4604      	mov	r4, r0
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e7f0      	b.n	8006a3e <_svfiprintf_r+0x192>
 8006a5c:	ab03      	add	r3, sp, #12
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	462a      	mov	r2, r5
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <_svfiprintf_r+0x1f4>)
 8006a64:	a904      	add	r1, sp, #16
 8006a66:	4638      	mov	r0, r7
 8006a68:	f3af 8000 	nop.w
 8006a6c:	1c42      	adds	r2, r0, #1
 8006a6e:	4606      	mov	r6, r0
 8006a70:	d1d6      	bne.n	8006a20 <_svfiprintf_r+0x174>
 8006a72:	89ab      	ldrh	r3, [r5, #12]
 8006a74:	065b      	lsls	r3, r3, #25
 8006a76:	f53f af2d 	bmi.w	80068d4 <_svfiprintf_r+0x28>
 8006a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a7c:	b01d      	add	sp, #116	; 0x74
 8006a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a82:	ab03      	add	r3, sp, #12
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	462a      	mov	r2, r5
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <_svfiprintf_r+0x1f4>)
 8006a8a:	a904      	add	r1, sp, #16
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f000 f879 	bl	8006b84 <_printf_i>
 8006a92:	e7eb      	b.n	8006a6c <_svfiprintf_r+0x1c0>
 8006a94:	08006fc4 	.word	0x08006fc4
 8006a98:	08006fce 	.word	0x08006fce
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	080067f9 	.word	0x080067f9
 8006aa4:	08006fca 	.word	0x08006fca

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4699      	mov	r9, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc26      	bgt.n	8006b3e <_printf_common+0x96>
 8006af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af4:	1e13      	subs	r3, r2, #0
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d42b      	bmi.n	8006b58 <_printf_common+0xb0>
 8006b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b04:	4649      	mov	r1, r9
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d01e      	beq.n	8006b4c <_printf_common+0xa4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	6922      	ldr	r2, [r4, #16]
 8006b12:	f003 0306 	and.w	r3, r3, #6
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf02      	ittt	eq
 8006b1a:	68e5      	ldreq	r5, [r4, #12]
 8006b1c:	6833      	ldreq	r3, [r6, #0]
 8006b1e:	1aed      	subeq	r5, r5, r3
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	bf0c      	ite	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	2500      	movne	r5, #0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfc4      	itt	gt
 8006b2e:	1a9b      	subgt	r3, r3, r2
 8006b30:	18ed      	addgt	r5, r5, r3
 8006b32:	2600      	movs	r6, #0
 8006b34:	341a      	adds	r4, #26
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	d11a      	bne.n	8006b70 <_printf_common+0xc8>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e008      	b.n	8006b50 <_printf_common+0xa8>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4649      	mov	r1, r9
 8006b44:	4638      	mov	r0, r7
 8006b46:	47c0      	blx	r8
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_printf_common+0xac>
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	3501      	adds	r5, #1
 8006b56:	e7c6      	b.n	8006ae6 <_printf_common+0x3e>
 8006b58:	18e1      	adds	r1, r4, r3
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	2030      	movs	r0, #48	; 0x30
 8006b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b62:	4422      	add	r2, r4
 8006b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	e7c7      	b.n	8006b00 <_printf_common+0x58>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4622      	mov	r2, r4
 8006b74:	4649      	mov	r1, r9
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c0      	blx	r8
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d0e6      	beq.n	8006b4c <_printf_common+0xa4>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7d9      	b.n	8006b36 <_printf_common+0x8e>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	7e0f      	ldrb	r7, [r1, #24]
 8006b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b8c:	2f78      	cmp	r7, #120	; 0x78
 8006b8e:	4691      	mov	r9, r2
 8006b90:	4680      	mov	r8, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	469a      	mov	sl, r3
 8006b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b9a:	d807      	bhi.n	8006bac <_printf_i+0x28>
 8006b9c:	2f62      	cmp	r7, #98	; 0x62
 8006b9e:	d80a      	bhi.n	8006bb6 <_printf_i+0x32>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f000 80d4 	beq.w	8006d4e <_printf_i+0x1ca>
 8006ba6:	2f58      	cmp	r7, #88	; 0x58
 8006ba8:	f000 80c0 	beq.w	8006d2c <_printf_i+0x1a8>
 8006bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb4:	e03a      	b.n	8006c2c <_printf_i+0xa8>
 8006bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bba:	2b15      	cmp	r3, #21
 8006bbc:	d8f6      	bhi.n	8006bac <_printf_i+0x28>
 8006bbe:	a101      	add	r1, pc, #4	; (adr r1, 8006bc4 <_printf_i+0x40>)
 8006bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006bad 	.word	0x08006bad
 8006bd0:	08006bad 	.word	0x08006bad
 8006bd4:	08006bad 	.word	0x08006bad
 8006bd8:	08006bad 	.word	0x08006bad
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006bad 	.word	0x08006bad
 8006be4:	08006bad 	.word	0x08006bad
 8006be8:	08006bad 	.word	0x08006bad
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	08006d35 	.word	0x08006d35
 8006bf4:	08006c5d 	.word	0x08006c5d
 8006bf8:	08006cef 	.word	0x08006cef
 8006bfc:	08006bad 	.word	0x08006bad
 8006c00:	08006bad 	.word	0x08006bad
 8006c04:	08006d57 	.word	0x08006d57
 8006c08:	08006bad 	.word	0x08006bad
 8006c0c:	08006c5d 	.word	0x08006c5d
 8006c10:	08006bad 	.word	0x08006bad
 8006c14:	08006bad 	.word	0x08006bad
 8006c18:	08006cf7 	.word	0x08006cf7
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	602a      	str	r2, [r5, #0]
 8006c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e09f      	b.n	8006d70 <_printf_i+0x1ec>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	0607      	lsls	r7, r0, #24
 8006c36:	f103 0104 	add.w	r1, r3, #4
 8006c3a:	6029      	str	r1, [r5, #0]
 8006c3c:	d501      	bpl.n	8006c42 <_printf_i+0xbe>
 8006c3e:	681e      	ldr	r6, [r3, #0]
 8006c40:	e003      	b.n	8006c4a <_printf_i+0xc6>
 8006c42:	0646      	lsls	r6, r0, #25
 8006c44:	d5fb      	bpl.n	8006c3e <_printf_i+0xba>
 8006c46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c4a:	2e00      	cmp	r6, #0
 8006c4c:	da03      	bge.n	8006c56 <_printf_i+0xd2>
 8006c4e:	232d      	movs	r3, #45	; 0x2d
 8006c50:	4276      	negs	r6, r6
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c56:	485a      	ldr	r0, [pc, #360]	; (8006dc0 <_printf_i+0x23c>)
 8006c58:	230a      	movs	r3, #10
 8006c5a:	e012      	b.n	8006c82 <_printf_i+0xfe>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	1d19      	adds	r1, r3, #4
 8006c62:	6029      	str	r1, [r5, #0]
 8006c64:	0605      	lsls	r5, r0, #24
 8006c66:	d501      	bpl.n	8006c6c <_printf_i+0xe8>
 8006c68:	681e      	ldr	r6, [r3, #0]
 8006c6a:	e002      	b.n	8006c72 <_printf_i+0xee>
 8006c6c:	0641      	lsls	r1, r0, #25
 8006c6e:	d5fb      	bpl.n	8006c68 <_printf_i+0xe4>
 8006c70:	881e      	ldrh	r6, [r3, #0]
 8006c72:	4853      	ldr	r0, [pc, #332]	; (8006dc0 <_printf_i+0x23c>)
 8006c74:	2f6f      	cmp	r7, #111	; 0x6f
 8006c76:	bf0c      	ite	eq
 8006c78:	2308      	moveq	r3, #8
 8006c7a:	230a      	movne	r3, #10
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c82:	6865      	ldr	r5, [r4, #4]
 8006c84:	60a5      	str	r5, [r4, #8]
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	bfa2      	ittt	ge
 8006c8a:	6821      	ldrge	r1, [r4, #0]
 8006c8c:	f021 0104 	bicge.w	r1, r1, #4
 8006c90:	6021      	strge	r1, [r4, #0]
 8006c92:	b90e      	cbnz	r6, 8006c98 <_printf_i+0x114>
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	d04b      	beq.n	8006d30 <_printf_i+0x1ac>
 8006c98:	4615      	mov	r5, r2
 8006c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006ca2:	5dc7      	ldrb	r7, [r0, r7]
 8006ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca8:	4637      	mov	r7, r6
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	460e      	mov	r6, r1
 8006cae:	d9f4      	bls.n	8006c9a <_printf_i+0x116>
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d10b      	bne.n	8006ccc <_printf_i+0x148>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	07de      	lsls	r6, r3, #31
 8006cb8:	d508      	bpl.n	8006ccc <_printf_i+0x148>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	6861      	ldr	r1, [r4, #4]
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	bfde      	ittt	le
 8006cc2:	2330      	movle	r3, #48	; 0x30
 8006cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ccc:	1b52      	subs	r2, r2, r5
 8006cce:	6122      	str	r2, [r4, #16]
 8006cd0:	f8cd a000 	str.w	sl, [sp]
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	aa03      	add	r2, sp, #12
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4640      	mov	r0, r8
 8006cdc:	f7ff fee4 	bl	8006aa8 <_printf_common>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d14a      	bne.n	8006d7a <_printf_i+0x1f6>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	b004      	add	sp, #16
 8006cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	f043 0320 	orr.w	r3, r3, #32
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	4833      	ldr	r0, [pc, #204]	; (8006dc4 <_printf_i+0x240>)
 8006cf8:	2778      	movs	r7, #120	; 0x78
 8006cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	6829      	ldr	r1, [r5, #0]
 8006d02:	061f      	lsls	r7, r3, #24
 8006d04:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d08:	d402      	bmi.n	8006d10 <_printf_i+0x18c>
 8006d0a:	065f      	lsls	r7, r3, #25
 8006d0c:	bf48      	it	mi
 8006d0e:	b2b6      	uxthmi	r6, r6
 8006d10:	07df      	lsls	r7, r3, #31
 8006d12:	bf48      	it	mi
 8006d14:	f043 0320 	orrmi.w	r3, r3, #32
 8006d18:	6029      	str	r1, [r5, #0]
 8006d1a:	bf48      	it	mi
 8006d1c:	6023      	strmi	r3, [r4, #0]
 8006d1e:	b91e      	cbnz	r6, 8006d28 <_printf_i+0x1a4>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	2310      	movs	r3, #16
 8006d2a:	e7a7      	b.n	8006c7c <_printf_i+0xf8>
 8006d2c:	4824      	ldr	r0, [pc, #144]	; (8006dc0 <_printf_i+0x23c>)
 8006d2e:	e7e4      	b.n	8006cfa <_printf_i+0x176>
 8006d30:	4615      	mov	r5, r2
 8006d32:	e7bd      	b.n	8006cb0 <_printf_i+0x12c>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	6826      	ldr	r6, [r4, #0]
 8006d38:	6961      	ldr	r1, [r4, #20]
 8006d3a:	1d18      	adds	r0, r3, #4
 8006d3c:	6028      	str	r0, [r5, #0]
 8006d3e:	0635      	lsls	r5, r6, #24
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	d501      	bpl.n	8006d48 <_printf_i+0x1c4>
 8006d44:	6019      	str	r1, [r3, #0]
 8006d46:	e002      	b.n	8006d4e <_printf_i+0x1ca>
 8006d48:	0670      	lsls	r0, r6, #25
 8006d4a:	d5fb      	bpl.n	8006d44 <_printf_i+0x1c0>
 8006d4c:	8019      	strh	r1, [r3, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	4615      	mov	r5, r2
 8006d54:	e7bc      	b.n	8006cd0 <_printf_i+0x14c>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	602a      	str	r2, [r5, #0]
 8006d5c:	681d      	ldr	r5, [r3, #0]
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	2100      	movs	r1, #0
 8006d62:	4628      	mov	r0, r5
 8006d64:	f7f9 fa5c 	bl	8000220 <memchr>
 8006d68:	b108      	cbz	r0, 8006d6e <_printf_i+0x1ea>
 8006d6a:	1b40      	subs	r0, r0, r5
 8006d6c:	6060      	str	r0, [r4, #4]
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	2300      	movs	r3, #0
 8006d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d78:	e7aa      	b.n	8006cd0 <_printf_i+0x14c>
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	47d0      	blx	sl
 8006d84:	3001      	adds	r0, #1
 8006d86:	d0ad      	beq.n	8006ce4 <_printf_i+0x160>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	079b      	lsls	r3, r3, #30
 8006d8c:	d413      	bmi.n	8006db6 <_printf_i+0x232>
 8006d8e:	68e0      	ldr	r0, [r4, #12]
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	4298      	cmp	r0, r3
 8006d94:	bfb8      	it	lt
 8006d96:	4618      	movlt	r0, r3
 8006d98:	e7a6      	b.n	8006ce8 <_printf_i+0x164>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	47d0      	blx	sl
 8006da4:	3001      	adds	r0, #1
 8006da6:	d09d      	beq.n	8006ce4 <_printf_i+0x160>
 8006da8:	3501      	adds	r5, #1
 8006daa:	68e3      	ldr	r3, [r4, #12]
 8006dac:	9903      	ldr	r1, [sp, #12]
 8006dae:	1a5b      	subs	r3, r3, r1
 8006db0:	42ab      	cmp	r3, r5
 8006db2:	dcf2      	bgt.n	8006d9a <_printf_i+0x216>
 8006db4:	e7eb      	b.n	8006d8e <_printf_i+0x20a>
 8006db6:	2500      	movs	r5, #0
 8006db8:	f104 0619 	add.w	r6, r4, #25
 8006dbc:	e7f5      	b.n	8006daa <_printf_i+0x226>
 8006dbe:	bf00      	nop
 8006dc0:	08006fd5 	.word	0x08006fd5
 8006dc4:	08006fe6 	.word	0x08006fe6

08006dc8 <memmove>:
 8006dc8:	4288      	cmp	r0, r1
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	eb01 0402 	add.w	r4, r1, r2
 8006dd0:	d902      	bls.n	8006dd8 <memmove+0x10>
 8006dd2:	4284      	cmp	r4, r0
 8006dd4:	4623      	mov	r3, r4
 8006dd6:	d807      	bhi.n	8006de8 <memmove+0x20>
 8006dd8:	1e43      	subs	r3, r0, #1
 8006dda:	42a1      	cmp	r1, r4
 8006ddc:	d008      	beq.n	8006df0 <memmove+0x28>
 8006dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006de6:	e7f8      	b.n	8006dda <memmove+0x12>
 8006de8:	4402      	add	r2, r0
 8006dea:	4601      	mov	r1, r0
 8006dec:	428a      	cmp	r2, r1
 8006dee:	d100      	bne.n	8006df2 <memmove+0x2a>
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dfa:	e7f7      	b.n	8006dec <memmove+0x24>

08006dfc <_sbrk_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	; (8006e18 <_sbrk_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fa fd54 	bl	80018b4 <_sbrk>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_sbrk_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_sbrk_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20000e0c 	.word	0x20000e0c

08006e1c <memcpy>:
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e24:	d100      	bne.n	8006e28 <memcpy+0xc>
 8006e26:	4770      	bx	lr
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e32:	4291      	cmp	r1, r2
 8006e34:	d1f9      	bne.n	8006e2a <memcpy+0xe>
 8006e36:	bd10      	pop	{r4, pc}

08006e38 <_realloc_r>:
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	4614      	mov	r4, r2
 8006e40:	460e      	mov	r6, r1
 8006e42:	b921      	cbnz	r1, 8006e4e <_realloc_r+0x16>
 8006e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	4611      	mov	r1, r2
 8006e4a:	f7ff bc49 	b.w	80066e0 <_malloc_r>
 8006e4e:	b92a      	cbnz	r2, 8006e5c <_realloc_r+0x24>
 8006e50:	f7ff fbda 	bl	8006608 <_free_r>
 8006e54:	4625      	mov	r5, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	f000 f81b 	bl	8006e96 <_malloc_usable_size_r>
 8006e60:	4284      	cmp	r4, r0
 8006e62:	4607      	mov	r7, r0
 8006e64:	d802      	bhi.n	8006e6c <_realloc_r+0x34>
 8006e66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e6a:	d812      	bhi.n	8006e92 <_realloc_r+0x5a>
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7ff fc36 	bl	80066e0 <_malloc_r>
 8006e74:	4605      	mov	r5, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d0ed      	beq.n	8006e56 <_realloc_r+0x1e>
 8006e7a:	42bc      	cmp	r4, r7
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4631      	mov	r1, r6
 8006e80:	bf28      	it	cs
 8006e82:	463a      	movcs	r2, r7
 8006e84:	f7ff ffca 	bl	8006e1c <memcpy>
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	f7ff fbbc 	bl	8006608 <_free_r>
 8006e90:	e7e1      	b.n	8006e56 <_realloc_r+0x1e>
 8006e92:	4635      	mov	r5, r6
 8006e94:	e7df      	b.n	8006e56 <_realloc_r+0x1e>

08006e96 <_malloc_usable_size_r>:
 8006e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9a:	1f18      	subs	r0, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfbc      	itt	lt
 8006ea0:	580b      	ldrlt	r3, [r1, r0]
 8006ea2:	18c0      	addlt	r0, r0, r3
 8006ea4:	4770      	bx	lr
	...

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
