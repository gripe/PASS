
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c00  08005c00  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c08  08005c08  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000080  08005c90  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  08005c90  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111fe  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027b4  00000000  00000000  000312f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262d1  00000000  00000000  0003532e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012081  00000000  00000000  0005b5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eebf6  00000000  00000000  0006d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb4  00000000  00000000  0015c278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b68 	.word	0x08005b68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08005b68 	.word	0x08005b68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_ADC_ConvCpltCallback>:
uint32_t adc_get;
uint16_t sai_fifo[16];


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	sprintf(MSG, "ADC Read=%lu\r\n", adc_get);
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x38>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	490b      	ldr	r1, [pc, #44]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <HAL_ADC_ConvCpltCallback+0x40>)
 80005be:	f004 fe2f 	bl	8005220 <siprintf>
	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 0xFFFF);
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	2223      	movs	r2, #35	; 0x23
 80005c8:	4908      	ldr	r1, [pc, #32]	; (80005ec <HAL_ADC_ConvCpltCallback+0x40>)
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x44>)
 80005cc:	f003 feac 	bl	8004328 <HAL_UART_Transmit>
    HAL_ADC_Start_DMA(hadc, &adc_get, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	4904      	ldr	r1, [pc, #16]	; (80005e4 <HAL_ADC_ConvCpltCallback+0x38>)
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 fe05 	bl	80011e4 <HAL_ADC_Start_DMA>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000758 	.word	0x20000758
 80005e8:	08005b80 	.word	0x08005b80
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200001c8 	.word	0x200001c8

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fd2e 	bl	800105a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f83d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9cf 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f000 f9af 	bl	8000968 <MX_DMA_Init>
  MX_SAI1_Init();
 800060a:	f000 f8f3 	bl	80007f4 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 f97d 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8000612:	f000 f94b 	bl	80008ac <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000616:	f000 f89b 	bl	8000750 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sai_fifo[0] = 1024;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x78>)
 800061c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000620:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, &adc_get, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	4912      	ldr	r1, [pc, #72]	; (8000670 <main+0x7c>)
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0x80>)
 8000628:	f000 fddc 	bl	80011e4 <HAL_ADC_Start_DMA>
  while (1)
  {
	  for (int i = 1; i < 16; i ++)
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e00b      	b.n	800064a <main+0x56>
		  sai_fifo[i] = sai_fifo[i - 1];
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <main+0x78>)
 8000638:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <main+0x78>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 1; i < 16; i ++)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	ddf0      	ble.n	8000632 <main+0x3e>
	sai_fifo[0] = adc_get;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <main+0x7c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <main+0x78>)
 8000658:	801a      	strh	r2, [r3, #0]
	HAL_SAI_Transmit(&hsai_BlockA1, (uint8_t*)&sai_fifo, 32, -1);
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2220      	movs	r2, #32
 8000660:	4902      	ldr	r1, [pc, #8]	; (800066c <main+0x78>)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0x84>)
 8000664:	f003 fcbe 	bl	8003fe4 <HAL_SAI_Transmit>
	  for (int i = 1; i < 16; i ++)
 8000668:	e7e0      	b.n	800062c <main+0x38>
 800066a:	bf00      	nop
 800066c:	2000075c 	.word	0x2000075c
 8000670:	20000758 	.word	0x20000758
 8000674:	2000009c 	.word	0x2000009c
 8000678:	20000144 	.word	0x20000144

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fde8 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f002 f918 	bl	80028d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006f0:	2348      	movs	r3, #72	; 0x48
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f8:	2303      	movs	r3, #3
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f8f7 	bl	80028f4 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f9f8 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000722:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fb84 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 f9e1 	bl	8000b00 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_ADC1_Init+0x9c>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000790:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xa0>)
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_ADC1_Init+0x98>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007b0:	f000 fcd4 	bl	800115c <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f9a1 	bl	8000b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007d0:	f000 fe16 	bl	8001400 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 f991 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001

080007f4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_SAI1_Init+0xb0>)
 80007fa:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <MX_SAI1_Init+0xb4>)
 80007fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800080c:	2240      	movs	r2, #64	; 0x40
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000812:	2200      	movs	r2, #0
 8000814:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000836:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800083a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 100;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800085e:	2264      	movs	r2, #100	; 0x64
 8000860:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000864:	2200      	movs	r2, #0
 8000866:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800086a:	2200      	movs	r2, #0
 800086c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000870:	2200      	movs	r2, #0
 8000872:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000876:	2200      	movs	r2, #0
 8000878:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SAI1_Init+0xb0>)
 800087c:	2200      	movs	r2, #0
 800087e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000882:	2210      	movs	r2, #16
 8000884:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_SAI1_Init+0xb0>)
 8000890:	f003 fa2a 	bl	8003ce8 <HAL_SAI_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800089a:	f000 f931 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000144 	.word	0x20000144
 80008a8:	40015804 	.word	0x40015804

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART3_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART3_UART_Init+0x58>)
 80008f0:	f003 fccc 	bl	800428c <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f901 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001c8 	.word	0x200001c8
 8000908:	40004800 	.word	0x40004800

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 fe77 	bl	8002642 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8d1 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000250 	.word	0x20000250

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_DMA_Init+0x38>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <MX_DMA_Init+0x38>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_DMA_Init+0x38>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2038      	movs	r0, #56	; 0x38
 800098c:	f001 f8e5 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000990:	2038      	movs	r0, #56	; 0x38
 8000992:	f001 f8fe 	bl	8001b92 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4d      	ldr	r2, [pc, #308]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a41      	ldr	r2, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x150>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a3b      	ldr	r2, [pc, #236]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a35      	ldr	r2, [pc, #212]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000a6a:	f001 fdd1 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4822      	ldr	r0, [pc, #136]	; (8000afc <MX_GPIO_Init+0x158>)
 8000a74:	f001 fdcc 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000a96:	f001 fc0f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a9a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000ab4:	f001 fc00 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0x158>)
 8000ad0:	f001 fbf2 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x158>)
 8000ae8:	f001 fbe6 	bl	80022b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  unsigned char error[25] = "Error occured!";
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <Error_Handler+0x38>)
 8000b0c:	1d3c      	adds	r4, r7, #4
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	c407      	stmia	r4!, {r0, r1, r2}
 8000b12:	8023      	strh	r3, [r4, #0]
 8000b14:	3402      	adds	r4, #2
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	7023      	strb	r3, [r4, #0]
 8000b1a:	f107 0313 	add.w	r3, r7, #19
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	811a      	strh	r2, [r3, #8]
  while (1)
  {

	 HAL_UART_Transmit(&huart3, error, sizeof(error), 0xFFFF);
 8000b26:	1d39      	adds	r1, r7, #4
 8000b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2c:	2219      	movs	r2, #25
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <Error_Handler+0x3c>)
 8000b30:	f003 fbfa 	bl	8004328 <HAL_UART_Transmit>
 8000b34:	e7f7      	b.n	8000b26 <Error_Handler+0x26>
 8000b36:	bf00      	nop
 8000b38:	08005b90 	.word	0x08005b90
 8000b3c:	200001c8 	.word	0x200001c8

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <HAL_ADC_MspInit+0xd4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d154      	bne.n	8000c54 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_ADC_MspInit+0xd8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	481d      	ldr	r0, [pc, #116]	; (8000c64 <HAL_ADC_MspInit+0xdc>)
 8000bee:	f001 fb63 	bl	80022b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_ADC_MspInit+0xe4>)
 8000bf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c3a:	f000 ffc5 	bl	8001bc8 <HAL_DMA_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c44:	f7ff ff5c 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_ADC_MspInit+0xe0>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	200000e4 	.word	0x200000e4
 8000c6c:	40026410 	.word	0x40026410

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0aa      	sub	sp, #168	; 0xa8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2284      	movs	r2, #132	; 0x84
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fae5 	bl	8005260 <memset>
  if(huart->Instance==USART3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d13c      	bne.n	8000d1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 faea 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cba:	f7ff ff21 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0xbc>)
 8000d16:	f001 facf 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	37a8      	adds	r7, #168	; 0xa8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004800 	.word	0x40004800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	; 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	2284      	movs	r2, #132	; 0x84
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fa85 	bl	8005260 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5e:	d159      	bne.n	8000e14 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fa89 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d7c:	f7ff fec0 	bl	8000b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db2:	230a      	movs	r3, #10
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <HAL_PCD_MspInit+0xf0>)
 8000dc0:	f001 fa7a 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4810      	ldr	r0, [pc, #64]	; (8000e20 <HAL_PCD_MspInit+0xf0>)
 8000de0:	f001 fa6a 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	6353      	str	r3, [r2, #52]	; 0x34
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6453      	str	r3, [r2, #68]	; 0x44
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_PCD_MspInit+0xec>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	37b0      	adds	r7, #176	; 0xb0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0aa      	sub	sp, #168	; 0xa8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2284      	movs	r2, #132	; 0x84
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fa13 	bl	8005260 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a30      	ldr	r2, [pc, #192]	; (8000f00 <HAL_SAI_MspInit+0xdc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d159      	bne.n	8000ef8 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000e44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fa0c 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8000e76:	f7ff fe43 	bl	8000b00 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <HAL_SAI_MspInit+0xe0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_SAI_MspInit+0xe4>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_SAI_MspInit+0xe4>)
 8000e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_SAI_MspInit+0xe4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_SAI_MspInit+0xe0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <HAL_SAI_MspInit+0xe0>)
 8000ea2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ea4:	2350      	movs	r3, #80	; 0x50
 8000ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4810      	ldr	r0, [pc, #64]	; (8000f0c <HAL_SAI_MspInit+0xe8>)
 8000eca:	f001 f9f5 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <HAL_SAI_MspInit+0xe8>)
 8000ef4:	f001 f9e0 	bl	80022b8 <HAL_GPIO_Init>

    }
}
 8000ef8:	bf00      	nop
 8000efa:	37a8      	adds	r7, #168	; 0xa8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40015804 	.word	0x40015804
 8000f04:	2000077c 	.word	0x2000077c
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f8ba 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA2_Stream0_IRQHandler+0x10>)
 8000f6a:	f000 ff3b 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000e4 	.word	0x200000e4

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f004 f962 	bl	8005270 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20050000 	.word	0x20050000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	20000780 	.word	0x20000780
 8000fe0:	200008d0 	.word	0x200008d0

08000fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd7 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f004 f921 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fadb 	bl	80005f4 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800104c:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 8001050:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001054:	200008d0 	.word	0x200008d0

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>

0800105a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fd70 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f805 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fd69 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fd8b 	bl	8001bae <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 fd53 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000024 	.word	0x20000024
 80010cc:	2000002c 	.word	0x2000002c
 80010d0:	20000028 	.word	0x20000028

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000002c 	.word	0x2000002c
 80010f8:	20000784 	.word	0x20000784

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000784 	.word	0x20000784

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000002c 	.word	0x2000002c

0800115c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e031      	b.n	80011d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fd04 	bl	8000b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_Init+0x84>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fa7e 	bl	80016ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	e001      	b.n	80011cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	ffffeefd 	.word	0xffffeefd

080011e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Start_DMA+0x1e>
 80011fe:	2302      	movs	r3, #2
 8001200:	e0d4      	b.n	80013ac <HAL_ADC_Start_DMA+0x1c8>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d018      	beq.n	800124a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001228:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <HAL_ADC_Start_DMA+0x1d0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a62      	ldr	r2, [pc, #392]	; (80013b8 <HAL_ADC_Start_DMA+0x1d4>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9a      	lsrs	r2, r3, #18
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800123c:	e002      	b.n	8001244 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3b01      	subs	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f9      	bne.n	800123e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	f040 809c 	bne.w	8001392 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_ADC_Start_DMA+0x1d8>)
 8001260:	4013      	ands	r3, r2
 8001262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001294:	d106      	bne.n	80012a4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f023 0206 	bic.w	r2, r3, #6
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
 80012a2:	e002      	b.n	80012aa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	4a42      	ldr	r2, [pc, #264]	; (80013c0 <HAL_ADC_Start_DMA+0x1dc>)
 80012b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <HAL_ADC_Start_DMA+0x1e0>)
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <HAL_ADC_Start_DMA+0x1e4>)
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	334c      	adds	r3, #76	; 0x4c
 80012fe:	4619      	mov	r1, r3
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f000 fd0e 	bl	8001d24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_ADC_Start_DMA+0x1e8>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d143      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	e03a      	b.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <HAL_ADC_Start_DMA+0x1ec>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10e      	bne.n	800135c <HAL_ADC_Start_DMA+0x178>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800135a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_ADC_Start_DMA+0x1e8>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	d120      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_ADC_Start_DMA+0x1f0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d11b      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d114      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e00b      	b.n	80013aa <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f043 0210 	orr.w	r2, r3, #16
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000024 	.word	0x20000024
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	fffff8fe 	.word	0xfffff8fe
 80013c0:	080018a1 	.word	0x080018a1
 80013c4:	0800195b 	.word	0x0800195b
 80013c8:	08001977 	.word	0x08001977
 80013cc:	40012300 	.word	0x40012300
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40012200 	.word	0x40012200

080013d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1c>
 8001418:	2302      	movs	r3, #2
 800141a:	e136      	b.n	800168a <HAL_ADC_ConfigChannel+0x28a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d93a      	bls.n	80014a2 <HAL_ADC_ConfigChannel+0xa2>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001434:	d035      	beq.n	80014a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68d9      	ldr	r1, [r3, #12]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	3b1e      	subs	r3, #30
 800144c:	2207      	movs	r2, #7
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a8d      	ldr	r2, [pc, #564]	; (8001698 <HAL_ADC_ConfigChannel+0x298>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10a      	bne.n	800147c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68d9      	ldr	r1, [r3, #12]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147a:	e035      	b.n	80014e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68d9      	ldr	r1, [r3, #12]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	4603      	mov	r3, r0
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4403      	add	r3, r0
 8001494:	3b1e      	subs	r3, #30
 8001496:	409a      	lsls	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a0:	e022      	b.n	80014e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	2207      	movs	r2, #7
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43da      	mvns	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	400a      	ands	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6919      	ldr	r1, [r3, #16]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	4603      	mov	r3, r0
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4403      	add	r3, r0
 80014de:	409a      	lsls	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	d824      	bhi.n	800153a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b05      	subs	r3, #5
 8001502:	221f      	movs	r2, #31
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b05      	subs	r3, #5
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
 8001538:	e04c      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d824      	bhi.n	800158c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b23      	subs	r3, #35	; 0x23
 8001554:	221f      	movs	r2, #31
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	400a      	ands	r2, r1
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3b23      	subs	r3, #35	; 0x23
 800157e:	fa00 f203 	lsl.w	r2, r0, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
 800158a:	e023      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b41      	subs	r3, #65	; 0x41
 800159e:	221f      	movs	r2, #31
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43da      	mvns	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	400a      	ands	r2, r1
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b41      	subs	r3, #65	; 0x41
 80015c8:	fa00 f203 	lsl.w	r2, r0, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_ADC_ConfigChannel+0x29c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10a      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1f4>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80015ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_ADC_ConfigChannel+0x29c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10f      	bne.n	800161e <HAL_ADC_ConfigChannel+0x21e>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b12      	cmp	r3, #18
 8001604:	d10b      	bne.n	800161e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800160c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001610:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_ADC_ConfigChannel+0x29c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d12b      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x280>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_ADC_ConfigChannel+0x298>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_ADC_ConfigChannel+0x23a>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b11      	cmp	r3, #17
 8001638:	d122      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001640:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001644:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800164c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001650:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_ADC_ConfigChannel+0x298>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d111      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001672:	e002      	b.n	800167a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3b01      	subs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	10000012 	.word	0x10000012
 800169c:	40012000 	.word	0x40012000
 80016a0:	40012300 	.word	0x40012300
 80016a4:	20000024 	.word	0x20000024
 80016a8:	431bde83 	.word	0x431bde83

080016ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016b4:	4b78      	ldr	r3, [pc, #480]	; (8001898 <ADC_Init+0x1ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a77      	ldr	r2, [pc, #476]	; (8001898 <ADC_Init+0x1ec>)
 80016ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016c0:	4b75      	ldr	r3, [pc, #468]	; (8001898 <ADC_Init+0x1ec>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4973      	ldr	r1, [pc, #460]	; (8001898 <ADC_Init+0x1ec>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	021a      	lsls	r2, r3, #8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6899      	ldr	r1, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <ADC_Init+0x1f0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e00f      	b.n	80017a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0202 	bic.w	r2, r2, #2
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	005a      	lsls	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01b      	beq.n	800180c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6859      	ldr	r1, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	3b01      	subs	r3, #1
 8001800:	035a      	lsls	r2, r3, #13
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	e007      	b.n	800181c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	3b01      	subs	r3, #1
 8001838:	051a      	lsls	r2, r3, #20
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800185e:	025a      	lsls	r2, r3, #9
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	029a      	lsls	r2, r3, #10
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40012300 	.word	0x40012300
 800189c:	0f000001 	.word	0x0f000001

080018a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13c      	bne.n	8001934 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d12b      	bne.n	800192c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d127      	bne.n	800192c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d119      	bne.n	800192c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0220 	bic.w	r2, r2, #32
 8001906:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7fe fe3d 	bl	80005ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001932:	e00e      	b.n	8001952 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fd53 	bl	80013ec <HAL_ADC_ErrorCallback>
}
 8001946:	e004      	b.n	8001952 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fd35 	bl	80013d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f043 0204 	orr.w	r2, r3, #4
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff fd28 	bl	80013ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <__NVIC_SetPriorityGrouping+0x40>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x40>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	05fa0000 	.word	0x05fa0000

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff3e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff31 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fa92 	bl	80010fc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e099      	b.n	8001d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	e00f      	b.n	8001c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fa79 	bl	80010fc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d908      	bls.n	8001c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e078      	b.n	8001d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e8      	bne.n	8001c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_DMA_Init+0x158>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d117      	bne.n	8001cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fa77 	bl	80021c0 <DMA_CheckFifoParam>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e016      	b.n	8001d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fa2e 	bl	8002154 <DMA_CalcBaseAndBitshift>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	f010803f 	.word	0xf010803f

08001d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA_Start_IT+0x26>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e048      	b.n	8001ddc <HAL_DMA_Start_IT+0xb8>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d137      	bne.n	8001dce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f9c0 	bl	80020f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0216 	orr.w	r2, r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0208 	orr.w	r2, r2, #8
 8001dba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e005      	b.n	8001dda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001df0:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_DMA_IRQHandler+0x248>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a8e      	ldr	r2, [pc, #568]	; (8002030 <HAL_DMA_IRQHandler+0x24c>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2208      	movs	r2, #8
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0204 	bic.w	r2, r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d012      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f043 0202 	orr.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d043      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03c      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2210      	movs	r2, #16
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d024      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
 8001f12:	e01f      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0208 	bic.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2220      	movs	r2, #32
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 808f 	beq.w	8002084 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8087 	beq.w	8002084 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d136      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x1da>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	223f      	movs	r2, #63	; 0x3f
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d07e      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
        }
        return;
 8001ffa:	e079      	b.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	2b00      	cmp	r3, #0
 800201e:	d031      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e02c      	b.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
 800202a:	bf00      	nop
 800202c:	20000024 	.word	0x20000024
 8002030:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d023      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
 8002044:	e01e      	b.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0210 	bic.w	r2, r2, #16
 8002062:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	2b00      	cmp	r3, #0
 800208a:	d032      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d022      	beq.n	80020de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2205      	movs	r2, #5
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d307      	bcc.n	80020cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f2      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x2cc>
 80020ca:	e000      	b.n	80020ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020f0:	bf00      	nop
    }
  }
}
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d108      	bne.n	8002138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002136:	e007      	b.n	8002148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	3b10      	subs	r3, #16
 8002164:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d908      	bls.n	8002194 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 800218a:	4013      	ands	r3, r2
 800218c:	1d1a      	adds	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	659a      	str	r2, [r3, #88]	; 0x58
 8002192:	e006      	b.n	80021a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	aaaaaaab 	.word	0xaaaaaaab
 80021b8:	08005bc4 	.word	0x08005bc4
 80021bc:	fffffc00 	.word	0xfffffc00

080021c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d856      	bhi.n	800228e <DMA_CheckFifoParam+0xce>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <DMA_CheckFifoParam+0x28>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	0800220b 	.word	0x0800220b
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	0800228f 	.word	0x0800228f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d046      	beq.n	8002292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e043      	b.n	8002292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002212:	d140      	bne.n	8002296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e03d      	b.n	8002296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002222:	d121      	bne.n	8002268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d837      	bhi.n	800229a <DMA_CheckFifoParam+0xda>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <DMA_CheckFifoParam+0x70>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	08002247 	.word	0x08002247
 8002238:	08002241 	.word	0x08002241
 800223c:	08002259 	.word	0x08002259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      break;
 8002244:	e030      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d025      	beq.n	800229e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002256:	e022      	b.n	800229e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002260:	d11f      	bne.n	80022a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002266:	e01c      	b.n	80022a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d903      	bls.n	8002276 <DMA_CheckFifoParam+0xb6>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d003      	beq.n	800227c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002274:	e018      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      break;
 800227a:	e015      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e00b      	b.n	80022a6 <DMA_CheckFifoParam+0xe6>
      break;
 800228e:	bf00      	nop
 8002290:	e00a      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e008      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e006      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e004      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e002      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
    }
  } 
  
  return status; 
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e175      	b.n	80025c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8164 	bne.w	80025be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x56>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80be 	beq.w	80025be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_GPIO_Init+0x324>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800245a:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <HAL_GPIO_Init+0x328>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_GPIO_Init+0x32c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d037      	beq.n	80024f6 <HAL_GPIO_Init+0x23e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d031      	beq.n	80024f2 <HAL_GPIO_Init+0x23a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x334>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x236>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a55      	ldr	r2, [pc, #340]	; (80025f0 <HAL_GPIO_Init+0x338>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x232>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_GPIO_Init+0x33c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x22e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_GPIO_Init+0x340>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x22a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x344>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	; (8002600 <HAL_GPIO_Init+0x348>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x34c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	; (8002608 <HAL_GPIO_Init+0x350>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x21a>
 80024ce:	2309      	movs	r3, #9
 80024d0:	e012      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d2:	230a      	movs	r3, #10
 80024d4:	e010      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d6:	2308      	movs	r3, #8
 80024d8:	e00e      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00c      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00a      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e008      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f6:	2300      	movs	r3, #0
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f002 0203 	and.w	r2, r2, #3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4093      	lsls	r3, r2
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <HAL_GPIO_Init+0x328>)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_GPIO_Init+0x354>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_GPIO_Init+0x354>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_GPIO_Init+0x354>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <HAL_GPIO_Init+0x354>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_GPIO_Init+0x354>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_GPIO_Init+0x354>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_GPIO_Init+0x354>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_GPIO_Init+0x354>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	f67f ae86 	bls.w	80022d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40013800 	.word	0x40013800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40022000 	.word	0x40022000
 8002608:	40022400 	.word	0x40022400
 800260c:	40013c00 	.word	0x40013c00

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002644:	b08f      	sub	sp, #60	; 0x3c
 8002646:	af0a      	add	r7, sp, #40	; 0x28
 8002648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e116      	b.n	8002882 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fb5e 	bl	8000d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fb28 	bl	8004ce8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	687e      	ldr	r6, [r7, #4]
 80026a0:	466d      	mov	r5, sp
 80026a2:	f106 0410 	add.w	r4, r6, #16
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b6:	1d33      	adds	r3, r6, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 fabc 	bl	8004c38 <USB_CoreInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0d7      	b.n	8002882 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fb16 	bl	8004d0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e04a      	b.n	800277a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	333d      	adds	r3, #61	; 0x3d
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	333c      	adds	r3, #60	; 0x3c
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	b298      	uxth	r0, r3
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3344      	adds	r3, #68	; 0x44
 8002720:	4602      	mov	r2, r0
 8002722:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3340      	adds	r3, #64	; 0x40
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3348      	adds	r3, #72	; 0x48
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	; 0x4c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3354      	adds	r3, #84	; 0x54
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3301      	adds	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3af      	bcc.n	80026e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e044      	b.n	8002814 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3301      	adds	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b5      	bcc.n	800278a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	687e      	ldr	r6, [r7, #4]
 8002826:	466d      	mov	r5, sp
 8002828:	f106 0410 	add.w	r4, r6, #16
 800282c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002838:	e885 0003 	stmia.w	r5, {r0, r1}
 800283c:	1d33      	adds	r3, r6, #4
 800283e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	f002 faaf 	bl	8004da4 <USB_DevInit>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e014      	b.n	8002882 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f80b 	bl	800288c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fc6d 	bl	800515a <USB_DevDisconnect>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800288c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	10000003 	.word	0x10000003

080028d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e291      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8087 	beq.w	8002a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00c      	beq.n	800293e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002924:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d112      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
 8002930:	4b90      	ldr	r3, [pc, #576]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x130>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d168      	bne.n	8002a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e26b      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x7a>
 8002960:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a83      	ldr	r2, [pc, #524]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x9c>
 8002976:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7e      	ldr	r2, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb92 	bl	80010fc <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fb8e 	bl	80010fc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e21f      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fb7e 	bl	80010fc <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe fb7a 	bl	80010fc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e20b      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x110>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d069      	beq.n	8002b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1df      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	493d      	ldr	r1, [pc, #244]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e040      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fb30 	bl	80010fc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fb2c 	bl	80010fc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1bd      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4929      	ldr	r1, [pc, #164]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fb0c 	bl	80010fc <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fb08 	bl	80010fc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e199      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d038      	beq.n	8002b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fae9 	bl	80010fc <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fae5 	bl	80010fc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e176      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x23a>
 8002b4c:	e01a      	b.n	8002b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe facf 	bl	80010fc <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe facb 	bl	80010fc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d903      	bls.n	8002b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e15c      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
 8002b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a4 	beq.w	8002cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a87      	ldr	r2, [pc, #540]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7e      	ldr	r2, [pc, #504]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fa93 	bl	80010fc <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe fa8f 	bl	80010fc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e120      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x31a>
 8002c00:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e02d      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x33c>
 8002c16:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a69      	ldr	r2, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a66      	ldr	r2, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x35e>
 8002c38:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a60      	ldr	r2, [pc, #384]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b5e      	ldr	r3, [pc, #376]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c52:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a5a      	ldr	r2, [pc, #360]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa43 	bl	80010fc <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fa3f 	bl	80010fc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0ce      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x386>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fa2d 	bl	80010fc <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fa29 	bl	80010fc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0b8      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a4 	beq.w	8002e2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d06b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d149      	bne.n	8002d8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe f9fa 	bl	80010fc <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f9f6 	bl	80010fc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e087      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f9ca 	bl	80010fc <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe f9c6 	bl	80010fc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e057      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x478>
 8002d8a:	e04f      	b.n	8002e2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe f9b0 	bl	80010fc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe f9ac 	bl	80010fc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e03d      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4ac>
 8002dbe:	e035      	b.n	8002e2c <HAL_RCC_OscConfig+0x538>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x544>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0d0      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4965      	ldr	r1, [pc, #404]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d040      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e073      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4936      	ldr	r1, [pc, #216]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe f8e4 	bl	80010fc <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe f8e0 	bl	80010fc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e053      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d210      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	4922      	ldr	r1, [pc, #136]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f821 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1d0>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1d4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f840 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	08005bac 	.word	0x08005bac
 800300c:	20000024 	.word	0x20000024
 8003010:	20000028 	.word	0x20000028

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b094      	sub	sp, #80	; 0x50
 800301a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
 8003020:	2300      	movs	r3, #0
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302c:	4b79      	ldr	r3, [pc, #484]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d00d      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x40>
 8003038:	2b08      	cmp	r3, #8
 800303a:	f200 80e1 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x34>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x3a>
 8003046:	e0db      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCC_GetSysClockFreq+0x204>)
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304c:	e0db      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304e:	4b73      	ldr	r3, [pc, #460]	; (800321c <HAL_RCC_GetSysClockFreq+0x208>)
 8003050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003052:	e0d8      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800305e:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d063      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
 8003074:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003086:	4622      	mov	r2, r4
 8003088:	462b      	mov	r3, r5
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	0159      	lsls	r1, r3, #5
 8003094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003098:	0150      	lsls	r0, r2, #5
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4621      	mov	r1, r4
 80030a0:	1a51      	subs	r1, r2, r1
 80030a2:	6139      	str	r1, [r7, #16]
 80030a4:	4629      	mov	r1, r5
 80030a6:	eb63 0301 	sbc.w	r3, r3, r1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030b8:	4659      	mov	r1, fp
 80030ba:	018b      	lsls	r3, r1, #6
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c2:	4651      	mov	r1, sl
 80030c4:	018a      	lsls	r2, r1, #6
 80030c6:	4651      	mov	r1, sl
 80030c8:	ebb2 0801 	subs.w	r8, r2, r1
 80030cc:	4659      	mov	r1, fp
 80030ce:	eb63 0901 	sbc.w	r9, r3, r1
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e6:	4690      	mov	r8, r2
 80030e8:	4699      	mov	r9, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	eb18 0303 	adds.w	r3, r8, r3
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	462b      	mov	r3, r5
 80030f4:	eb49 0303 	adc.w	r3, r9, r3
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003106:	4629      	mov	r1, r5
 8003108:	024b      	lsls	r3, r1, #9
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003110:	4621      	mov	r1, r4
 8003112:	024a      	lsls	r2, r1, #9
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311a:	2200      	movs	r2, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003124:	f7fd f8c4 	bl	80002b0 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	e058      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	2200      	movs	r2, #0
 800313a:	4618      	mov	r0, r3
 800313c:	4611      	mov	r1, r2
 800313e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800314c:	4642      	mov	r2, r8
 800314e:	464b      	mov	r3, r9
 8003150:	f04f 0000 	mov.w	r0, #0
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	0159      	lsls	r1, r3, #5
 800315a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315e:	0150      	lsls	r0, r2, #5
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4641      	mov	r1, r8
 8003166:	ebb2 0a01 	subs.w	sl, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800317c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003184:	ebb2 040a 	subs.w	r4, r2, sl
 8003188:	eb63 050b 	sbc.w	r5, r3, fp
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	464b      	mov	r3, r9
 80031a8:	eb45 0303 	adc.w	r3, r5, r3
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ba:	4629      	mov	r1, r5
 80031bc:	028b      	lsls	r3, r1, #10
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c4:	4621      	mov	r1, r4
 80031c6:	028a      	lsls	r2, r1, #10
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	61fa      	str	r2, [r7, #28]
 80031d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d8:	f7fd f86a 	bl	80002b0 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031fe:	e002      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetSysClockFreq+0x204>)
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003208:	4618      	mov	r0, r3
 800320a:	3750      	adds	r7, #80	; 0x50
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400
 800321c:	007a1200 	.word	0x007a1200

08003220 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_RCC_GetHCLKFreq+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000024 	.word	0x20000024

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff0 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	08005bbc 	.word	0x08005bbc

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffdc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0b5b      	lsrs	r3, r3, #13
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	08005bbc 	.word	0x08005bbc

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032b0:	4b69      	ldr	r3, [pc, #420]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a68      	ldr	r2, [pc, #416]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032ba:	6093      	str	r3, [r2, #8]
 80032bc:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	4964      	ldr	r1, [pc, #400]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	4959      	ldr	r1, [pc, #356]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003300:	d101      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	494a      	ldr	r1, [pc, #296]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 808b 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	4a39      	ldr	r2, [pc, #228]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6413      	str	r3, [r2, #64]	; 0x40
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a34      	ldr	r2, [pc, #208]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003390:	f7fd feb4 	bl	80010fc <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fd feb0 	bl	80010fc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e357      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d035      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d02e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d114      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fe78 	bl	80010fc <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fe74 	bl	80010fc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e319      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343e:	d111      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800344e:	400b      	ands	r3, r1
 8003450:	4901      	ldr	r1, [pc, #4]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
 8003456:	e00b      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003458:	40023800 	.word	0x40023800
 800345c:	40007000 	.word	0x40007000
 8003460:	0ffffcff 	.word	0x0ffffcff
 8003464:	4baa      	ldr	r3, [pc, #680]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4aa9      	ldr	r2, [pc, #676]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800346e:	6093      	str	r3, [r2, #8]
 8003470:	4ba7      	ldr	r3, [pc, #668]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	49a4      	ldr	r1, [pc, #656]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	4313      	orrs	r3, r2
 8003480:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d010      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800348e:	4ba0      	ldr	r3, [pc, #640]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003494:	4a9e      	ldr	r2, [pc, #632]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800349e:	4b9c      	ldr	r3, [pc, #624]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	4999      	ldr	r1, [pc, #612]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034bc:	4b94      	ldr	r3, [pc, #592]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ca:	4991      	ldr	r1, [pc, #580]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034de:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	4988      	ldr	r1, [pc, #544]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003500:	4b83      	ldr	r3, [pc, #524]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	4980      	ldr	r1, [pc, #512]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003522:	4b7b      	ldr	r3, [pc, #492]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4977      	ldr	r1, [pc, #476]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003544:	4b72      	ldr	r3, [pc, #456]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 0203 	bic.w	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	496f      	ldr	r1, [pc, #444]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003566:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f023 020c 	bic.w	r2, r3, #12
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	4966      	ldr	r1, [pc, #408]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003588:	4b61      	ldr	r3, [pc, #388]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	495e      	ldr	r1, [pc, #376]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035aa:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	4955      	ldr	r1, [pc, #340]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ee:	4b48      	ldr	r3, [pc, #288]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	4944      	ldr	r1, [pc, #272]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	493c      	ldr	r1, [pc, #240]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	4933      	ldr	r1, [pc, #204]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003662:	492b      	ldr	r1, [pc, #172]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d011      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003684:	4922      	ldr	r1, [pc, #136]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003694:	d101      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	4912      	ldr	r1, [pc, #72]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e8:	4909      	ldr	r1, [pc, #36]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d006      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80d9 	beq.w	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a01      	ldr	r2, [pc, #4]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003710:	40023800 	.word	0x40023800
 8003714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003716:	f7fd fcf1 	bl	80010fc <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371e:	f7fd fced 	bl	80010fc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	; 0x64
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e194      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003730:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d021      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11d      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003750:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	019a      	lsls	r2, r3, #6
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	071b      	lsls	r3, r3, #28
 8003784:	4957      	ldr	r1, [pc, #348]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d129      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0f1b      	lsrs	r3, r3, #28
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	493d      	ldr	r1, [pc, #244]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fa:	f023 021f 	bic.w	r2, r3, #31
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	3b01      	subs	r3, #1
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	0e1b      	lsrs	r3, r3, #24
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	0f1b      	lsrs	r3, r3, #28
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	071b      	lsls	r3, r3, #28
 800384c:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	4919      	ldr	r1, [pc, #100]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800388e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd fc34 	bl	80010fc <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003898:	f7fd fc30 	bl	80010fc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0d7      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80cd 	bne.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd fc17 	bl	80010fc <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d2:	f7fd fc13 	bl	80010fc <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d903      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0ba      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e8:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f4:	d0ed      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d12a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800392c:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	0f1b      	lsrs	r3, r3, #28
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	019a      	lsls	r2, r3, #6
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	071b      	lsls	r3, r3, #28
 8003952:	4944      	ldr	r1, [pc, #272]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d022      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	0e1b      	lsrs	r3, r3, #24
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	019a      	lsls	r2, r3, #6
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	4917      	ldr	r1, [pc, #92]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4911      	ldr	r1, [pc, #68]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd fb64 	bl	80010fc <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a38:	f7fd fb60 	bl	80010fc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e007      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d1ef      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a86:	f040 808d 	bne.w	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003a8a:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a90:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a98:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa0:	d07c      	beq.n	8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa8:	d87b      	bhi.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab6:	d039      	beq.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003ab8:	e073      	b.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003aba:	4b87      	ldr	r3, [pc, #540]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac6:	4b84      	ldr	r3, [pc, #528]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ace:	4a83      	ldr	r2, [pc, #524]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e007      	b.n	8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003ad8:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae0:	4a7f      	ldr	r2, [pc, #508]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003ae8:	4b7b      	ldr	r3, [pc, #492]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	0e1b      	lsrs	r3, r3, #24
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003af6:	4b78      	ldr	r3, [pc, #480]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	fb03 f202 	mul.w	r2, r3, r2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003b10:	4b71      	ldr	r3, [pc, #452]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
        break;
 8003b2a:	e03b      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b38:	4b67      	ldr	r3, [pc, #412]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b40:	4a66      	ldr	r2, [pc, #408]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e007      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b52:	4a63      	ldr	r2, [pc, #396]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003b68:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	fb03 f202 	mul.w	r2, r3, r2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003b82:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
        break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003b9c:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003b9e:	617b      	str	r3, [r7, #20]
        break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003ba2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003baa:	f040 808d 	bne.w	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bbc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc4:	d07c      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bcc:	d87b      	bhi.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bda:	d039      	beq.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003bdc:	e073      	b.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf2:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e007      	b.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	0e1b      	lsrs	r3, r3, #24
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	fb03 f202 	mul.w	r2, r3, r2
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
        break;
 8003c4e:	e03b      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e007      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	fb03 f202 	mul.w	r2, r3, r2
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
        break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003cc2:	617b      	str	r3, [r7, #20]
        break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003cc6:	bf00      	nop
      }
    }
  }

  return frequency;
 8003cc8:	697b      	ldr	r3, [r7, #20]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	007a1200 	.word	0x007a1200
 8003ce4:	00bb8000 	.word	0x00bb8000

08003ce8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e156      	b.n	8003fb4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd f882 	bl	8000e24 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa77 	bl	800421c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d00c      	beq.n	8003d50 <HAL_SAI_Init+0x68>
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d80d      	bhi.n	8003d56 <HAL_SAI_Init+0x6e>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_SAI_Init+0x5c>
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d003      	beq.n	8003d4a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003d42:	e008      	b.n	8003d56 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
      break;
 8003d48:	e006      	b.n	8003d58 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	61fb      	str	r3, [r7, #28]
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003d50:	2320      	movs	r3, #32
 8003d52:	61fb      	str	r3, [r7, #28]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_SAI_Init+0x70>
      break;
 8003d56:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d81e      	bhi.n	8003d9e <HAL_SAI_Init+0xb6>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_SAI_Init+0x80>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d7f 	.word	0x08003d7f
 8003d70:	08003d87 	.word	0x08003d87
 8003d74:	08003d8f 	.word	0x08003d8f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d7c:	e010      	b.n	8003da0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d82:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d84:	e00c      	b.n	8003da0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d8a:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d8c:	e008      	b.n	8003da0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d92:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003d9c:	e000      	b.n	8003da0 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003d9e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a85      	ldr	r2, [pc, #532]	; (8003fbc <HAL_SAI_Init+0x2d4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_SAI_Init+0xcc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a84      	ldr	r2, [pc, #528]	; (8003fc0 <HAL_SAI_Init+0x2d8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d103      	bne.n	8003dbc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003db4:	4a83      	ldr	r2, [pc, #524]	; (8003fc4 <HAL_SAI_Init+0x2dc>)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e002      	b.n	8003dc2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003dbc:	4a82      	ldr	r2, [pc, #520]	; (8003fc8 <HAL_SAI_Init+0x2e0>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04c      	beq.n	8003e64 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <HAL_SAI_Init+0x2d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_SAI_Init+0xfa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_SAI_Init+0x2d8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d104      	bne.n	8003dec <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003de2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003de6:	f7ff fe3f 	bl	8003a68 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dea:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <HAL_SAI_Init+0x2e4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_SAI_Init+0x118>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a75      	ldr	r2, [pc, #468]	; (8003fd0 <HAL_SAI_Init+0x2e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d104      	bne.n	8003e0a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003e00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e04:	f7ff fe30 	bl	8003a68 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e08:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	025b      	lsls	r3, r3, #9
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <HAL_SAI_Init+0x2ec>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_SAI_Init+0x2ec>)
 8003e34:	fba3 2301 	umull	r2, r3, r3, r1
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	1aca      	subs	r2, r1, r3
 8003e44:	2a08      	cmp	r2, #8
 8003e46:	d904      	bls.n	8003e52 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d104      	bne.n	8003e64 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	085a      	lsrs	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_SAI_Init+0x18c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d109      	bne.n	8003e88 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_SAI_Init+0x198>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e001      	b.n	8003e84 <HAL_SAI_Init+0x19c>
 8003e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e008      	b.n	8003e9a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d102      	bne.n	8003e96 <HAL_SAI_Init+0x1ae>
 8003e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e94:	e000      	b.n	8003e98 <HAL_SAI_Init+0x1b0>
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <HAL_SAI_Init+0x2f0>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ebe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8003ed2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003ede:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	051b      	lsls	r3, r3, #20
 8003ee6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_SAI_Init+0x2f4>)
 8003efc:	400b      	ands	r3, r1
 8003efe:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_SAI_Init+0x2f8>)
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f3e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003f44:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003f4a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	3b01      	subs	r3, #1
 8003f52:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003f54:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68d9      	ldr	r1, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40015804 	.word	0x40015804
 8003fc0:	40015824 	.word	0x40015824
 8003fc4:	40015800 	.word	0x40015800
 8003fc8:	40015c00 	.word	0x40015c00
 8003fcc:	40015c04 	.word	0x40015c04
 8003fd0:	40015c24 	.word	0x40015c24
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	ff05c010 	.word	0xff05c010
 8003fdc:	ffff1ff0 	.word	0xffff1ff0
 8003fe0:	fff88000 	.word	0xfff88000

08003fe4 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7fd f882 	bl	80010fc <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SAI_Transmit+0x22>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0b6      	b.n	8004178 <HAL_SAI_Transmit+0x194>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 80af 	bne.w	8004176 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_SAI_Transmit+0x42>
 8004022:	2302      	movs	r3, #2
 8004024:	e0a8      	b.n	8004178 <HAL_SAI_Transmit+0x194>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2212      	movs	r2, #18
 8004048:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d17a      	bne.n	8004158 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f88c 	bl	8004180 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004076:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0)
 8004078:	e06e      	b.n	8004158 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d035      	beq.n	80040f6 <HAL_SAI_Transmit+0x112>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d10d      	bne.n	80040ae <HAL_SAI_Transmit+0xca>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	1c59      	adds	r1, r3, #1
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6651      	str	r1, [r2, #100]	; 0x64
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	61da      	str	r2, [r3, #28]
 80040ac:	e01a      	b.n	80040e4 <HAL_SAI_Transmit+0x100>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d80b      	bhi.n	80040ce <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 2;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	665a      	str	r2, [r3, #100]	; 0x64
 80040cc:	e00a      	b.n	80040e4 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr += 4;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80040f4:	e030      	b.n	8004158 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if ((Timeout != HAL_MAX_DELAY) && ((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout)))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d02c      	beq.n	8004158 <HAL_SAI_Transmit+0x174>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_SAI_Transmit+0x130>
 8004104:	f7fc fffa 	bl	80010fc <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d221      	bcs.n	8004158 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800411a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f874 	bl	800421c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0208 	orr.w	r2, r2, #8
 8004142:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e00f      	b.n	8004178 <HAL_SAI_Transmit+0x194>
    while (hsai->XferCount > 0)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800415e:	2b00      	cmp	r3, #0
 8004160:	d18b      	bne.n	800407a <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8004188:	e034      	b.n	80041f4 <SAI_FillFifo+0x74>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10d      	bne.n	80041ae <SAI_FillFifo+0x2e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6651      	str	r1, [r2, #100]	; 0x64
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61da      	str	r2, [r3, #28]
 80041ac:	e01a      	b.n	80041e4 <SAI_FillFifo+0x64>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d80b      	bhi.n	80041ce <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	665a      	str	r2, [r3, #100]	; 0x64
 80041cc:	e00a      	b.n	80041e4 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr += 4;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80041fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004202:	d004      	beq.n	800420e <SAI_FillFifo+0x8e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1bd      	bne.n	800418a <SAI_FillFifo+0xa>
  }
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <SAI_Disable+0x68>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <SAI_Disable+0x6c>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0b1b      	lsrs	r3, r3, #12
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004246:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1e5a      	subs	r2, r3, #1
 800424c:	60fa      	str	r2, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	72fb      	strb	r3, [r7, #11]
      break;
 8004266:	e006      	b.n	8004276 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e8      	bne.n	8004248 <SAI_Disable+0x2c>

  return status;
 8004276:	7afb      	ldrb	r3, [r7, #11]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20000024 	.word	0x20000024
 8004288:	95cbec1b 	.word	0x95cbec1b

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e040      	b.n	8004320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc fcde 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8b0 	bl	8004430 <UART_SetConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fb08 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fb8f 	bl	8004a3c <UART_CheckIdleState>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433c:	2b20      	cmp	r3, #32
 800433e:	d171      	bne.n	8004424 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Transmit+0x24>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e06a      	b.n	8004426 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2221      	movs	r2, #33	; 0x21
 800435c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435e:	f7fc fecd 	bl	80010fc <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d108      	bne.n	8004390 <HAL_UART_Transmit+0x68>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e003      	b.n	8004398 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004398:	e02c      	b.n	80043f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fb80 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e038      	b.n	8004426 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3302      	adds	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e007      	b.n	80043e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1cc      	bne.n	800439a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fb4d 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e005      	b.n	8004426 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4ba6      	ldr	r3, [pc, #664]	; (80046f4 <UART_SetConfig+0x2c4>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	430b      	orrs	r3, r1
 8004466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a94      	ldr	r2, [pc, #592]	; (80046f8 <UART_SetConfig+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d120      	bne.n	80044ee <UART_SetConfig+0xbe>
 80044ac:	4b93      	ldr	r3, [pc, #588]	; (80046fc <UART_SetConfig+0x2cc>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d816      	bhi.n	80044e8 <UART_SetConfig+0xb8>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x90>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044d7 	.word	0x080044d7
 80044cc:	080044e3 	.word	0x080044e3
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e150      	b.n	8004778 <UART_SetConfig+0x348>
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e14d      	b.n	8004778 <UART_SetConfig+0x348>
 80044dc:	2304      	movs	r3, #4
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e14a      	b.n	8004778 <UART_SetConfig+0x348>
 80044e2:	2308      	movs	r3, #8
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e147      	b.n	8004778 <UART_SetConfig+0x348>
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e144      	b.n	8004778 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a83      	ldr	r2, [pc, #524]	; (8004700 <UART_SetConfig+0x2d0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d132      	bne.n	800455e <UART_SetConfig+0x12e>
 80044f8:	4b80      	ldr	r3, [pc, #512]	; (80046fc <UART_SetConfig+0x2cc>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d828      	bhi.n	8004558 <UART_SetConfig+0x128>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xdc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004541 	.word	0x08004541
 8004510:	08004559 	.word	0x08004559
 8004514:	08004559 	.word	0x08004559
 8004518:	08004559 	.word	0x08004559
 800451c:	0800454d 	.word	0x0800454d
 8004520:	08004559 	.word	0x08004559
 8004524:	08004559 	.word	0x08004559
 8004528:	08004559 	.word	0x08004559
 800452c:	08004547 	.word	0x08004547
 8004530:	08004559 	.word	0x08004559
 8004534:	08004559 	.word	0x08004559
 8004538:	08004559 	.word	0x08004559
 800453c:	08004553 	.word	0x08004553
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e118      	b.n	8004778 <UART_SetConfig+0x348>
 8004546:	2302      	movs	r3, #2
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e115      	b.n	8004778 <UART_SetConfig+0x348>
 800454c:	2304      	movs	r3, #4
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e112      	b.n	8004778 <UART_SetConfig+0x348>
 8004552:	2308      	movs	r3, #8
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e10f      	b.n	8004778 <UART_SetConfig+0x348>
 8004558:	2310      	movs	r3, #16
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e10c      	b.n	8004778 <UART_SetConfig+0x348>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a68      	ldr	r2, [pc, #416]	; (8004704 <UART_SetConfig+0x2d4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d120      	bne.n	80045aa <UART_SetConfig+0x17a>
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <UART_SetConfig+0x2cc>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004572:	2b30      	cmp	r3, #48	; 0x30
 8004574:	d013      	beq.n	800459e <UART_SetConfig+0x16e>
 8004576:	2b30      	cmp	r3, #48	; 0x30
 8004578:	d814      	bhi.n	80045a4 <UART_SetConfig+0x174>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d009      	beq.n	8004592 <UART_SetConfig+0x162>
 800457e:	2b20      	cmp	r3, #32
 8004580:	d810      	bhi.n	80045a4 <UART_SetConfig+0x174>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <UART_SetConfig+0x15c>
 8004586:	2b10      	cmp	r3, #16
 8004588:	d006      	beq.n	8004598 <UART_SetConfig+0x168>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x174>
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e0f2      	b.n	8004778 <UART_SetConfig+0x348>
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e0ef      	b.n	8004778 <UART_SetConfig+0x348>
 8004598:	2304      	movs	r3, #4
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e0ec      	b.n	8004778 <UART_SetConfig+0x348>
 800459e:	2308      	movs	r3, #8
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e0e9      	b.n	8004778 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e0e6      	b.n	8004778 <UART_SetConfig+0x348>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a56      	ldr	r2, [pc, #344]	; (8004708 <UART_SetConfig+0x2d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0x1c6>
 80045b4:	4b51      	ldr	r3, [pc, #324]	; (80046fc <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045be:	2bc0      	cmp	r3, #192	; 0xc0
 80045c0:	d013      	beq.n	80045ea <UART_SetConfig+0x1ba>
 80045c2:	2bc0      	cmp	r3, #192	; 0xc0
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x1ae>
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d810      	bhi.n	80045f0 <UART_SetConfig+0x1c0>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x1a8>
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x1b4>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x1c0>
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0cc      	b.n	8004778 <UART_SetConfig+0x348>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0c9      	b.n	8004778 <UART_SetConfig+0x348>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0c6      	b.n	8004778 <UART_SetConfig+0x348>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0c3      	b.n	8004778 <UART_SetConfig+0x348>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0c0      	b.n	8004778 <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a44      	ldr	r2, [pc, #272]	; (800470c <UART_SetConfig+0x2dc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d125      	bne.n	800464c <UART_SetConfig+0x21c>
 8004600:	4b3e      	ldr	r3, [pc, #248]	; (80046fc <UART_SetConfig+0x2cc>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x210>
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d817      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x204>
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d811      	bhi.n	8004646 <UART_SetConfig+0x216>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x1fe>
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x20a>
 800462c:	e00b      	b.n	8004646 <UART_SetConfig+0x216>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0a1      	b.n	8004778 <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e09e      	b.n	8004778 <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e09b      	b.n	8004778 <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e098      	b.n	8004778 <UART_SetConfig+0x348>
 8004646:	2310      	movs	r3, #16
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e095      	b.n	8004778 <UART_SetConfig+0x348>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <UART_SetConfig+0x2e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d125      	bne.n	80046a2 <UART_SetConfig+0x272>
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004664:	d017      	beq.n	8004696 <UART_SetConfig+0x266>
 8004666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466a:	d817      	bhi.n	800469c <UART_SetConfig+0x26c>
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d00b      	beq.n	800468a <UART_SetConfig+0x25a>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d811      	bhi.n	800469c <UART_SetConfig+0x26c>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <UART_SetConfig+0x254>
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x260>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x26c>
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e076      	b.n	8004778 <UART_SetConfig+0x348>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e073      	b.n	8004778 <UART_SetConfig+0x348>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e070      	b.n	8004778 <UART_SetConfig+0x348>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e06d      	b.n	8004778 <UART_SetConfig+0x348>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e06a      	b.n	8004778 <UART_SetConfig+0x348>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <UART_SetConfig+0x2e4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d138      	bne.n	800471e <UART_SetConfig+0x2ee>
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ba:	d017      	beq.n	80046ec <UART_SetConfig+0x2bc>
 80046bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046c0:	d82a      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d00b      	beq.n	80046e0 <UART_SetConfig+0x2b0>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d824      	bhi.n	8004718 <UART_SetConfig+0x2e8>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <UART_SetConfig+0x2aa>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d006      	beq.n	80046e6 <UART_SetConfig+0x2b6>
 80046d8:	e01e      	b.n	8004718 <UART_SetConfig+0x2e8>
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e04b      	b.n	8004778 <UART_SetConfig+0x348>
 80046e0:	2302      	movs	r3, #2
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e048      	b.n	8004778 <UART_SetConfig+0x348>
 80046e6:	2304      	movs	r3, #4
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e045      	b.n	8004778 <UART_SetConfig+0x348>
 80046ec:	2308      	movs	r3, #8
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e042      	b.n	8004778 <UART_SetConfig+0x348>
 80046f2:	bf00      	nop
 80046f4:	efff69f3 	.word	0xefff69f3
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40023800 	.word	0x40023800
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	40011400 	.word	0x40011400
 8004714:	40007800 	.word	0x40007800
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e02c      	b.n	8004778 <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a72      	ldr	r2, [pc, #456]	; (80048ec <UART_SetConfig+0x4bc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <UART_SetConfig+0x344>
 8004728:	4b71      	ldr	r3, [pc, #452]	; (80048f0 <UART_SetConfig+0x4c0>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004732:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004736:	d017      	beq.n	8004768 <UART_SetConfig+0x338>
 8004738:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800473c:	d817      	bhi.n	800476e <UART_SetConfig+0x33e>
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004742:	d00b      	beq.n	800475c <UART_SetConfig+0x32c>
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004748:	d811      	bhi.n	800476e <UART_SetConfig+0x33e>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <UART_SetConfig+0x326>
 800474e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004752:	d006      	beq.n	8004762 <UART_SetConfig+0x332>
 8004754:	e00b      	b.n	800476e <UART_SetConfig+0x33e>
 8004756:	2300      	movs	r3, #0
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e00d      	b.n	8004778 <UART_SetConfig+0x348>
 800475c:	2302      	movs	r3, #2
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e00a      	b.n	8004778 <UART_SetConfig+0x348>
 8004762:	2304      	movs	r3, #4
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e007      	b.n	8004778 <UART_SetConfig+0x348>
 8004768:	2308      	movs	r3, #8
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e004      	b.n	8004778 <UART_SetConfig+0x348>
 800476e:	2310      	movs	r3, #16
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e001      	b.n	8004778 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004780:	d15b      	bne.n	800483a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004782:	7ffb      	ldrb	r3, [r7, #31]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d828      	bhi.n	80047da <UART_SetConfig+0x3aa>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x360>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
 80047b0:	080047d3 	.word	0x080047d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fd40 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61b8      	str	r0, [r7, #24]
        break;
 80047ba:	e013      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fe fd50 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80047c0:	61b8      	str	r0, [r7, #24]
        break;
 80047c2:	e00f      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <UART_SetConfig+0x4c4>)
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e00c      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fe fc23 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 80047ce:	61b8      	str	r0, [r7, #24]
        break;
 80047d0:	e008      	b.n	80047e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e004      	b.n	80047e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	77bb      	strb	r3, [r7, #30]
        break;
 80047e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d074      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d916      	bls.n	8004834 <UART_SetConfig+0x404>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d212      	bcs.n	8004834 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	b29a      	uxth	r2, r3
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	4313      	orrs	r3, r2
 8004828:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	89fa      	ldrh	r2, [r7, #14]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e04f      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	77bb      	strb	r3, [r7, #30]
 8004838:	e04c      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d828      	bhi.n	8004892 <UART_SetConfig+0x462>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0x418>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	08004893 	.word	0x08004893
 8004858:	08004883 	.word	0x08004883
 800485c:	08004893 	.word	0x08004893
 8004860:	08004893 	.word	0x08004893
 8004864:	08004893 	.word	0x08004893
 8004868:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fe fce4 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004870:	61b8      	str	r0, [r7, #24]
        break;
 8004872:	e013      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fe fcf4 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8004878:	61b8      	str	r0, [r7, #24]
        break;
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <UART_SetConfig+0x4c4>)
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e00c      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fe fbc7 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8004886:	61b8      	str	r0, [r7, #24]
        break;
 8004888:	e008      	b.n	800489c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e004      	b.n	800489c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77bb      	strb	r3, [r7, #30]
        break;
 800489a:	bf00      	nop
    }

    if (pclk != 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085a      	lsrs	r2, r3, #1
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	441a      	add	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d909      	bls.n	80048d0 <UART_SetConfig+0x4a0>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d205      	bcs.n	80048d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	e001      	b.n	80048d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40007c00 	.word	0x40007c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fb56 	bl	80010fc <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10e      	bne.n	8004a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f81b 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e011      	b.n	8004aa2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b09c      	sub	sp, #112	; 0x70
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aba:	e0a7      	b.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	f000 80a3 	beq.w	8004c0c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac6:	f7fc fb19 	bl	80010fc <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d302      	bcc.n	8004adc <UART_WaitOnFlagUntilTimeout+0x32>
 8004ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d13f      	bne.n	8004b5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af0:	667b      	str	r3, [r7, #100]	; 0x64
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	663b      	str	r3, [r7, #96]	; 0x60
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e5      	bne.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e068      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d050      	beq.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d148      	bne.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bd6:	623a      	str	r2, [r7, #32]
 8004bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	69f9      	ldr	r1, [r7, #28]
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e5      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e010      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	f43f af48 	beq.w	8004abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3770      	adds	r7, #112	; 0x70
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c38:	b084      	sub	sp, #16
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	f107 001c 	add.w	r0, r7, #28
 8004c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d120      	bne.n	8004c92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <USB_CoreInit+0xac>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa96 	bl	80051b8 <USB_CoreReset>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e010      	b.n	8004cb4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa8a 	bl	80051b8 <USB_CoreReset>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10b      	bne.n	8004cd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f043 0206 	orr.w	r2, r3, #6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cde:	b004      	add	sp, #16
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	ffbdffbf 	.word	0xffbdffbf

08004ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 0201 	bic.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d115      	bne.n	8004d58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fc f9eb 	bl	8001114 <HAL_Delay>
      ms++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fa29 	bl	800519c <USB_GetMode>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d01e      	beq.n	8004d8e <USB_SetCurrentMode+0x84>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b31      	cmp	r3, #49	; 0x31
 8004d54:	d9f0      	bls.n	8004d38 <USB_SetCurrentMode+0x2e>
 8004d56:	e01a      	b.n	8004d8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d115      	bne.n	8004d8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	f7fc f9d2 	bl	8001114 <HAL_Delay>
      ms++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa10 	bl	800519c <USB_GetMode>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <USB_SetCurrentMode+0x84>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b31      	cmp	r3, #49	; 0x31
 8004d86:	d9f0      	bls.n	8004d6a <USB_SetCurrentMode+0x60>
 8004d88:	e001      	b.n	8004d8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e005      	b.n	8004d9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b32      	cmp	r3, #50	; 0x32
 8004d92:	d101      	bne.n	8004d98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da4:	b084      	sub	sp, #16
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e009      	b.n	8004dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3340      	adds	r3, #64	; 0x40
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0e      	cmp	r3, #14
 8004ddc:	d9f2      	bls.n	8004dc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11c      	bne.n	8004e1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e005      	b.n	8004e2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	461a      	mov	r2, r3
 8004e46:	680b      	ldr	r3, [r1, #0]
 8004e48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10c      	bne.n	8004e6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d104      	bne.n	8004e60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e56:	2100      	movs	r1, #0
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f965 	bl	8005128 <USB_SetDevSpeed>
 8004e5e:	e008      	b.n	8004e72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e60:	2101      	movs	r1, #1
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f960 	bl	8005128 <USB_SetDevSpeed>
 8004e68:	e003      	b.n	8004e72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f95b 	bl	8005128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e72:	2110      	movs	r1, #16
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8f3 	bl	8005060 <USB_FlushTxFifo>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f91f 	bl	80050c8 <USB_FlushRxFifo>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e043      	b.n	8004f46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed4:	d118      	bne.n	8004f08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e013      	b.n	8004f1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	461a      	mov	r2, r3
 8004f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e008      	b.n	8004f1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	461a      	mov	r2, r3
 8004f16:	2300      	movs	r3, #0
 8004f18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3301      	adds	r3, #1
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3b7      	bcc.n	8004ebe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e043      	b.n	8004fdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f6a:	d118      	bne.n	8004f9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e013      	b.n	8004fb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e008      	b.n	8004fb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	461a      	mov	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3b7      	bcc.n	8004f54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005004:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 0210 	orr.w	r2, r3, #16
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699a      	ldr	r2, [r3, #24]
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <USB_DevInit+0x2b4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <USB_DevInit+0x2b8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005054:	b004      	add	sp, #16
 8005056:	4770      	bx	lr
 8005058:	803c3800 	.word	0x803c3800
 800505c:	40000004 	.word	0x40000004

08005060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <USB_FlushTxFifo+0x64>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e01b      	b.n	80050b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	daf2      	bge.n	800506e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	019b      	lsls	r3, r3, #6
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <USB_FlushTxFifo+0x64>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e006      	b.n	80050b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d0f0      	beq.n	8005098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	00030d40 	.word	0x00030d40

080050c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a11      	ldr	r2, [pc, #68]	; (8005124 <USB_FlushRxFifo+0x5c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e018      	b.n	8005118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	daf2      	bge.n	80050d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2210      	movs	r2, #16
 80050f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a08      	ldr	r2, [pc, #32]	; (8005124 <USB_FlushRxFifo+0x5c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e006      	b.n	8005118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d0f0      	beq.n	80050f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	00030d40 	.word	0x00030d40

08005128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005174:	f023 0303 	bic.w	r3, r3, #3
 8005178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0301 	and.w	r3, r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_CoreReset+0x64>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e01b      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	daf2      	bge.n	80051c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <USB_CoreReset+0x64>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d0f0      	beq.n	80051ee <USB_CoreReset+0x36>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	00030d40 	.word	0x00030d40

08005220 <siprintf>:
 8005220:	b40e      	push	{r1, r2, r3}
 8005222:	b500      	push	{lr}
 8005224:	b09c      	sub	sp, #112	; 0x70
 8005226:	ab1d      	add	r3, sp, #116	; 0x74
 8005228:	9002      	str	r0, [sp, #8]
 800522a:	9006      	str	r0, [sp, #24]
 800522c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005230:	4809      	ldr	r0, [pc, #36]	; (8005258 <siprintf+0x38>)
 8005232:	9107      	str	r1, [sp, #28]
 8005234:	9104      	str	r1, [sp, #16]
 8005236:	4909      	ldr	r1, [pc, #36]	; (800525c <siprintf+0x3c>)
 8005238:	f853 2b04 	ldr.w	r2, [r3], #4
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	a902      	add	r1, sp, #8
 8005244:	f000 f992 	bl	800556c <_svfiprintf_r>
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	b01c      	add	sp, #112	; 0x70
 8005250:	f85d eb04 	ldr.w	lr, [sp], #4
 8005254:	b003      	add	sp, #12
 8005256:	4770      	bx	lr
 8005258:	2000007c 	.word	0x2000007c
 800525c:	ffff0208 	.word	0xffff0208

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <__errno>:
 8005270:	4b01      	ldr	r3, [pc, #4]	; (8005278 <__errno+0x8>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	2000007c 	.word	0x2000007c

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4d0d      	ldr	r5, [pc, #52]	; (80052b4 <__libc_init_array+0x38>)
 8005280:	4c0d      	ldr	r4, [pc, #52]	; (80052b8 <__libc_init_array+0x3c>)
 8005282:	1b64      	subs	r4, r4, r5
 8005284:	10a4      	asrs	r4, r4, #2
 8005286:	2600      	movs	r6, #0
 8005288:	42a6      	cmp	r6, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	4d0b      	ldr	r5, [pc, #44]	; (80052bc <__libc_init_array+0x40>)
 800528e:	4c0c      	ldr	r4, [pc, #48]	; (80052c0 <__libc_init_array+0x44>)
 8005290:	f000 fc6a 	bl	8005b68 <_init>
 8005294:	1b64      	subs	r4, r4, r5
 8005296:	10a4      	asrs	r4, r4, #2
 8005298:	2600      	movs	r6, #0
 800529a:	42a6      	cmp	r6, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a4:	4798      	blx	r3
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ae:	4798      	blx	r3
 80052b0:	3601      	adds	r6, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	08005c08 	.word	0x08005c08
 80052b8:	08005c08 	.word	0x08005c08
 80052bc:	08005c08 	.word	0x08005c08
 80052c0:	08005c0c 	.word	0x08005c0c

080052c4 <__retarget_lock_acquire_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <__retarget_lock_release_recursive>:
 80052c6:	4770      	bx	lr

080052c8 <_free_r>:
 80052c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d044      	beq.n	8005358 <_free_r+0x90>
 80052ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d2:	9001      	str	r0, [sp, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f1a1 0404 	sub.w	r4, r1, #4
 80052da:	bfb8      	it	lt
 80052dc:	18e4      	addlt	r4, r4, r3
 80052de:	f000 f8df 	bl	80054a0 <__malloc_lock>
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <_free_r+0x94>)
 80052e4:	9801      	ldr	r0, [sp, #4]
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	b933      	cbnz	r3, 80052f8 <_free_r+0x30>
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6014      	str	r4, [r2, #0]
 80052ee:	b003      	add	sp, #12
 80052f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052f4:	f000 b8da 	b.w	80054ac <__malloc_unlock>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d908      	bls.n	800530e <_free_r+0x46>
 80052fc:	6825      	ldr	r5, [r4, #0]
 80052fe:	1961      	adds	r1, r4, r5
 8005300:	428b      	cmp	r3, r1
 8005302:	bf01      	itttt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	1949      	addeq	r1, r1, r5
 800530a:	6021      	streq	r1, [r4, #0]
 800530c:	e7ed      	b.n	80052ea <_free_r+0x22>
 800530e:	461a      	mov	r2, r3
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b10b      	cbz	r3, 8005318 <_free_r+0x50>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d9fa      	bls.n	800530e <_free_r+0x46>
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	1855      	adds	r5, r2, r1
 800531c:	42a5      	cmp	r5, r4
 800531e:	d10b      	bne.n	8005338 <_free_r+0x70>
 8005320:	6824      	ldr	r4, [r4, #0]
 8005322:	4421      	add	r1, r4
 8005324:	1854      	adds	r4, r2, r1
 8005326:	42a3      	cmp	r3, r4
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	d1e0      	bne.n	80052ee <_free_r+0x26>
 800532c:	681c      	ldr	r4, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	6053      	str	r3, [r2, #4]
 8005332:	440c      	add	r4, r1
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	e7da      	b.n	80052ee <_free_r+0x26>
 8005338:	d902      	bls.n	8005340 <_free_r+0x78>
 800533a:	230c      	movs	r3, #12
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	e7d6      	b.n	80052ee <_free_r+0x26>
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	1961      	adds	r1, r4, r5
 8005344:	428b      	cmp	r3, r1
 8005346:	bf04      	itt	eq
 8005348:	6819      	ldreq	r1, [r3, #0]
 800534a:	685b      	ldreq	r3, [r3, #4]
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	bf04      	itt	eq
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	6054      	str	r4, [r2, #4]
 8005356:	e7ca      	b.n	80052ee <_free_r+0x26>
 8005358:	b003      	add	sp, #12
 800535a:	bd30      	pop	{r4, r5, pc}
 800535c:	200008c8 	.word	0x200008c8

08005360 <sbrk_aligned>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4e0e      	ldr	r6, [pc, #56]	; (800539c <sbrk_aligned+0x3c>)
 8005364:	460c      	mov	r4, r1
 8005366:	6831      	ldr	r1, [r6, #0]
 8005368:	4605      	mov	r5, r0
 800536a:	b911      	cbnz	r1, 8005372 <sbrk_aligned+0x12>
 800536c:	f000 fba6 	bl	8005abc <_sbrk_r>
 8005370:	6030      	str	r0, [r6, #0]
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f000 fba1 	bl	8005abc <_sbrk_r>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	d00a      	beq.n	8005394 <sbrk_aligned+0x34>
 800537e:	1cc4      	adds	r4, r0, #3
 8005380:	f024 0403 	bic.w	r4, r4, #3
 8005384:	42a0      	cmp	r0, r4
 8005386:	d007      	beq.n	8005398 <sbrk_aligned+0x38>
 8005388:	1a21      	subs	r1, r4, r0
 800538a:	4628      	mov	r0, r5
 800538c:	f000 fb96 	bl	8005abc <_sbrk_r>
 8005390:	3001      	adds	r0, #1
 8005392:	d101      	bne.n	8005398 <sbrk_aligned+0x38>
 8005394:	f04f 34ff 	mov.w	r4, #4294967295
 8005398:	4620      	mov	r0, r4
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	200008cc 	.word	0x200008cc

080053a0 <_malloc_r>:
 80053a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a4:	1ccd      	adds	r5, r1, #3
 80053a6:	f025 0503 	bic.w	r5, r5, #3
 80053aa:	3508      	adds	r5, #8
 80053ac:	2d0c      	cmp	r5, #12
 80053ae:	bf38      	it	cc
 80053b0:	250c      	movcc	r5, #12
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	4607      	mov	r7, r0
 80053b6:	db01      	blt.n	80053bc <_malloc_r+0x1c>
 80053b8:	42a9      	cmp	r1, r5
 80053ba:	d905      	bls.n	80053c8 <_malloc_r+0x28>
 80053bc:	230c      	movs	r3, #12
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	2600      	movs	r6, #0
 80053c2:	4630      	mov	r0, r6
 80053c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800549c <_malloc_r+0xfc>
 80053cc:	f000 f868 	bl	80054a0 <__malloc_lock>
 80053d0:	f8d8 3000 	ldr.w	r3, [r8]
 80053d4:	461c      	mov	r4, r3
 80053d6:	bb5c      	cbnz	r4, 8005430 <_malloc_r+0x90>
 80053d8:	4629      	mov	r1, r5
 80053da:	4638      	mov	r0, r7
 80053dc:	f7ff ffc0 	bl	8005360 <sbrk_aligned>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	4604      	mov	r4, r0
 80053e4:	d155      	bne.n	8005492 <_malloc_r+0xf2>
 80053e6:	f8d8 4000 	ldr.w	r4, [r8]
 80053ea:	4626      	mov	r6, r4
 80053ec:	2e00      	cmp	r6, #0
 80053ee:	d145      	bne.n	800547c <_malloc_r+0xdc>
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	d048      	beq.n	8005486 <_malloc_r+0xe6>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	4631      	mov	r1, r6
 80053f8:	4638      	mov	r0, r7
 80053fa:	eb04 0903 	add.w	r9, r4, r3
 80053fe:	f000 fb5d 	bl	8005abc <_sbrk_r>
 8005402:	4581      	cmp	r9, r0
 8005404:	d13f      	bne.n	8005486 <_malloc_r+0xe6>
 8005406:	6821      	ldr	r1, [r4, #0]
 8005408:	1a6d      	subs	r5, r5, r1
 800540a:	4629      	mov	r1, r5
 800540c:	4638      	mov	r0, r7
 800540e:	f7ff ffa7 	bl	8005360 <sbrk_aligned>
 8005412:	3001      	adds	r0, #1
 8005414:	d037      	beq.n	8005486 <_malloc_r+0xe6>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	442b      	add	r3, r5
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	f8d8 3000 	ldr.w	r3, [r8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <_malloc_r+0xf6>
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	42a2      	cmp	r2, r4
 8005428:	d12b      	bne.n	8005482 <_malloc_r+0xe2>
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	e00f      	b.n	8005450 <_malloc_r+0xb0>
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	1b52      	subs	r2, r2, r5
 8005434:	d41f      	bmi.n	8005476 <_malloc_r+0xd6>
 8005436:	2a0b      	cmp	r2, #11
 8005438:	d917      	bls.n	800546a <_malloc_r+0xca>
 800543a:	1961      	adds	r1, r4, r5
 800543c:	42a3      	cmp	r3, r4
 800543e:	6025      	str	r5, [r4, #0]
 8005440:	bf18      	it	ne
 8005442:	6059      	strne	r1, [r3, #4]
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	bf08      	it	eq
 8005448:	f8c8 1000 	streq.w	r1, [r8]
 800544c:	5162      	str	r2, [r4, r5]
 800544e:	604b      	str	r3, [r1, #4]
 8005450:	4638      	mov	r0, r7
 8005452:	f104 060b 	add.w	r6, r4, #11
 8005456:	f000 f829 	bl	80054ac <__malloc_unlock>
 800545a:	f026 0607 	bic.w	r6, r6, #7
 800545e:	1d23      	adds	r3, r4, #4
 8005460:	1af2      	subs	r2, r6, r3
 8005462:	d0ae      	beq.n	80053c2 <_malloc_r+0x22>
 8005464:	1b9b      	subs	r3, r3, r6
 8005466:	50a3      	str	r3, [r4, r2]
 8005468:	e7ab      	b.n	80053c2 <_malloc_r+0x22>
 800546a:	42a3      	cmp	r3, r4
 800546c:	6862      	ldr	r2, [r4, #4]
 800546e:	d1dd      	bne.n	800542c <_malloc_r+0x8c>
 8005470:	f8c8 2000 	str.w	r2, [r8]
 8005474:	e7ec      	b.n	8005450 <_malloc_r+0xb0>
 8005476:	4623      	mov	r3, r4
 8005478:	6864      	ldr	r4, [r4, #4]
 800547a:	e7ac      	b.n	80053d6 <_malloc_r+0x36>
 800547c:	4634      	mov	r4, r6
 800547e:	6876      	ldr	r6, [r6, #4]
 8005480:	e7b4      	b.n	80053ec <_malloc_r+0x4c>
 8005482:	4613      	mov	r3, r2
 8005484:	e7cc      	b.n	8005420 <_malloc_r+0x80>
 8005486:	230c      	movs	r3, #12
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4638      	mov	r0, r7
 800548c:	f000 f80e 	bl	80054ac <__malloc_unlock>
 8005490:	e797      	b.n	80053c2 <_malloc_r+0x22>
 8005492:	6025      	str	r5, [r4, #0]
 8005494:	e7dc      	b.n	8005450 <_malloc_r+0xb0>
 8005496:	605b      	str	r3, [r3, #4]
 8005498:	deff      	udf	#255	; 0xff
 800549a:	bf00      	nop
 800549c:	200008c8 	.word	0x200008c8

080054a0 <__malloc_lock>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__malloc_lock+0x8>)
 80054a2:	f7ff bf0f 	b.w	80052c4 <__retarget_lock_acquire_recursive>
 80054a6:	bf00      	nop
 80054a8:	200008c4 	.word	0x200008c4

080054ac <__malloc_unlock>:
 80054ac:	4801      	ldr	r0, [pc, #4]	; (80054b4 <__malloc_unlock+0x8>)
 80054ae:	f7ff bf0a 	b.w	80052c6 <__retarget_lock_release_recursive>
 80054b2:	bf00      	nop
 80054b4:	200008c4 	.word	0x200008c4

080054b8 <__ssputs_r>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	688e      	ldr	r6, [r1, #8]
 80054be:	461f      	mov	r7, r3
 80054c0:	42be      	cmp	r6, r7
 80054c2:	680b      	ldr	r3, [r1, #0]
 80054c4:	4682      	mov	sl, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4690      	mov	r8, r2
 80054ca:	d82c      	bhi.n	8005526 <__ssputs_r+0x6e>
 80054cc:	898a      	ldrh	r2, [r1, #12]
 80054ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054d2:	d026      	beq.n	8005522 <__ssputs_r+0x6a>
 80054d4:	6965      	ldr	r5, [r4, #20]
 80054d6:	6909      	ldr	r1, [r1, #16]
 80054d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054dc:	eba3 0901 	sub.w	r9, r3, r1
 80054e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054e4:	1c7b      	adds	r3, r7, #1
 80054e6:	444b      	add	r3, r9
 80054e8:	106d      	asrs	r5, r5, #1
 80054ea:	429d      	cmp	r5, r3
 80054ec:	bf38      	it	cc
 80054ee:	461d      	movcc	r5, r3
 80054f0:	0553      	lsls	r3, r2, #21
 80054f2:	d527      	bpl.n	8005544 <__ssputs_r+0x8c>
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7ff ff53 	bl	80053a0 <_malloc_r>
 80054fa:	4606      	mov	r6, r0
 80054fc:	b360      	cbz	r0, 8005558 <__ssputs_r+0xa0>
 80054fe:	6921      	ldr	r1, [r4, #16]
 8005500:	464a      	mov	r2, r9
 8005502:	f000 faeb 	bl	8005adc <memcpy>
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	6126      	str	r6, [r4, #16]
 8005514:	6165      	str	r5, [r4, #20]
 8005516:	444e      	add	r6, r9
 8005518:	eba5 0509 	sub.w	r5, r5, r9
 800551c:	6026      	str	r6, [r4, #0]
 800551e:	60a5      	str	r5, [r4, #8]
 8005520:	463e      	mov	r6, r7
 8005522:	42be      	cmp	r6, r7
 8005524:	d900      	bls.n	8005528 <__ssputs_r+0x70>
 8005526:	463e      	mov	r6, r7
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	4632      	mov	r2, r6
 800552c:	4641      	mov	r1, r8
 800552e:	f000 faab 	bl	8005a88 <memmove>
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	1b9b      	subs	r3, r3, r6
 8005536:	60a3      	str	r3, [r4, #8]
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	4433      	add	r3, r6
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	2000      	movs	r0, #0
 8005540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005544:	462a      	mov	r2, r5
 8005546:	f000 fad7 	bl	8005af8 <_realloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e0      	bne.n	8005512 <__ssputs_r+0x5a>
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	4650      	mov	r0, sl
 8005554:	f7ff feb8 	bl	80052c8 <_free_r>
 8005558:	230c      	movs	r3, #12
 800555a:	f8ca 3000 	str.w	r3, [sl]
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	e7e9      	b.n	8005540 <__ssputs_r+0x88>

0800556c <_svfiprintf_r>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	4698      	mov	r8, r3
 8005572:	898b      	ldrh	r3, [r1, #12]
 8005574:	061b      	lsls	r3, r3, #24
 8005576:	b09d      	sub	sp, #116	; 0x74
 8005578:	4607      	mov	r7, r0
 800557a:	460d      	mov	r5, r1
 800557c:	4614      	mov	r4, r2
 800557e:	d50e      	bpl.n	800559e <_svfiprintf_r+0x32>
 8005580:	690b      	ldr	r3, [r1, #16]
 8005582:	b963      	cbnz	r3, 800559e <_svfiprintf_r+0x32>
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	f7ff ff0b 	bl	80053a0 <_malloc_r>
 800558a:	6028      	str	r0, [r5, #0]
 800558c:	6128      	str	r0, [r5, #16]
 800558e:	b920      	cbnz	r0, 800559a <_svfiprintf_r+0x2e>
 8005590:	230c      	movs	r3, #12
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	e0d0      	b.n	800573c <_svfiprintf_r+0x1d0>
 800559a:	2340      	movs	r3, #64	; 0x40
 800559c:	616b      	str	r3, [r5, #20]
 800559e:	2300      	movs	r3, #0
 80055a0:	9309      	str	r3, [sp, #36]	; 0x24
 80055a2:	2320      	movs	r3, #32
 80055a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ac:	2330      	movs	r3, #48	; 0x30
 80055ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005754 <_svfiprintf_r+0x1e8>
 80055b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055b6:	f04f 0901 	mov.w	r9, #1
 80055ba:	4623      	mov	r3, r4
 80055bc:	469a      	mov	sl, r3
 80055be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c2:	b10a      	cbz	r2, 80055c8 <_svfiprintf_r+0x5c>
 80055c4:	2a25      	cmp	r2, #37	; 0x25
 80055c6:	d1f9      	bne.n	80055bc <_svfiprintf_r+0x50>
 80055c8:	ebba 0b04 	subs.w	fp, sl, r4
 80055cc:	d00b      	beq.n	80055e6 <_svfiprintf_r+0x7a>
 80055ce:	465b      	mov	r3, fp
 80055d0:	4622      	mov	r2, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	4638      	mov	r0, r7
 80055d6:	f7ff ff6f 	bl	80054b8 <__ssputs_r>
 80055da:	3001      	adds	r0, #1
 80055dc:	f000 80a9 	beq.w	8005732 <_svfiprintf_r+0x1c6>
 80055e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e2:	445a      	add	r2, fp
 80055e4:	9209      	str	r2, [sp, #36]	; 0x24
 80055e6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80a1 	beq.w	8005732 <_svfiprintf_r+0x1c6>
 80055f0:	2300      	movs	r3, #0
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055fa:	f10a 0a01 	add.w	sl, sl, #1
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	9307      	str	r3, [sp, #28]
 8005602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005606:	931a      	str	r3, [sp, #104]	; 0x68
 8005608:	4654      	mov	r4, sl
 800560a:	2205      	movs	r2, #5
 800560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005610:	4850      	ldr	r0, [pc, #320]	; (8005754 <_svfiprintf_r+0x1e8>)
 8005612:	f7fa fdfd 	bl	8000210 <memchr>
 8005616:	9a04      	ldr	r2, [sp, #16]
 8005618:	b9d8      	cbnz	r0, 8005652 <_svfiprintf_r+0xe6>
 800561a:	06d0      	lsls	r0, r2, #27
 800561c:	bf44      	itt	mi
 800561e:	2320      	movmi	r3, #32
 8005620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005624:	0711      	lsls	r1, r2, #28
 8005626:	bf44      	itt	mi
 8005628:	232b      	movmi	r3, #43	; 0x2b
 800562a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800562e:	f89a 3000 	ldrb.w	r3, [sl]
 8005632:	2b2a      	cmp	r3, #42	; 0x2a
 8005634:	d015      	beq.n	8005662 <_svfiprintf_r+0xf6>
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	4654      	mov	r4, sl
 800563a:	2000      	movs	r0, #0
 800563c:	f04f 0c0a 	mov.w	ip, #10
 8005640:	4621      	mov	r1, r4
 8005642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005646:	3b30      	subs	r3, #48	; 0x30
 8005648:	2b09      	cmp	r3, #9
 800564a:	d94d      	bls.n	80056e8 <_svfiprintf_r+0x17c>
 800564c:	b1b0      	cbz	r0, 800567c <_svfiprintf_r+0x110>
 800564e:	9207      	str	r2, [sp, #28]
 8005650:	e014      	b.n	800567c <_svfiprintf_r+0x110>
 8005652:	eba0 0308 	sub.w	r3, r0, r8
 8005656:	fa09 f303 	lsl.w	r3, r9, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	46a2      	mov	sl, r4
 8005660:	e7d2      	b.n	8005608 <_svfiprintf_r+0x9c>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	1d19      	adds	r1, r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	9103      	str	r1, [sp, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	bfbb      	ittet	lt
 800566e:	425b      	neglt	r3, r3
 8005670:	f042 0202 	orrlt.w	r2, r2, #2
 8005674:	9307      	strge	r3, [sp, #28]
 8005676:	9307      	strlt	r3, [sp, #28]
 8005678:	bfb8      	it	lt
 800567a:	9204      	strlt	r2, [sp, #16]
 800567c:	7823      	ldrb	r3, [r4, #0]
 800567e:	2b2e      	cmp	r3, #46	; 0x2e
 8005680:	d10c      	bne.n	800569c <_svfiprintf_r+0x130>
 8005682:	7863      	ldrb	r3, [r4, #1]
 8005684:	2b2a      	cmp	r3, #42	; 0x2a
 8005686:	d134      	bne.n	80056f2 <_svfiprintf_r+0x186>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	9203      	str	r2, [sp, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfb8      	it	lt
 8005694:	f04f 33ff 	movlt.w	r3, #4294967295
 8005698:	3402      	adds	r4, #2
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005764 <_svfiprintf_r+0x1f8>
 80056a0:	7821      	ldrb	r1, [r4, #0]
 80056a2:	2203      	movs	r2, #3
 80056a4:	4650      	mov	r0, sl
 80056a6:	f7fa fdb3 	bl	8000210 <memchr>
 80056aa:	b138      	cbz	r0, 80056bc <_svfiprintf_r+0x150>
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	eba0 000a 	sub.w	r0, r0, sl
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	4082      	lsls	r2, r0
 80056b6:	4313      	orrs	r3, r2
 80056b8:	3401      	adds	r4, #1
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c0:	4825      	ldr	r0, [pc, #148]	; (8005758 <_svfiprintf_r+0x1ec>)
 80056c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c6:	2206      	movs	r2, #6
 80056c8:	f7fa fda2 	bl	8000210 <memchr>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d038      	beq.n	8005742 <_svfiprintf_r+0x1d6>
 80056d0:	4b22      	ldr	r3, [pc, #136]	; (800575c <_svfiprintf_r+0x1f0>)
 80056d2:	bb1b      	cbnz	r3, 800571c <_svfiprintf_r+0x1b0>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	3307      	adds	r3, #7
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	3308      	adds	r3, #8
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e2:	4433      	add	r3, r6
 80056e4:	9309      	str	r3, [sp, #36]	; 0x24
 80056e6:	e768      	b.n	80055ba <_svfiprintf_r+0x4e>
 80056e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ec:	460c      	mov	r4, r1
 80056ee:	2001      	movs	r0, #1
 80056f0:	e7a6      	b.n	8005640 <_svfiprintf_r+0xd4>
 80056f2:	2300      	movs	r3, #0
 80056f4:	3401      	adds	r4, #1
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	4619      	mov	r1, r3
 80056fa:	f04f 0c0a 	mov.w	ip, #10
 80056fe:	4620      	mov	r0, r4
 8005700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005704:	3a30      	subs	r2, #48	; 0x30
 8005706:	2a09      	cmp	r2, #9
 8005708:	d903      	bls.n	8005712 <_svfiprintf_r+0x1a6>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0c6      	beq.n	800569c <_svfiprintf_r+0x130>
 800570e:	9105      	str	r1, [sp, #20]
 8005710:	e7c4      	b.n	800569c <_svfiprintf_r+0x130>
 8005712:	fb0c 2101 	mla	r1, ip, r1, r2
 8005716:	4604      	mov	r4, r0
 8005718:	2301      	movs	r3, #1
 800571a:	e7f0      	b.n	80056fe <_svfiprintf_r+0x192>
 800571c:	ab03      	add	r3, sp, #12
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	462a      	mov	r2, r5
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <_svfiprintf_r+0x1f4>)
 8005724:	a904      	add	r1, sp, #16
 8005726:	4638      	mov	r0, r7
 8005728:	f3af 8000 	nop.w
 800572c:	1c42      	adds	r2, r0, #1
 800572e:	4606      	mov	r6, r0
 8005730:	d1d6      	bne.n	80056e0 <_svfiprintf_r+0x174>
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	065b      	lsls	r3, r3, #25
 8005736:	f53f af2d 	bmi.w	8005594 <_svfiprintf_r+0x28>
 800573a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800573c:	b01d      	add	sp, #116	; 0x74
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	ab03      	add	r3, sp, #12
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	462a      	mov	r2, r5
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <_svfiprintf_r+0x1f4>)
 800574a:	a904      	add	r1, sp, #16
 800574c:	4638      	mov	r0, r7
 800574e:	f000 f879 	bl	8005844 <_printf_i>
 8005752:	e7eb      	b.n	800572c <_svfiprintf_r+0x1c0>
 8005754:	08005bcc 	.word	0x08005bcc
 8005758:	08005bd6 	.word	0x08005bd6
 800575c:	00000000 	.word	0x00000000
 8005760:	080054b9 	.word	0x080054b9
 8005764:	08005bd2 	.word	0x08005bd2

08005768 <_printf_common>:
 8005768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	4616      	mov	r6, r2
 800576e:	4699      	mov	r9, r3
 8005770:	688a      	ldr	r2, [r1, #8]
 8005772:	690b      	ldr	r3, [r1, #16]
 8005774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005778:	4293      	cmp	r3, r2
 800577a:	bfb8      	it	lt
 800577c:	4613      	movlt	r3, r2
 800577e:	6033      	str	r3, [r6, #0]
 8005780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005784:	4607      	mov	r7, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b10a      	cbz	r2, 800578e <_printf_common+0x26>
 800578a:	3301      	adds	r3, #1
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	0699      	lsls	r1, r3, #26
 8005792:	bf42      	ittt	mi
 8005794:	6833      	ldrmi	r3, [r6, #0]
 8005796:	3302      	addmi	r3, #2
 8005798:	6033      	strmi	r3, [r6, #0]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d106      	bne.n	80057b0 <_printf_common+0x48>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	6832      	ldr	r2, [r6, #0]
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dc26      	bgt.n	80057fe <_printf_common+0x96>
 80057b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057b4:	1e13      	subs	r3, r2, #0
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	bf18      	it	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	0692      	lsls	r2, r2, #26
 80057be:	d42b      	bmi.n	8005818 <_printf_common+0xb0>
 80057c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d01e      	beq.n	800580c <_printf_common+0xa4>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	bf02      	ittt	eq
 80057da:	68e5      	ldreq	r5, [r4, #12]
 80057dc:	6833      	ldreq	r3, [r6, #0]
 80057de:	1aed      	subeq	r5, r5, r3
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	bf0c      	ite	eq
 80057e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e8:	2500      	movne	r5, #0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfc4      	itt	gt
 80057ee:	1a9b      	subgt	r3, r3, r2
 80057f0:	18ed      	addgt	r5, r5, r3
 80057f2:	2600      	movs	r6, #0
 80057f4:	341a      	adds	r4, #26
 80057f6:	42b5      	cmp	r5, r6
 80057f8:	d11a      	bne.n	8005830 <_printf_common+0xc8>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e008      	b.n	8005810 <_printf_common+0xa8>
 80057fe:	2301      	movs	r3, #1
 8005800:	4652      	mov	r2, sl
 8005802:	4649      	mov	r1, r9
 8005804:	4638      	mov	r0, r7
 8005806:	47c0      	blx	r8
 8005808:	3001      	adds	r0, #1
 800580a:	d103      	bne.n	8005814 <_printf_common+0xac>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	3501      	adds	r5, #1
 8005816:	e7c6      	b.n	80057a6 <_printf_common+0x3e>
 8005818:	18e1      	adds	r1, r4, r3
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	2030      	movs	r0, #48	; 0x30
 800581e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005822:	4422      	add	r2, r4
 8005824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800582c:	3302      	adds	r3, #2
 800582e:	e7c7      	b.n	80057c0 <_printf_common+0x58>
 8005830:	2301      	movs	r3, #1
 8005832:	4622      	mov	r2, r4
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d0e6      	beq.n	800580c <_printf_common+0xa4>
 800583e:	3601      	adds	r6, #1
 8005840:	e7d9      	b.n	80057f6 <_printf_common+0x8e>
	...

08005844 <_printf_i>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	7e0f      	ldrb	r7, [r1, #24]
 800584a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800584c:	2f78      	cmp	r7, #120	; 0x78
 800584e:	4691      	mov	r9, r2
 8005850:	4680      	mov	r8, r0
 8005852:	460c      	mov	r4, r1
 8005854:	469a      	mov	sl, r3
 8005856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800585a:	d807      	bhi.n	800586c <_printf_i+0x28>
 800585c:	2f62      	cmp	r7, #98	; 0x62
 800585e:	d80a      	bhi.n	8005876 <_printf_i+0x32>
 8005860:	2f00      	cmp	r7, #0
 8005862:	f000 80d4 	beq.w	8005a0e <_printf_i+0x1ca>
 8005866:	2f58      	cmp	r7, #88	; 0x58
 8005868:	f000 80c0 	beq.w	80059ec <_printf_i+0x1a8>
 800586c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005874:	e03a      	b.n	80058ec <_printf_i+0xa8>
 8005876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800587a:	2b15      	cmp	r3, #21
 800587c:	d8f6      	bhi.n	800586c <_printf_i+0x28>
 800587e:	a101      	add	r1, pc, #4	; (adr r1, 8005884 <_printf_i+0x40>)
 8005880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058f1 	.word	0x080058f1
 800588c:	0800586d 	.word	0x0800586d
 8005890:	0800586d 	.word	0x0800586d
 8005894:	0800586d 	.word	0x0800586d
 8005898:	0800586d 	.word	0x0800586d
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	0800586d 	.word	0x0800586d
 80058a4:	0800586d 	.word	0x0800586d
 80058a8:	0800586d 	.word	0x0800586d
 80058ac:	0800586d 	.word	0x0800586d
 80058b0:	080059f5 	.word	0x080059f5
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	080059af 	.word	0x080059af
 80058bc:	0800586d 	.word	0x0800586d
 80058c0:	0800586d 	.word	0x0800586d
 80058c4:	08005a17 	.word	0x08005a17
 80058c8:	0800586d 	.word	0x0800586d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800586d 	.word	0x0800586d
 80058d4:	0800586d 	.word	0x0800586d
 80058d8:	080059b7 	.word	0x080059b7
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e09f      	b.n	8005a30 <_printf_i+0x1ec>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	0607      	lsls	r7, r0, #24
 80058f6:	f103 0104 	add.w	r1, r3, #4
 80058fa:	6029      	str	r1, [r5, #0]
 80058fc:	d501      	bpl.n	8005902 <_printf_i+0xbe>
 80058fe:	681e      	ldr	r6, [r3, #0]
 8005900:	e003      	b.n	800590a <_printf_i+0xc6>
 8005902:	0646      	lsls	r6, r0, #25
 8005904:	d5fb      	bpl.n	80058fe <_printf_i+0xba>
 8005906:	f9b3 6000 	ldrsh.w	r6, [r3]
 800590a:	2e00      	cmp	r6, #0
 800590c:	da03      	bge.n	8005916 <_printf_i+0xd2>
 800590e:	232d      	movs	r3, #45	; 0x2d
 8005910:	4276      	negs	r6, r6
 8005912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005916:	485a      	ldr	r0, [pc, #360]	; (8005a80 <_printf_i+0x23c>)
 8005918:	230a      	movs	r3, #10
 800591a:	e012      	b.n	8005942 <_printf_i+0xfe>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	6820      	ldr	r0, [r4, #0]
 8005920:	1d19      	adds	r1, r3, #4
 8005922:	6029      	str	r1, [r5, #0]
 8005924:	0605      	lsls	r5, r0, #24
 8005926:	d501      	bpl.n	800592c <_printf_i+0xe8>
 8005928:	681e      	ldr	r6, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0xee>
 800592c:	0641      	lsls	r1, r0, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0xe4>
 8005930:	881e      	ldrh	r6, [r3, #0]
 8005932:	4853      	ldr	r0, [pc, #332]	; (8005a80 <_printf_i+0x23c>)
 8005934:	2f6f      	cmp	r7, #111	; 0x6f
 8005936:	bf0c      	ite	eq
 8005938:	2308      	moveq	r3, #8
 800593a:	230a      	movne	r3, #10
 800593c:	2100      	movs	r1, #0
 800593e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005942:	6865      	ldr	r5, [r4, #4]
 8005944:	60a5      	str	r5, [r4, #8]
 8005946:	2d00      	cmp	r5, #0
 8005948:	bfa2      	ittt	ge
 800594a:	6821      	ldrge	r1, [r4, #0]
 800594c:	f021 0104 	bicge.w	r1, r1, #4
 8005950:	6021      	strge	r1, [r4, #0]
 8005952:	b90e      	cbnz	r6, 8005958 <_printf_i+0x114>
 8005954:	2d00      	cmp	r5, #0
 8005956:	d04b      	beq.n	80059f0 <_printf_i+0x1ac>
 8005958:	4615      	mov	r5, r2
 800595a:	fbb6 f1f3 	udiv	r1, r6, r3
 800595e:	fb03 6711 	mls	r7, r3, r1, r6
 8005962:	5dc7      	ldrb	r7, [r0, r7]
 8005964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005968:	4637      	mov	r7, r6
 800596a:	42bb      	cmp	r3, r7
 800596c:	460e      	mov	r6, r1
 800596e:	d9f4      	bls.n	800595a <_printf_i+0x116>
 8005970:	2b08      	cmp	r3, #8
 8005972:	d10b      	bne.n	800598c <_printf_i+0x148>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	07de      	lsls	r6, r3, #31
 8005978:	d508      	bpl.n	800598c <_printf_i+0x148>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	6861      	ldr	r1, [r4, #4]
 800597e:	4299      	cmp	r1, r3
 8005980:	bfde      	ittt	le
 8005982:	2330      	movle	r3, #48	; 0x30
 8005984:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005988:	f105 35ff 	addle.w	r5, r5, #4294967295
 800598c:	1b52      	subs	r2, r2, r5
 800598e:	6122      	str	r2, [r4, #16]
 8005990:	f8cd a000 	str.w	sl, [sp]
 8005994:	464b      	mov	r3, r9
 8005996:	aa03      	add	r2, sp, #12
 8005998:	4621      	mov	r1, r4
 800599a:	4640      	mov	r0, r8
 800599c:	f7ff fee4 	bl	8005768 <_printf_common>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d14a      	bne.n	8005a3a <_printf_i+0x1f6>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b004      	add	sp, #16
 80059aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f043 0320 	orr.w	r3, r3, #32
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	4833      	ldr	r0, [pc, #204]	; (8005a84 <_printf_i+0x240>)
 80059b8:	2778      	movs	r7, #120	; 0x78
 80059ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6829      	ldr	r1, [r5, #0]
 80059c2:	061f      	lsls	r7, r3, #24
 80059c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059c8:	d402      	bmi.n	80059d0 <_printf_i+0x18c>
 80059ca:	065f      	lsls	r7, r3, #25
 80059cc:	bf48      	it	mi
 80059ce:	b2b6      	uxthmi	r6, r6
 80059d0:	07df      	lsls	r7, r3, #31
 80059d2:	bf48      	it	mi
 80059d4:	f043 0320 	orrmi.w	r3, r3, #32
 80059d8:	6029      	str	r1, [r5, #0]
 80059da:	bf48      	it	mi
 80059dc:	6023      	strmi	r3, [r4, #0]
 80059de:	b91e      	cbnz	r6, 80059e8 <_printf_i+0x1a4>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f023 0320 	bic.w	r3, r3, #32
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	2310      	movs	r3, #16
 80059ea:	e7a7      	b.n	800593c <_printf_i+0xf8>
 80059ec:	4824      	ldr	r0, [pc, #144]	; (8005a80 <_printf_i+0x23c>)
 80059ee:	e7e4      	b.n	80059ba <_printf_i+0x176>
 80059f0:	4615      	mov	r5, r2
 80059f2:	e7bd      	b.n	8005970 <_printf_i+0x12c>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	6826      	ldr	r6, [r4, #0]
 80059f8:	6961      	ldr	r1, [r4, #20]
 80059fa:	1d18      	adds	r0, r3, #4
 80059fc:	6028      	str	r0, [r5, #0]
 80059fe:	0635      	lsls	r5, r6, #24
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0x1c4>
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0x1ca>
 8005a08:	0670      	lsls	r0, r6, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0x1c0>
 8005a0c:	8019      	strh	r1, [r3, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	4615      	mov	r5, r2
 8005a14:	e7bc      	b.n	8005990 <_printf_i+0x14c>
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	2100      	movs	r1, #0
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7fa fbf4 	bl	8000210 <memchr>
 8005a28:	b108      	cbz	r0, 8005a2e <_printf_i+0x1ea>
 8005a2a:	1b40      	subs	r0, r0, r5
 8005a2c:	6060      	str	r0, [r4, #4]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	e7aa      	b.n	8005990 <_printf_i+0x14c>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d0ad      	beq.n	80059a4 <_printf_i+0x160>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	d413      	bmi.n	8005a76 <_printf_i+0x232>
 8005a4e:	68e0      	ldr	r0, [r4, #12]
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	4298      	cmp	r0, r3
 8005a54:	bfb8      	it	lt
 8005a56:	4618      	movlt	r0, r3
 8005a58:	e7a6      	b.n	80059a8 <_printf_i+0x164>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d09d      	beq.n	80059a4 <_printf_i+0x160>
 8005a68:	3501      	adds	r5, #1
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	9903      	ldr	r1, [sp, #12]
 8005a6e:	1a5b      	subs	r3, r3, r1
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	dcf2      	bgt.n	8005a5a <_printf_i+0x216>
 8005a74:	e7eb      	b.n	8005a4e <_printf_i+0x20a>
 8005a76:	2500      	movs	r5, #0
 8005a78:	f104 0619 	add.w	r6, r4, #25
 8005a7c:	e7f5      	b.n	8005a6a <_printf_i+0x226>
 8005a7e:	bf00      	nop
 8005a80:	08005bdd 	.word	0x08005bdd
 8005a84:	08005bee 	.word	0x08005bee

08005a88 <memmove>:
 8005a88:	4288      	cmp	r0, r1
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	eb01 0402 	add.w	r4, r1, r2
 8005a90:	d902      	bls.n	8005a98 <memmove+0x10>
 8005a92:	4284      	cmp	r4, r0
 8005a94:	4623      	mov	r3, r4
 8005a96:	d807      	bhi.n	8005aa8 <memmove+0x20>
 8005a98:	1e43      	subs	r3, r0, #1
 8005a9a:	42a1      	cmp	r1, r4
 8005a9c:	d008      	beq.n	8005ab0 <memmove+0x28>
 8005a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aa6:	e7f8      	b.n	8005a9a <memmove+0x12>
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4601      	mov	r1, r0
 8005aac:	428a      	cmp	r2, r1
 8005aae:	d100      	bne.n	8005ab2 <memmove+0x2a>
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aba:	e7f7      	b.n	8005aac <memmove+0x24>

08005abc <_sbrk_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	; (8005ad8 <_sbrk_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fb fa56 	bl	8000f78 <_sbrk>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_sbrk_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_sbrk_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	200008c0 	.word	0x200008c0

08005adc <memcpy>:
 8005adc:	440a      	add	r2, r1
 8005ade:	4291      	cmp	r1, r2
 8005ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae4:	d100      	bne.n	8005ae8 <memcpy+0xc>
 8005ae6:	4770      	bx	lr
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af2:	4291      	cmp	r1, r2
 8005af4:	d1f9      	bne.n	8005aea <memcpy+0xe>
 8005af6:	bd10      	pop	{r4, pc}

08005af8 <_realloc_r>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	4680      	mov	r8, r0
 8005afe:	4614      	mov	r4, r2
 8005b00:	460e      	mov	r6, r1
 8005b02:	b921      	cbnz	r1, 8005b0e <_realloc_r+0x16>
 8005b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	4611      	mov	r1, r2
 8005b0a:	f7ff bc49 	b.w	80053a0 <_malloc_r>
 8005b0e:	b92a      	cbnz	r2, 8005b1c <_realloc_r+0x24>
 8005b10:	f7ff fbda 	bl	80052c8 <_free_r>
 8005b14:	4625      	mov	r5, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	f000 f81b 	bl	8005b56 <_malloc_usable_size_r>
 8005b20:	4284      	cmp	r4, r0
 8005b22:	4607      	mov	r7, r0
 8005b24:	d802      	bhi.n	8005b2c <_realloc_r+0x34>
 8005b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b2a:	d812      	bhi.n	8005b52 <_realloc_r+0x5a>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff fc36 	bl	80053a0 <_malloc_r>
 8005b34:	4605      	mov	r5, r0
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d0ed      	beq.n	8005b16 <_realloc_r+0x1e>
 8005b3a:	42bc      	cmp	r4, r7
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4631      	mov	r1, r6
 8005b40:	bf28      	it	cs
 8005b42:	463a      	movcs	r2, r7
 8005b44:	f7ff ffca 	bl	8005adc <memcpy>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fbbc 	bl	80052c8 <_free_r>
 8005b50:	e7e1      	b.n	8005b16 <_realloc_r+0x1e>
 8005b52:	4635      	mov	r5, r6
 8005b54:	e7df      	b.n	8005b16 <_realloc_r+0x1e>

08005b56 <_malloc_usable_size_r>:
 8005b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5a:	1f18      	subs	r0, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfbc      	itt	lt
 8005b60:	580b      	ldrlt	r3, [r1, r0]
 8005b62:	18c0      	addlt	r0, r0, r3
 8005b64:	4770      	bx	lr
	...

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
