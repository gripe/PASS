
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c4  080069c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069cc  080069cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080069d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  2000005c  08006a30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08006a30  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144cc  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2d  00000000  00000000  0003459b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d23  00000000  00000000  000382a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267d3  00000000  00000000  00038fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162c9  00000000  00000000  0005f79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efd16  00000000  00000000  00075a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c78  00000000  00000000  00165780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006910 	.word	0x08006910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08006910 	.word	0x08006910

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_ADC_ConvCpltCallback>:
uint16_t dma_buf;
uint32_t adc_avg;
int avg_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	adc_avg += adc_get;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_ADC_ConvCpltCallback+0x30>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x34>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x34>)
 80005d2:	6013      	str	r3, [r2, #0]
	avg_count ++;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x38>)
 80005dc:	6013      	str	r3, [r2, #0]

}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200007e8 	.word	0x200007e8
 80005f0:	2000080c 	.word	0x2000080c
 80005f4:	20000810 	.word	0x20000810

080005f8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  for (int i = 15; i > 0; i --)
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00b      	b.n	800061e <HAL_SAI_TxCpltCallback+0x26>
	  sai_fifo[i] = sai_fifo[i - 1];
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3b01      	subs	r3, #1
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <HAL_SAI_TxCpltCallback+0x68>)
 800060c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <HAL_SAI_TxCpltCallback+0x68>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 15; i > 0; i --)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3b01      	subs	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dcf0      	bgt.n	8000606 <HAL_SAI_TxCpltCallback+0xe>
  adc_avg = (adc_avg / avg_count);
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_SAI_TxCpltCallback+0x6c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_SAI_TxCpltCallback+0x70>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <HAL_SAI_TxCpltCallback+0x6c>)
 8000632:	6013      	str	r3, [r2, #0]
  sai_fifo[0] = (uint16_t)((short)((adc_get << 4) - (1 << 15)) >> 0) & (~0x3);
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_SAI_TxCpltCallback+0x74>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	b29b      	uxth	r3, r3
 800063c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <HAL_SAI_TxCpltCallback+0x68>)
 8000644:	801a      	strh	r2, [r3, #0]
//  sai_fifo[0] = 0x7000;//(adc_get << 4) - (1 << 15);
  adc_avg = 0;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_SAI_TxCpltCallback+0x6c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
  avg_count = 0;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SAI_TxCpltCallback+0x70>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200007ec 	.word	0x200007ec
 8000664:	2000080c 	.word	0x2000080c
 8000668:	20000810 	.word	0x20000810
 800066c:	200007e8 	.word	0x200007e8

08000670 <write_register>:
#define DAC_MUTE1 0x09
#define PLL_CLK_CTRL0 0x00
#define DAC_CTRL0 0x06


void write_register(uint8_t reg, uint8_t* data) {
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b0ba      	sub	sp, #232	; 0xe8
 8000674:	af04      	add	r7, sp, #16
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, ADAU_ADDR << 1, reg,
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	b29a      	uxth	r2, r3
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2301      	movs	r3, #1
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2108      	movs	r1, #8
 8000692:	4825      	ldr	r0, [pc, #148]	; (8000728 <write_register+0xb8>)
 8000694:	f002 fa5e 	bl	8002b54 <HAL_I2C_Mem_Write>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);



	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <write_register+0xbc>)
 80006a0:	f107 040c 	add.w	r4, r7, #12
 80006a4:	461d      	mov	r5, r3
 80006a6:	6828      	ldr	r0, [r5, #0]
 80006a8:	6869      	ldr	r1, [r5, #4]
 80006aa:	68aa      	ldr	r2, [r5, #8]
 80006ac:	68eb      	ldr	r3, [r5, #12]
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	8a2b      	ldrh	r3, [r5, #16]
 80006b2:	7caa      	ldrb	r2, [r5, #18]
 80006b4:	8023      	strh	r3, [r4, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	70a3      	strb	r3, [r4, #2]
 80006ba:	f107 031f 	add.w	r3, r7, #31
 80006be:	2251      	movs	r2, #81	; 0x51
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fca0 	bl	8006008 <memset>
	if (ret != HAL_OK) {
 80006c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d018      	beq.n	8000702 <write_register+0x92>
		sprintf(str_fail, "Error is %d", HAL_I2C_GetError(&hi2c2));
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <write_register+0xb8>)
 80006d2:	f002 fb53 	bl	8002d7c <HAL_I2C_GetError>
 80006d6:	4602      	mov	r2, r0
 80006d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006dc:	4914      	ldr	r1, [pc, #80]	; (8000730 <write_register+0xc0>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fc72 	bl	8005fc8 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80006e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd91 	bl	8000210 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <write_register+0xc4>)
 80006fc:	f004 fce9 	bl	80050d2 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}

}
 8000700:	e00d      	b.n	800071e <write_register+0xae>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fd82 	bl	8000210 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <write_register+0xc4>)
 800071a:	f004 fcda 	bl	80050d2 <HAL_UART_Transmit>
}
 800071e:	bf00      	nop
 8000720:	37d8      	adds	r7, #216	; 0xd8
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}
 8000726:	bf00      	nop
 8000728:	20000120 	.word	0x20000120
 800072c:	08006934 	.word	0x08006934
 8000730:	08006928 	.word	0x08006928
 8000734:	20000258 	.word	0x20000258

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0b4      	sub	sp, #208	; 0xd0
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fe84 	bl	800144a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f891 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 fa6d 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f000 fa45 	bl	8000bd8 <MX_DMA_Init>
  MX_SAI1_Init();
 800074e:	f000 f987 	bl	8000a60 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000752:	f000 fa13 	bl	8000b7c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000756:	f000 f8f1 	bl	800093c <MX_ADC1_Init>
  MX_I2C2_Init();
 800075a:	f000 f941 	bl	80009e0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f9dd 	bl	8000b1c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, &adc_get, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	4939      	ldr	r1, [pc, #228]	; (800084c <main+0x114>)
 8000766:	483a      	ldr	r0, [pc, #232]	; (8000850 <main+0x118>)
 8000768:	f000 ff34 	bl	80015d4 <HAL_ADC_Start_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, &sai_fifo, 16);
 800076c:	2210      	movs	r2, #16
 800076e:	4939      	ldr	r1, [pc, #228]	; (8000854 <main+0x11c>)
 8000770:	4839      	ldr	r0, [pc, #228]	; (8000858 <main+0x120>)
 8000772:	f004 fabd 	bl	8004cf0 <HAL_SAI_Transmit_DMA>
  sai_fifo[0] = 0x0F0FU;
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <main+0x11c>)
 8000778:	f640 720f 	movw	r2, #3855	; 0xf0f
 800077c:	801a      	strh	r2, [r3, #0]

  HAL_Delay(1000);
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f000 febf 	bl	8001504 <HAL_Delay>

  char str[100] = "check\r\n";
 8000786:	4a35      	ldr	r2, [pc, #212]	; (800085c <main+0x124>)
 8000788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800078c:	6810      	ldr	r0, [r2, #0]
 800078e:	6851      	ldr	r1, [r2, #4]
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000796:	225c      	movs	r2, #92	; 0x5c
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fc34 	bl	8006008 <memset>
  uint8_t mute_data = 0;	//0 is normal operation, 1 is muted
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint8_t pll_clk_data = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  uint8_t dac_ctrl0 = 0b01100000;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  uint8_t pll_clk_data1 = 0b01000000;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  uint8_t dac_ctl1 = 0b10000;
 80007b8:	2310      	movs	r3, #16
 80007ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 80007be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd24 	bl	8000210 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	4822      	ldr	r0, [pc, #136]	; (8000860 <main+0x128>)
 80007d6:	f004 fc7c 	bl	80050d2 <HAL_UART_Transmit>


  write_register(PLL_CLK_CTRL0, &pll_clk_data);
 80007da:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80007de:	4619      	mov	r1, r3
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff45 	bl	8000670 <write_register>
  write_register(DAC_MUTE1, &mute_data);
 80007e6:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80007ea:	4619      	mov	r1, r3
 80007ec:	2009      	movs	r0, #9
 80007ee:	f7ff ff3f 	bl	8000670 <write_register>
  write_register(DAC_CTRL0, &dac_ctrl0);
 80007f2:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80007f6:	4619      	mov	r1, r3
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff ff39 	bl	8000670 <write_register>
  write_register(0x07, &pll_clk_data1);
 80007fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000802:	4619      	mov	r1, r3
 8000804:	2007      	movs	r0, #7
 8000806:	f7ff ff33 	bl	8000670 <write_register>
  write_register(0x08, &dac_ctl1);
 800080a:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800080e:	4619      	mov	r1, r3
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff ff2d 	bl	8000670 <write_register>



  char str2[100] = "check2\r\n";
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <main+0x12c>)
 8000818:	463b      	mov	r3, r7
 800081a:	6810      	ldr	r0, [r2, #0]
 800081c:	6851      	ldr	r1, [r2, #4]
 800081e:	c303      	stmia	r3!, {r0, r1}
 8000820:	7a12      	ldrb	r2, [r2, #8]
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	f107 0309 	add.w	r3, r7, #9
 8000828:	225b      	movs	r2, #91	; 0x5b
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f005 fbeb 	bl	8006008 <memset>
  HAL_UART_Transmit(&huart3, str2, strlen((char*)str2), HAL_MAX_DELAY);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fceb 	bl	8000210 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	4639      	mov	r1, r7
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <main+0x128>)
 8000846:	f004 fc44 	bl	80050d2 <HAL_UART_Transmit>

  while (1)
 800084a:	e7fe      	b.n	800084a <main+0x112>
 800084c:	200007e8 	.word	0x200007e8
 8000850:	20000078 	.word	0x20000078
 8000854:	200007ec 	.word	0x200007ec
 8000858:	20000174 	.word	0x20000174
 800085c:	08006948 	.word	0x08006948
 8000860:	20000258 	.word	0x20000258
 8000864:	08006950 	.word	0x08006950

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fbc6 	bl	8006008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088c:	f002 fea8 	bl	80035e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008dc:	2348      	movs	r3, #72	; 0x48
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fe87 	bl	8003600 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 fa4e 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800090e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f003 f914 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000926:	f000 fa37 	bl	8000d98 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <MX_ADC1_Init+0x9c>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_ADC1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_ADC1_Init+0x98>)
 800096a:	2201      	movs	r2, #1
 800096c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_ADC1_Init+0x98>)
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_ADC1_Init+0xa0>)
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_ADC1_Init+0x98>)
 800098a:	2201      	movs	r2, #1
 800098c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_ADC1_Init+0x98>)
 8000998:	2201      	movs	r2, #1
 800099a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_ADC1_Init+0x98>)
 800099e:	f000 fdd5 	bl	800154c <HAL_ADC_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 f9f6 	bl	8000d98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_ADC1_Init+0x98>)
 80009be:	f000 ff17 	bl	80017f0 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 f9e6 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000078 	.word	0x20000078
 80009d8:	40012000 	.word	0x40012000
 80009dc:	0f000001 	.word	0x0f000001

080009e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C2_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x601015E9;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C2_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a1c:	f002 f80a 	bl	8002a34 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 f9b7 	bl	8000d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a2e:	f002 fbf7 	bl	8003220 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 f9ae 	bl	8000d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a40:	f002 fc39 	bl	80032b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 f9a5 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000120 	.word	0x20000120
 8000a58:	40005800 	.word	0x40005800
 8000a5c:	601015e9 	.word	0x601015e9

08000a60 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <MX_SAI1_Init+0xb8>)
 8000a68:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 9;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 9;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ade:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SAI1_Init+0xb4>)
 8000b02:	f003 ff77 	bl	80049f4 <HAL_SAI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SAI1_Init+0xb0>
  {
    Error_Handler();
 8000b0c:	f000 f944 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000174 	.word	0x20000174
 8000b18:	40015804 	.word	0x40015804

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART3_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b60:	f004 fa69 	bl	8005036 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f915 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000258 	.word	0x20000258
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	f002 fbc5 	bl	800334e <HAL_PCD_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 f8e5 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002e0 	.word	0x200002e0

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_DMA_Init+0x48>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <MX_DMA_Init+0x48>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_DMA_Init+0x48>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2038      	movs	r0, #56	; 0x38
 8000bfc:	f001 f9a5 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c00:	2038      	movs	r0, #56	; 0x38
 8000c02:	f001 f9be 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2039      	movs	r0, #57	; 0x39
 8000c0c:	f001 f99d 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c10:	2039      	movs	r0, #57	; 0x39
 8000c12:	f001 f9b6 	bl	8001f82 <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a53      	ldr	r2, [pc, #332]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	623b      	str	r3, [r7, #32]
 8000c50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a47      	ldr	r2, [pc, #284]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c70:	f043 0320 	orr.w	r3, r3, #32
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a41      	ldr	r2, [pc, #260]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a3b      	ldr	r2, [pc, #236]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a29      	ldr	r2, [pc, #164]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_GPIO_Init+0x168>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d00:	4823      	ldr	r0, [pc, #140]	; (8000d90 <MX_GPIO_Init+0x16c>)
 8000d02:	f001 fe7d 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_GPIO_Init+0x170>)
 8000d0c:	f001 fe78 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_GPIO_Init+0x16c>)
 8000d2e:	f001 fcbb 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d38:	2311      	movs	r3, #17
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x16c>)
 8000d4c:	f001 fcac 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <MX_GPIO_Init+0x170>)
 8000d68:	f001 fc9e 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x170>)
 8000d80:	f001 fc92 	bl	80026a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b09a      	sub	sp, #104	; 0x68
 8000d9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9e:	b672      	cpsid	i
}
 8000da0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <Error_Handler+0x48>)
 8000da4:	1d3c      	adds	r4, r7, #4
 8000da6:	461d      	mov	r5, r3
 8000da8:	6828      	ldr	r0, [r5, #0]
 8000daa:	6869      	ldr	r1, [r5, #4]
 8000dac:	68aa      	ldr	r2, [r5, #8]
 8000dae:	68eb      	ldr	r3, [r5, #12]
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	7c2b      	ldrb	r3, [r5, #16]
 8000db4:	7023      	strb	r3, [r4, #0]
 8000db6:	f107 0315 	add.w	r3, r7, #21
 8000dba:	2253      	movs	r2, #83	; 0x53
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 f922 	bl	8006008 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa22 	bl	8000210 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	1d39      	adds	r1, r7, #4
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <Error_Handler+0x4c>)
 8000dd8:	f004 f97b 	bl	80050d2 <HAL_UART_Transmit>

  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x44>
 8000dde:	bf00      	nop
 8000de0:	0800695c 	.word	0x0800695c
 8000de4:	20000258 	.word	0x20000258

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <HAL_ADC_MspInit+0xd4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d154      	bne.n	8000efc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	; (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000e96:	f001 fc07 	bl	80026a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_ADC_MspInit+0xe4>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ec4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ed4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ee2:	f001 f869 	bl	8001fb8 <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000eec:	f7ff ff54 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200000c0 	.word	0x200000c0
 8000f14:	40026410 	.word	0x40026410

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0aa      	sub	sp, #168	; 0xa8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2284      	movs	r2, #132	; 0x84
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f865 	bl	8006008 <memset>
  if(hi2c->Instance==I2C2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_I2C_MspInit+0xb0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d13b      	bne.n	8000fc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f81c 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f62:	f7ff ff19 	bl	8000d98 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f84:	2312      	movs	r3, #18
 8000f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_I2C_MspInit+0xb8>)
 8000fa4:	f001 fb80 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000fae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37a8      	adds	r7, #168	; 0xa8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021400 	.word	0x40021400

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0aa      	sub	sp, #168	; 0xa8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2284      	movs	r2, #132	; 0x84
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 f807 	bl	8006008 <memset>
  if(huart->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_UART_MspInit+0xb4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d13c      	bne.n	800107e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800100a:	2300      	movs	r3, #0
 800100c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4618      	mov	r0, r3
 8001014:	f002 ffbe 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff febb 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_UART_MspInit+0xb8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106c:	2307      	movs	r3, #7
 800106e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0xbc>)
 800107a:	f001 fb15 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	37a8      	adds	r7, #168	; 0xa8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004800 	.word	0x40004800
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00

08001094 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ac      	sub	sp, #176	; 0xb0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2284      	movs	r2, #132	; 0x84
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 ffa7 	bl	8006008 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c2:	d159      	bne.n	8001178 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 ff5d 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010e0:	f7ff fe5a 	bl	8000d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	4619      	mov	r1, r3
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001124:	f001 fac0 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	4619      	mov	r1, r3
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001144:	f001 fab0 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001152:	6353      	str	r3, [r2, #52]	; 0x34
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	; 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0aa      	sub	sp, #168	; 0xa8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2284      	movs	r2, #132	; 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 ff35 	bl	8006008 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <HAL_SAI_MspInit+0x14c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 8090 	bne.w	80012ca <HAL_SAI_MspInit+0x142>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80011aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011b0:	2332      	movs	r3, #50	; 0x32
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fedf 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_SAI_MspInit+0x58>
    {
      Error_Handler();
 80011dc:	f7ff fddc 	bl	8000d98 <Error_Handler>
    }

    if (SAI1_client == 0)
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_SAI_MspInit+0x150>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10b      	bne.n	8001200 <HAL_SAI_MspInit+0x78>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_SAI_MspInit+0x154>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <HAL_SAI_MspInit+0x154>)
 80011ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f2:	6453      	str	r3, [r2, #68]	; 0x44
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_SAI_MspInit+0x154>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_SAI_MspInit+0x150>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <HAL_SAI_MspInit+0x150>)
 8001208:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120a:	2304      	movs	r3, #4
 800120c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001222:	2306      	movs	r3, #6
 8001224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800122c:	4619      	mov	r1, r3
 800122e:	482c      	ldr	r0, [pc, #176]	; (80012e0 <HAL_SAI_MspInit+0x158>)
 8001230:	f001 fa3a 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001234:	2370      	movs	r3, #112	; 0x70
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800124c:	2306      	movs	r3, #6
 800124e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001256:	4619      	mov	r1, r3
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <HAL_SAI_MspInit+0x158>)
 800125a:	f001 fa25 	bl	80026a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_SAI_MspInit+0x160>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 800126c:	2240      	movs	r2, #64	; 0x40
 800126e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001284:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001288:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 80012a4:	f000 fe88 	bl	8001fb8 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 80012ae:	f7ff fd73 	bl	8000d98 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 80012b6:	671a      	str	r2, [r3, #112]	; 0x70
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 80012c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_SAI_MspInit+0x15c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80012ca:	bf00      	nop
 80012cc:	37a8      	adds	r7, #168	; 0xa8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40015804 	.word	0x40015804
 80012d8:	20000814 	.word	0x20000814
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	200001f8 	.word	0x200001f8
 80012e8:	40026428 	.word	0x40026428

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8c4 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA2_Stream0_IRQHandler+0x10>)
 8001346:	f000 ff45 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000c0 	.word	0x200000c0

08001354 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA2_Stream1_IRQHandler+0x10>)
 800135a:	f000 ff3b 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001f8 	.word	0x200001f8

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f004 fe3e 	bl	8006018 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20050000 	.word	0x20050000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20000818 	.word	0x20000818
 80013d0:	20000968 	.word	0x20000968

080013d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001414:	4c0b      	ldr	r4, [pc, #44]	; (8001444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001422:	f7ff ffd7 	bl	80013d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f004 fdfd 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f985 	bl	8000738 <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800143c:	080069d4 	.word	0x080069d4
  ldr r2, =_sbss
 8001440:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001444:	20000968 	.word	0x20000968

08001448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>

0800144a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
 8001450:	f000 fd70 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f805 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145a:	f7ff fcc5 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fd8b 	bl	8001f9e <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 fd53 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	2000081c 	.word	0x2000081c

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000081c 	.word	0x2000081c

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e031      	b.n	80015c6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc60 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_ADC_Init+0x84>)
 8001590:	4013      	ands	r3, r2
 8001592:	f043 0202 	orr.w	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa7e 	bl	8001a9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	ffffeefd 	.word	0xffffeefd

080015d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x1e>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e0d4      	b.n	800179c <HAL_ADC_Start_DMA+0x1c8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d018      	beq.n	800163a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001618:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_ADC_Start_DMA+0x1d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a62      	ldr	r2, [pc, #392]	; (80017a8 <HAL_ADC_Start_DMA+0x1d4>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9a      	lsrs	r2, r3, #18
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3b01      	subs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	f040 809c 	bne.w	8001782 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_ADC_Start_DMA+0x1d8>)
 8001650:	4013      	ands	r3, r2
 8001652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001684:	d106      	bne.n	8001694 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f023 0206 	bic.w	r2, r3, #6
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
 8001692:	e002      	b.n	800169a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	4a42      	ldr	r2, [pc, #264]	; (80017b0 <HAL_ADC_Start_DMA+0x1dc>)
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <HAL_ADC_Start_DMA+0x1e0>)
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <HAL_ADC_Start_DMA+0x1e4>)
 80016b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	334c      	adds	r3, #76	; 0x4c
 80016ee:	4619      	mov	r1, r3
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f000 fd0e 	bl	8002114 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_ADC_Start_DMA+0x1e8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10f      	bne.n	8001724 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d143      	bne.n	800179a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	e03a      	b.n	800179a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_ADC_Start_DMA+0x1ec>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10e      	bne.n	800174c <HAL_ADC_Start_DMA+0x178>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800174a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_ADC_Start_DMA+0x1e8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d120      	bne.n	800179a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_ADC_Start_DMA+0x1f0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d11b      	bne.n	800179a <HAL_ADC_Start_DMA+0x1c6>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d114      	bne.n	800179a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00b      	b.n	800179a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	fffff8fe 	.word	0xfffff8fe
 80017b0:	08001c91 	.word	0x08001c91
 80017b4:	08001d4b 	.word	0x08001d4b
 80017b8:	08001d67 	.word	0x08001d67
 80017bc:	40012300 	.word	0x40012300
 80017c0:	40012000 	.word	0x40012000
 80017c4:	40012200 	.word	0x40012200

080017c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1c>
 8001808:	2302      	movs	r3, #2
 800180a:	e136      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x28a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d93a      	bls.n	8001892 <HAL_ADC_ConfigChannel+0xa2>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001824:	d035      	beq.n	8001892 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	3b1e      	subs	r3, #30
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a8d      	ldr	r2, [pc, #564]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68d9      	ldr	r1, [r3, #12]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186a:	e035      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	4603      	mov	r3, r0
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4403      	add	r3, r0
 8001884:	3b1e      	subs	r3, #30
 8001886:	409a      	lsls	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001890:	e022      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6919      	ldr	r1, [r3, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	2207      	movs	r2, #7
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43da      	mvns	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	400a      	ands	r2, r1
 80018b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6919      	ldr	r1, [r3, #16]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4403      	add	r3, r0
 80018ce:	409a      	lsls	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d824      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b05      	subs	r3, #5
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
 8001928:	e04c      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d824      	bhi.n	800197c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b23      	subs	r3, #35	; 0x23
 8001944:	221f      	movs	r2, #31
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b23      	subs	r3, #35	; 0x23
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
 800197a:	e023      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b41      	subs	r3, #65	; 0x41
 800198e:	221f      	movs	r2, #31
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43da      	mvns	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	400a      	ands	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b41      	subs	r3, #65	; 0x41
 80019b8:	fa00 f203 	lsl.w	r2, r0, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10a      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1f4>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10f      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d10b      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d12b      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_ADC_ConfigChannel+0x23a>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b11      	cmp	r3, #17
 8001a28:	d122      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9a      	lsrs	r2, r3, #18
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a62:	e002      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	10000012 	.word	0x10000012
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	40012300 	.word	0x40012300
 8001a94:	20000000 	.word	0x20000000
 8001a98:	431bde83 	.word	0x431bde83

08001a9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <ADC_Init+0x1ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <ADC_Init+0x1ec>)
 8001aaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001aae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <ADC_Init+0x1ec>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4973      	ldr	r1, [pc, #460]	; (8001c88 <ADC_Init+0x1ec>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <ADC_Init+0x1f0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e00f      	b.n	8001b96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0202 	bic.w	r2, r2, #2
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	005a      	lsls	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	035a      	lsls	r2, r3, #13
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	e007      	b.n	8001c0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	051a      	lsls	r2, r3, #20
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6899      	ldr	r1, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4e:	025a      	lsls	r2, r3, #9
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	029a      	lsls	r2, r3, #10
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	0f000001 	.word	0x0f000001

08001c90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13c      	bne.n	8001d24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12b      	bne.n	8001d1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d127      	bne.n	8001d1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d119      	bne.n	8001d1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0220 	bic.w	r2, r2, #32
 8001cf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7fe fc4d 	bl	80005bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d22:	e00e      	b.n	8001d42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fd53 	bl	80017dc <HAL_ADC_ErrorCallback>
}
 8001d36:	e004      	b.n	8001d42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7ff fd35 	bl	80017c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fd28 	bl	80017dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	05fa0000 	.word	0x05fa0000

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fa92 	bl	80014ec <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e099      	b.n	8002108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff4:	e00f      	b.n	8002016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff6:	f7ff fa79 	bl	80014ec <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b05      	cmp	r3, #5
 8002002:	d908      	bls.n	8002016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e078      	b.n	8002108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e8      	bne.n	8001ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_DMA_Init+0x158>)
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2b04      	cmp	r3, #4
 800206e:	d107      	bne.n	8002080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4313      	orrs	r3, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0307 	bic.w	r3, r3, #7
 8002096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d117      	bne.n	80020da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fa77 	bl	80025b0 <DMA_CheckFifoParam>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020d6:	2301      	movs	r3, #1
 80020d8:	e016      	b.n	8002108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa2e 	bl	8002544 <DMA_CalcBaseAndBitshift>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	223f      	movs	r2, #63	; 0x3f
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	f010803f 	.word	0xf010803f

08002114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_DMA_Start_IT+0x26>
 8002136:	2302      	movs	r3, #2
 8002138:	e048      	b.n	80021cc <HAL_DMA_Start_IT+0xb8>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d137      	bne.n	80021be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f9c0 	bl	80024e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	409a      	lsls	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0216 	orr.w	r2, r2, #22
 8002182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e005      	b.n	80021ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021e0:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_DMA_IRQHandler+0x248>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a8e      	ldr	r2, [pc, #568]	; (8002420 <HAL_DMA_IRQHandler+0x24c>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	2208      	movs	r2, #8
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0204 	bic.w	r2, r2, #4
 8002226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2208      	movs	r2, #8
 800222e:	409a      	lsls	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d012      	beq.n	8002276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2201      	movs	r2, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	2204      	movs	r2, #4
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2204      	movs	r2, #4
 800229a:	409a      	lsls	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f043 0204 	orr.w	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2210      	movs	r2, #16
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03c      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	2210      	movs	r2, #16
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d024      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
 8002302:	e01f      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e016      	b.n	8002344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0208 	bic.w	r2, r2, #8
 8002332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2220      	movs	r2, #32
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 808f 	beq.w	8002474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8087 	beq.w	8002474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2220      	movs	r2, #32
 800236c:	409a      	lsls	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b05      	cmp	r3, #5
 800237c:	d136      	bne.n	80023ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0216 	bic.w	r2, r2, #22
 800238c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_DMA_IRQHandler+0x1da>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	223f      	movs	r2, #63	; 0x3f
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07e      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
        }
        return;
 80023ea:	e079      	b.n	80024e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01d      	beq.n	8002436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10d      	bne.n	8002424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	2b00      	cmp	r3, #0
 800240e:	d031      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e02c      	b.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
 800241a:	bf00      	nop
 800241c:	20000000 	.word	0x20000000
 8002420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d023      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e01e      	b.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	2b00      	cmp	r3, #0
 800247a:	d032      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d022      	beq.n	80024ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2205      	movs	r2, #5
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d307      	bcc.n	80024bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f2      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x2cc>
 80024ba:	e000      	b.n	80024be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
 80024de:	e000      	b.n	80024e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024e0:	bf00      	nop
    }
  }
}
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d108      	bne.n	8002528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002526:	e007      	b.n	8002538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b10      	subs	r3, #16
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d908      	bls.n	8002584 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <DMA_CalcBaseAndBitshift+0x68>)
 800257a:	4013      	ands	r3, r2
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	; 0x58
 8002582:	e006      	b.n	8002592 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <DMA_CalcBaseAndBitshift+0x68>)
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	aaaaaaab 	.word	0xaaaaaaab
 80025a8:	08006988 	.word	0x08006988
 80025ac:	fffffc00 	.word	0xfffffc00

080025b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11f      	bne.n	800260a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d856      	bhi.n	800267e <DMA_CheckFifoParam+0xce>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <DMA_CheckFifoParam+0x28>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025fb 	.word	0x080025fb
 80025e0:	080025e9 	.word	0x080025e9
 80025e4:	0800267f 	.word	0x0800267f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d046      	beq.n	8002682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e043      	b.n	8002682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002602:	d140      	bne.n	8002686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002608:	e03d      	b.n	8002686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	d121      	bne.n	8002658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d837      	bhi.n	800268a <DMA_CheckFifoParam+0xda>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <DMA_CheckFifoParam+0x70>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002631 	.word	0x08002631
 8002624:	08002637 	.word	0x08002637
 8002628:	08002631 	.word	0x08002631
 800262c:	08002649 	.word	0x08002649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e030      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d025      	beq.n	800268e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002646:	e022      	b.n	800268e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002650:	d11f      	bne.n	8002692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002656:	e01c      	b.n	8002692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d903      	bls.n	8002666 <DMA_CheckFifoParam+0xb6>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d003      	beq.n	800266c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002664:	e018      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      break;
 800266a:	e015      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00e      	beq.n	8002696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e00b      	b.n	8002696 <DMA_CheckFifoParam+0xe6>
      break;
 800267e:	bf00      	nop
 8002680:	e00a      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e008      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e006      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e004      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;   
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
    }
  } 
  
  return status; 
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e175      	b.n	80029b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8164 	bne.w	80029ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x56>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80be 	beq.w	80029ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800284a:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d037      	beq.n	80028e6 <HAL_GPIO_Init+0x23e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_GPIO_Init+0x330>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x23a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x236>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_GPIO_Init+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x232>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x33c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a53      	ldr	r2, [pc, #332]	; (80029e8 <HAL_GPIO_Init+0x340>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x22a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_GPIO_Init+0x344>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_GPIO_Init+0x348>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_GPIO_Init+0x34c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <HAL_GPIO_Init+0x350>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x21a>
 80028be:	2309      	movs	r3, #9
 80028c0:	e012      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e010      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x328>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <HAL_GPIO_Init+0x354>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_GPIO_Init+0x354>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_GPIO_Init+0x354>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_GPIO_Init+0x354>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae86 	bls.w	80026c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40022400 	.word	0x40022400
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fa5c 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e006      	b.n	8002abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d104      	bne.n	8002ace <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_I2C_Init+0x11c>)
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	02008000 	.word	0x02008000

08002b54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	f040 80f9 	bne.w	8002d6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x34>
 8002b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0ed      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Mem_Write+0x4e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0e6      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002baa:	f7fe fc9f 	bl	80014ec <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f961 	bl	8002e84 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0d1      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf4:	88f8      	ldrh	r0, [r7, #6]
 8002bf6:	893a      	ldrh	r2, [r7, #8]
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4603      	mov	r3, r0
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f8c5 	bl	8002d94 <I2C_RequestMemoryWrite>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0a9      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2bff      	cmp	r3, #255	; 0xff
 8002c24:	d90e      	bls.n	8002c44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	2300      	movs	r3, #0
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fabd 	bl	80031bc <I2C_TransferConfig>
 8002c42:	e00f      	b.n	8002c64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 faac 	bl	80031bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f94b 	bl	8002f04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e07b      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d034      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x1c8>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d130      	bne.n	8002d1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f8dd 	bl	8002e84 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04d      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d90e      	bls.n	8002cfc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	2300      	movs	r3, #0
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fa61 	bl	80031bc <I2C_TransferConfig>
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa50 	bl	80031bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d19e      	bne.n	8002c64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f92a 	bl	8002f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e01a      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_I2C_Mem_Write+0x224>)
 8002d4e:	400b      	ands	r3, r1
 8002d50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fe00e800 	.word	0xfe00e800

08002d7c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <I2C_RequestMemoryWrite+0xa4>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f9fd 	bl	80031bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	69b9      	ldr	r1, [r7, #24]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f89c 	bl	8002f04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e02c      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
 8002de6:	e015      	b.n	8002e14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	69b9      	ldr	r1, [r7, #24]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f882 	bl	8002f04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e012      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0a:	893b      	ldrh	r3, [r7, #8]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f830 	bl	8002e84 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	80002000 	.word	0x80002000

08002e3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d103      	bne.n	8002e5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d007      	beq.n	8002e78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	619a      	str	r2, [r3, #24]
  }
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e94:	e022      	b.n	8002edc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d01e      	beq.n	8002edc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fe fb25 	bl	80014ec <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d113      	bne.n	8002edc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e00f      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d0cd      	beq.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f10:	e02c      	b.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f870 	bl	8002ffc <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02a      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d01e      	beq.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fadd 	bl	80014ec <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d1cb      	bne.n	8002f12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	e028      	b.n	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f830 	bl	8002ffc <I2C_IsErrorOccurred>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e026      	b.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe faa1 	bl	80014ec <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e007      	b.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d1cf      	bne.n	8002f92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d068      	beq.n	80030fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2210      	movs	r2, #16
 800302e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003030:	e049      	b.n	80030c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d045      	beq.n	80030c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fe fa57 	bl	80014ec <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_IsErrorOccurred+0x54>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13a      	bne.n	80030c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003062:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003072:	d121      	bne.n	80030b8 <I2C_IsErrorOccurred+0xbc>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307a:	d01d      	beq.n	80030b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	2b20      	cmp	r3, #32
 8003080:	d01a      	beq.n	80030b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003090:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003092:	f7fe fa2b 	bl	80014ec <HAL_GetTick>
 8003096:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003098:	e00e      	b.n	80030b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800309a:	f7fe fa27 	bl	80014ec <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b19      	cmp	r3, #25
 80030a6:	d907      	bls.n	80030b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030b6:	e006      	b.n	80030c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d1e9      	bne.n	800309a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d003      	beq.n	80030dc <I2C_IsErrorOccurred+0xe0>
 80030d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0aa      	beq.n	8003032 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f043 0308 	orr.w	r3, r3, #8
 8003134:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01c      	beq.n	80031aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fe63 	bl	8002e3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <I2C_IsErrorOccurred+0x1bc>)
 8003182:	400b      	ands	r3, r1
 8003184:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3728      	adds	r7, #40	; 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	4613      	mov	r3, r2
 80031cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031d4:	7a7b      	ldrb	r3, [r7, #9]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	0d5b      	lsrs	r3, r3, #21
 80031f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <I2C_TransferConfig+0x60>)
 80031fc:	430b      	orrs	r3, r1
 80031fe:	43db      	mvns	r3, r3
 8003200:	ea02 0103 	and.w	r1, r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	03ff63ff 	.word	0x03ff63ff

08003220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	d138      	bne.n	80032a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003240:	2302      	movs	r3, #2
 8003242:	e032      	b.n	80032aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d139      	bne.n	8003340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e033      	b.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2224      	movs	r2, #36	; 0x24
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800334e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003350:	b08f      	sub	sp, #60	; 0x3c
 8003352:	af0a      	add	r7, sp, #40	; 0x28
 8003354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e116      	b.n	800358e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fe8a 	bl	8001094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2203      	movs	r2, #3
 8003384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fb76 	bl	8005a90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	687e      	ldr	r6, [r7, #4]
 80033ac:	466d      	mov	r5, sp
 80033ae:	f106 0410 	add.w	r4, r6, #16
 80033b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033be:	e885 0003 	stmia.w	r5, {r0, r1}
 80033c2:	1d33      	adds	r3, r6, #4
 80033c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f002 fb0a 	bl	80059e0 <USB_CoreInit>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0d7      	b.n	800358e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f002 fb64 	bl	8005ab2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e04a      	b.n	8003486 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	333d      	adds	r3, #61	; 0x3d
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	333c      	adds	r3, #60	; 0x3c
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	b298      	uxth	r0, r3
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3344      	adds	r3, #68	; 0x44
 800342c:	4602      	mov	r2, r0
 800342e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3340      	adds	r3, #64	; 0x40
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3348      	adds	r3, #72	; 0x48
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	334c      	adds	r3, #76	; 0x4c
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3354      	adds	r3, #84	; 0x54
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3af      	bcc.n	80033f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e044      	b.n	8003520 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3301      	adds	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3b5      	bcc.n	8003496 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	687e      	ldr	r6, [r7, #4]
 8003532:	466d      	mov	r5, sp
 8003534:	f106 0410 	add.w	r4, r6, #16
 8003538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003544:	e885 0003 	stmia.w	r5, {r0, r1}
 8003548:	1d33      	adds	r3, r6, #4
 800354a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	f002 fafd 	bl	8005b4c <USB_DevInit>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e014      	b.n	800358e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f80b 	bl	8003598 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f002 fcbb 	bl	8005f02 <USB_DevDisconnect>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_PCDEx_ActivateLPM+0x44>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	10000003 	.word	0x10000003

080035e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000

08003600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e291      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8087 	beq.w	8003732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003624:	4b96      	ldr	r3, [pc, #600]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b04      	cmp	r3, #4
 800362e:	d00c      	beq.n	800364a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003630:	4b93      	ldr	r3, [pc, #588]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d112      	bne.n	8003662 <HAL_RCC_OscConfig+0x62>
 800363c:	4b90      	ldr	r3, [pc, #576]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003648:	d10b      	bne.n	8003662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364a:	4b8d      	ldr	r3, [pc, #564]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06c      	beq.n	8003730 <HAL_RCC_OscConfig+0x130>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d168      	bne.n	8003730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e26b      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x7a>
 800366c:	4b84      	ldr	r3, [pc, #528]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a83      	ldr	r2, [pc, #524]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e02e      	b.n	80036d8 <HAL_RCC_OscConfig+0xd8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x9c>
 8003682:	4b7f      	ldr	r3, [pc, #508]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7e      	ldr	r2, [pc, #504]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b7c      	ldr	r3, [pc, #496]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7b      	ldr	r2, [pc, #492]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xd8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0xc0>
 80036a6:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a75      	ldr	r2, [pc, #468]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a72      	ldr	r2, [pc, #456]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xd8>
 80036c0:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b6c      	ldr	r3, [pc, #432]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6b      	ldr	r2, [pc, #428]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd ff04 	bl	80014ec <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fd ff00 	bl	80014ec <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e21f      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b61      	ldr	r3, [pc, #388]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe8>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fef0 	bl	80014ec <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fd feec 	bl	80014ec <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e20b      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b57      	ldr	r3, [pc, #348]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x110>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d069      	beq.n	8003812 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373e:	4b50      	ldr	r3, [pc, #320]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x190>
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b47      	ldr	r3, [pc, #284]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x17a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1df      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	493d      	ldr	r1, [pc, #244]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e040      	b.n	8003812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d023      	beq.n	80037e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a38      	ldr	r2, [pc, #224]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fea2 	bl	80014ec <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ac:	f7fd fe9e 	bl	80014ec <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1bd      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4929      	ldr	r1, [pc, #164]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
 80037de:	e018      	b.n	8003812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd fe7e 	bl	80014ec <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f4:	f7fd fe7a 	bl	80014ec <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e199      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d038      	beq.n	8003890 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	4a15      	ldr	r2, [pc, #84]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fe5b 	bl	80014ec <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383a:	f7fd fe57 	bl	80014ec <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e176      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x23a>
 8003858:	e01a      	b.n	8003890 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_RCC_OscConfig+0x280>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd fe41 	bl	80014ec <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7fd fe3d 	bl	80014ec <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d903      	bls.n	8003884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e15c      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
 8003880:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b91      	ldr	r3, [pc, #580]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a4 	beq.w	80039e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4b8b      	ldr	r3, [pc, #556]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a87      	ldr	r2, [pc, #540]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b85      	ldr	r3, [pc, #532]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c6:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d118      	bne.n	8003904 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038d2:	4b7f      	ldr	r3, [pc, #508]	; (8003ad0 <HAL_RCC_OscConfig+0x4d0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7e      	ldr	r2, [pc, #504]	; (8003ad0 <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038de:	f7fd fe05 	bl	80014ec <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e6:	f7fd fe01 	bl	80014ec <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b64      	cmp	r3, #100	; 0x64
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e120      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f8:	4b75      	ldr	r3, [pc, #468]	; (8003ad0 <HAL_RCC_OscConfig+0x4d0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x31a>
 800390c:	4b6f      	ldr	r3, [pc, #444]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a6e      	ldr	r2, [pc, #440]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	e02d      	b.n	8003976 <HAL_RCC_OscConfig+0x376>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x33c>
 8003922:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a69      	ldr	r2, [pc, #420]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b67      	ldr	r3, [pc, #412]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a66      	ldr	r2, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
 800393a:	e01c      	b.n	8003976 <HAL_RCC_OscConfig+0x376>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d10c      	bne.n	800395e <HAL_RCC_OscConfig+0x35e>
 8003944:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a60      	ldr	r2, [pc, #384]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a5d      	ldr	r2, [pc, #372]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	e00b      	b.n	8003976 <HAL_RCC_OscConfig+0x376>
 800395e:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a5a      	ldr	r2, [pc, #360]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	4b58      	ldr	r3, [pc, #352]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d015      	beq.n	80039aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd fdb5 	bl	80014ec <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd fdb1 	bl	80014ec <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0ce      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ee      	beq.n	8003986 <HAL_RCC_OscConfig+0x386>
 80039a8:	e014      	b.n	80039d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fd fd9f 	bl	80014ec <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fd fd9b 	bl	80014ec <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c8:	4b40      	ldr	r3, [pc, #256]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ee      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039da:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a3b      	ldr	r2, [pc, #236]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80a4 	beq.w	8003b38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d06b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d149      	bne.n	8003a98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a04:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fd6c 	bl	80014ec <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd fd68 	bl	80014ec <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e087      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fd3c 	bl	80014ec <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fd38 	bl	80014ec <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e057      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x478>
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fd22 	bl	80014ec <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fd1e 	bl	80014ec <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e03d      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x4ac>
 8003aca:	e035      	b.n	8003b38 <HAL_RCC_OscConfig+0x538>
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x544>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d121      	bne.n	8003b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d11a      	bne.n	8003b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0d0      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 020f 	bic.w	r2, r3, #15
 8003b76:	4965      	ldr	r1, [pc, #404]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d040      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d115      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e073      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4936      	ldr	r1, [pc, #216]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3c:	f7fd fc56 	bl	80014ec <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fd fc52 	bl	80014ec <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e053      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d210      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 020f 	bic.w	r2, r3, #15
 8003c82:	4922      	ldr	r1, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1cc>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1d4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fbb2 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08006970 	.word	0x08006970
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	20000004 	.word	0x20000004

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b094      	sub	sp, #80	; 0x50
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80e1 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e0db      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d58:	e0db      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d5e:	e0d8      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	6139      	str	r1, [r7, #16]
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4651      	mov	r1, sl
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd8:	4659      	mov	r1, fp
 8003dda:	eb63 0901 	sbc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	462b      	mov	r3, r5
 8003e00:	eb49 0303 	adc.w	r3, r9, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e12:	4629      	mov	r1, r5
 8003e14:	024b      	lsls	r3, r1, #9
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	024a      	lsls	r2, r1, #9
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e26:	2200      	movs	r2, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e30:	f7fc fa46 	bl	80002c0 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	4611      	mov	r1, r2
 8003e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4641      	mov	r1, r8
 8003e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e90:	ebb2 040a 	subs.w	r4, r2, sl
 8003e94:	eb63 050b 	sbc.w	r5, r3, fp
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb45 0303 	adc.w	r3, r5, r3
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee4:	f7fc f9ec 	bl	80002c0 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3750      	adds	r7, #80	; 0x50
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000000 	.word	0x20000000

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	08006980 	.word	0x08006980

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffdc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08006980 	.word	0x08006980

08003f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fbc:	4b69      	ldr	r3, [pc, #420]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fc6:	6093      	str	r3, [r2, #8]
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	4964      	ldr	r1, [pc, #400]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d017      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	4959      	ldr	r1, [pc, #356]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	494a      	ldr	r1, [pc, #296]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 808b 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a39      	ldr	r2, [pc, #228]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a34      	ldr	r2, [pc, #208]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fd fa26 	bl	80014ec <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd fa22 	bl	80014ec <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e357      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d035      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d02e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d114      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd f9ea 	bl	80014ec <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd f9e6 	bl	80014ec <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e319      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d111      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800415a:	400b      	ands	r3, r1
 800415c:	4901      	ldr	r1, [pc, #4]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	0ffffcff 	.word	0x0ffffcff
 8004170:	4baa      	ldr	r3, [pc, #680]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4aa9      	ldr	r2, [pc, #676]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	4ba7      	ldr	r3, [pc, #668]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	49a4      	ldr	r1, [pc, #656]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800419a:	4ba0      	ldr	r3, [pc, #640]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	4a9e      	ldr	r2, [pc, #632]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041aa:	4b9c      	ldr	r3, [pc, #624]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	4999      	ldr	r1, [pc, #612]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c8:	4b94      	ldr	r3, [pc, #592]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d6:	4991      	ldr	r1, [pc, #580]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ea:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	4988      	ldr	r1, [pc, #544]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420c:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	4980      	ldr	r1, [pc, #512]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4977      	ldr	r1, [pc, #476]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004250:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	496f      	ldr	r1, [pc, #444]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f023 020c 	bic.w	r2, r3, #12
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	4966      	ldr	r1, [pc, #408]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004294:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	495e      	ldr	r1, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042b6:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	4955      	ldr	r1, [pc, #340]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042d8:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	494d      	ldr	r1, [pc, #308]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042fa:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	4944      	ldr	r1, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	493c      	ldr	r1, [pc, #240]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	4933      	ldr	r1, [pc, #204]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436e:	492b      	ldr	r1, [pc, #172]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004390:	4922      	ldr	r1, [pc, #136]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a0:	d101      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f4:	4909      	ldr	r1, [pc, #36]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d006      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80d9 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a01      	ldr	r2, [pc, #4]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800441c:	40023800 	.word	0x40023800
 8004420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004422:	f7fd f863 	bl	80014ec <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800442a:	f7fd f85f 	bl	80014ec <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e194      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11d      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800445c:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004470:	0e1b      	lsrs	r3, r3, #24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	019a      	lsls	r2, r3, #6
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	071b      	lsls	r3, r3, #28
 8004490:	4957      	ldr	r1, [pc, #348]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02e      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c2:	d129      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044c4:	4b4a      	ldr	r3, [pc, #296]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d8:	0f1b      	lsrs	r3, r3, #28
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	019a      	lsls	r2, r3, #6
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	493d      	ldr	r1, [pc, #244]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f023 021f 	bic.w	r2, r3, #31
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	3b01      	subs	r3, #1
 8004510:	4937      	ldr	r1, [pc, #220]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452a:	0e1b      	lsrs	r3, r3, #24
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004532:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	0f1b      	lsrs	r3, r3, #28
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	019a      	lsls	r2, r3, #6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	431a      	orrs	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	071b      	lsls	r3, r3, #28
 8004558:	4925      	ldr	r1, [pc, #148]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d011      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	071b      	lsls	r3, r3, #28
 8004588:	4919      	ldr	r1, [pc, #100]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fc ffa6 	bl	80014ec <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a4:	f7fc ffa2 	bl	80014ec <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0d7      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	f040 80cd 	bne.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d6:	f7fc ff89 	bl	80014ec <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045de:	f7fc ff85 	bl	80014ec <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d903      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0ba      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045f4:	4b5e      	ldr	r3, [pc, #376]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004600:	d0ed      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02e      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d12a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800462a:	4b51      	ldr	r3, [pc, #324]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004638:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	0f1b      	lsrs	r3, r3, #28
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	019a      	lsls	r2, r3, #6
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	071b      	lsls	r3, r3, #28
 800465e:	4944      	ldr	r1, [pc, #272]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004666:	4b42      	ldr	r3, [pc, #264]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	493d      	ldr	r1, [pc, #244]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d022      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004694:	d11d      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	0f1b      	lsrs	r3, r3, #28
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	019a      	lsls	r2, r3, #6
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	061b      	lsls	r3, r3, #24
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	4929      	ldr	r1, [pc, #164]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d028      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	0e1b      	lsrs	r3, r3, #24
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	019a      	lsls	r2, r3, #6
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	4917      	ldr	r1, [pc, #92]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4911      	ldr	r1, [pc, #68]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fc fed6 	bl	80014ec <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004744:	f7fc fed2 	bl	80014ec <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e007      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004762:	d1ef      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004792:	f040 808d 	bne.w	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004796:	4b93      	ldr	r3, [pc, #588]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80047a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ac:	d07c      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b4:	d87b      	bhi.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d039      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80047c4:	e073      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047c6:	4b87      	ldr	r3, [pc, #540]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d2:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047da:	4a83      	ldr	r2, [pc, #524]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e007      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047e4:	4b7f      	ldr	r3, [pc, #508]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ec:	4a7f      	ldr	r2, [pc, #508]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047f4:	4b7b      	ldr	r3, [pc, #492]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	0e1b      	lsrs	r3, r3, #24
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004802:	4b78      	ldr	r3, [pc, #480]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	fb03 f202 	mul.w	r2, r3, r2
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800481c:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800481e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
        break;
 8004836:	e03b      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004844:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484c:	4a66      	ldr	r2, [pc, #408]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e007      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485e:	4a63      	ldr	r2, [pc, #396]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004866:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004874:	4b5b      	ldr	r3, [pc, #364]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	fb03 f202 	mul.w	r2, r3, r2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800488e:	4b55      	ldr	r3, [pc, #340]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
        break;
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80048a8:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80048aa:	617b      	str	r3, [r7, #20]
        break;
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80048ae:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	f040 808d 	bne.w	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80048ba:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d0:	d07c      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d8:	d87b      	bhi.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d039      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048e8:	e073      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048ea:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048f6:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e007      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	4a36      	ldr	r2, [pc, #216]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	0e1b      	lsrs	r3, r3, #24
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	fb03 f202 	mul.w	r2, r3, r2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
        break;
 800495a:	e03b      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e007      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004982:	4a1a      	ldr	r2, [pc, #104]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800498a:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	fb03 f202 	mul.w	r2, r3, r2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]
        break;
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80049d2:	bf00      	nop
      }
    }
  }

  return frequency;
 80049d4:	697b      	ldr	r3, [r7, #20]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	007a1200 	.word	0x007a1200
 80049f0:	00bb8000 	.word	0x00bb8000

080049f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e156      	b.n	8004cc0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fbae 	bl	8001188 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fa55 	bl	8004ee4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d00c      	beq.n	8004a5c <HAL_SAI_Init+0x68>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d80d      	bhi.n	8004a62 <HAL_SAI_Init+0x6e>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SAI_Init+0x5c>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d003      	beq.n	8004a56 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004a4e:	e008      	b.n	8004a62 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      break;
 8004a54:	e006      	b.n	8004a64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a56:	2310      	movs	r3, #16
 8004a58:	61fb      	str	r3, [r7, #28]
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	61fb      	str	r3, [r7, #28]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_SAI_Init+0x70>
      break;
 8004a62:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_SAI_Init+0xb6>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_SAI_Init+0x80>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004a8b 	.word	0x08004a8b
 8004a7c:	08004a93 	.word	0x08004a93
 8004a80:	08004a9b 	.word	0x08004a9b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a88:	e010      	b.n	8004aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a90:	e00c      	b.n	8004aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a96:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a98:	e008      	b.n	8004aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a9e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004aa8:	e000      	b.n	8004aac <HAL_SAI_Init+0xb8>
    default:
      break;
 8004aaa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a85      	ldr	r2, [pc, #532]	; (8004cc8 <HAL_SAI_Init+0x2d4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_SAI_Init+0xcc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a84      	ldr	r2, [pc, #528]	; (8004ccc <HAL_SAI_Init+0x2d8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004ac0:	4a83      	ldr	r2, [pc, #524]	; (8004cd0 <HAL_SAI_Init+0x2dc>)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e002      	b.n	8004ace <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004ac8:	4a82      	ldr	r2, [pc, #520]	; (8004cd4 <HAL_SAI_Init+0x2e0>)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04c      	beq.n	8004b70 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_SAI_Init+0x2d4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_SAI_Init+0xfa>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <HAL_SAI_Init+0x2d8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d104      	bne.n	8004af8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004aee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004af2:	f7ff fe3f 	bl	8004774 <HAL_RCCEx_GetPeriphCLKFreq>
 8004af6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a76      	ldr	r2, [pc, #472]	; (8004cd8 <HAL_SAI_Init+0x2e4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_SAI_Init+0x118>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	; (8004cdc <HAL_SAI_Init+0x2e8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d104      	bne.n	8004b16 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004b10:	f7ff fe30 	bl	8004774 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b14:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	025b      	lsls	r3, r3, #9
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a6b      	ldr	r2, [pc, #428]	; (8004ce0 <HAL_SAI_Init+0x2ec>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_SAI_Init+0x2ec>)
 8004b40:	fba3 2301 	umull	r2, r3, r3, r1
 8004b44:	08da      	lsrs	r2, r3, #3
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	1aca      	subs	r2, r1, r3
 8004b50:	2a08      	cmp	r2, #8
 8004b52:	d904      	bls.n	8004b5e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d104      	bne.n	8004b70 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_SAI_Init+0x18c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d109      	bne.n	8004b94 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_SAI_Init+0x198>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e001      	b.n	8004b90 <HAL_SAI_Init+0x19c>
 8004b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e008      	b.n	8004ba6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SAI_Init+0x1ae>
 8004b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba0:	e000      	b.n	8004ba4 <HAL_SAI_Init+0x1b0>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_SAI_Init+0x2f0>)
 8004bb2:	400b      	ands	r3, r1
 8004bb4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004bde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	051b      	lsls	r3, r3, #20
 8004bf2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <HAL_SAI_Init+0x2f4>)
 8004c08:	400b      	ands	r3, r1
 8004c0a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <HAL_SAI_Init+0x2f8>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004c4a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004c50:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c56:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004c60:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68d9      	ldr	r1, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004c78:	400b      	ands	r3, r1
 8004c7a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68d9      	ldr	r1, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40015804 	.word	0x40015804
 8004ccc:	40015824 	.word	0x40015824
 8004cd0:	40015800 	.word	0x40015800
 8004cd4:	40015c00 	.word	0x40015c00
 8004cd8:	40015c04 	.word	0x40015c04
 8004cdc:	40015c24 	.word	0x40015c24
 8004ce0:	cccccccd 	.word	0xcccccccd
 8004ce4:	ff05c010 	.word	0xff05c010
 8004ce8:	ffff1ff0 	.word	0xffff1ff0
 8004cec:	fff88000 	.word	0xfff88000

08004cf0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004cfe:	f7fc fbf5 	bl	80014ec <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SAI_Transmit_DMA+0x20>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e093      	b.n	8004e3c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f040 808c 	bne.w	8004e3a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_SAI_Transmit_DMA+0x40>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e085      	b.n	8004e3c <HAL_SAI_Transmit_DMA+0x14c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2212      	movs	r2, #18
 8004d5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d62:	4a38      	ldr	r2, [pc, #224]	; (8004e44 <HAL_SAI_Transmit_DMA+0x154>)
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <HAL_SAI_Transmit_DMA+0x158>)
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <HAL_SAI_Transmit_DMA+0x15c>)
 8004d74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d86:	4619      	mov	r1, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	331c      	adds	r3, #28
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d96:	f7fd f9bd 	bl	8002114 <HAL_DMA_Start_IT>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e047      	b.n	8004e3c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004dac:	2100      	movs	r1, #0
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f862 	bl	8004e78 <SAI_InterruptFlag>
 8004db4:	4601      	mov	r1, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004dd4:	e015      	b.n	8004e02 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004dd6:	f7fc fb89 	bl	80014ec <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de4:	d90d      	bls.n	8004e02 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e01c      	b.n	8004e3c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0e2      	beq.n	8004dd6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e2c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08004fb5 	.word	0x08004fb5
 8004e48:	08004f55 	.word	0x08004f55
 8004e4c:	08004fd1 	.word	0x08004fd1

08004e50 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d103      	bne.n	8004e94 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f043 0308 	orr.w	r3, r3, #8
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d003      	beq.n	8004eac <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d103      	bne.n	8004eb4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f043 0310 	orr.w	r3, r3, #16
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <SAI_InterruptFlag+0x4c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d104      	bne.n	8004ece <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e003      	b.n	8004ed6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <SAI_Disable+0x68>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <SAI_Disable+0x6c>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0b1b      	lsrs	r3, r3, #12
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1e5a      	subs	r2, r3, #1
 8004f14:	60fa      	str	r2, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	72fb      	strb	r3, [r7, #11]
      break;
 8004f2e:	e006      	b.n	8004f3e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e8      	bne.n	8004f10 <SAI_Disable+0x2c>

  return status;
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	20000000 	.word	0x20000000
 8004f50:	95cbec1b 	.word	0x95cbec1b

08004f54 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6a:	d01c      	beq.n	8004fa6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004f82:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f84:	2100      	movs	r1, #0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff ff76 	bl	8004e78 <SAI_InterruptFlag>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	43d9      	mvns	r1, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7fb fb26 	bl	80005f8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff ff44 	bl	8004e50 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d004      	beq.n	8005002 <SAI_DMAError+0x32>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d112      	bne.n	8005028 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005010:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ff66 	bl	8004ee4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff1b 	bl	8004e64 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e040      	b.n	80050ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fb ffbb 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2224      	movs	r2, #36	; 0x24
 8005062:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8af 	bl	80051d8 <UART_SetConfig>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e022      	b.n	80050ca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb07 	bl	80056a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fb8e 	bl	80057e4 <UART_CheckIdleState>
 80050c8:	4603      	mov	r3, r0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08a      	sub	sp, #40	; 0x28
 80050d6:	af02      	add	r7, sp, #8
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d171      	bne.n	80051ce <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit+0x24>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e06a      	b.n	80051d0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005108:	f7fc f9f0 	bl	80014ec <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d108      	bne.n	800513a <HAL_UART_Transmit+0x68>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	e003      	b.n	8005142 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005142:	e02c      	b.n	800519e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2200      	movs	r2, #0
 800514c:	2180      	movs	r1, #128	; 0x80
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fb7f 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e038      	b.n	80051d0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	3302      	adds	r3, #2
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e007      	b.n	800518c <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1cc      	bne.n	8005144 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fb4c 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e005      	b.n	80051d0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4ba6      	ldr	r3, [pc, #664]	; (800549c <UART_SetConfig+0x2c4>)
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6979      	ldr	r1, [r7, #20]
 800520c:	430b      	orrs	r3, r1
 800520e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a94      	ldr	r2, [pc, #592]	; (80054a0 <UART_SetConfig+0x2c8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d120      	bne.n	8005296 <UART_SetConfig+0xbe>
 8005254:	4b93      	ldr	r3, [pc, #588]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d816      	bhi.n	8005290 <UART_SetConfig+0xb8>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x90>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005279 	.word	0x08005279
 800526c:	08005285 	.word	0x08005285
 8005270:	0800527f 	.word	0x0800527f
 8005274:	0800528b 	.word	0x0800528b
 8005278:	2301      	movs	r3, #1
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e150      	b.n	8005520 <UART_SetConfig+0x348>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e14d      	b.n	8005520 <UART_SetConfig+0x348>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e14a      	b.n	8005520 <UART_SetConfig+0x348>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e147      	b.n	8005520 <UART_SetConfig+0x348>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e144      	b.n	8005520 <UART_SetConfig+0x348>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a83      	ldr	r2, [pc, #524]	; (80054a8 <UART_SetConfig+0x2d0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d132      	bne.n	8005306 <UART_SetConfig+0x12e>
 80052a0:	4b80      	ldr	r3, [pc, #512]	; (80054a4 <UART_SetConfig+0x2cc>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d828      	bhi.n	8005300 <UART_SetConfig+0x128>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0xdc>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005301 	.word	0x08005301
 80052bc:	08005301 	.word	0x08005301
 80052c0:	08005301 	.word	0x08005301
 80052c4:	080052f5 	.word	0x080052f5
 80052c8:	08005301 	.word	0x08005301
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005301 	.word	0x08005301
 80052d4:	080052ef 	.word	0x080052ef
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005301 	.word	0x08005301
 80052e4:	080052fb 	.word	0x080052fb
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e118      	b.n	8005520 <UART_SetConfig+0x348>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e115      	b.n	8005520 <UART_SetConfig+0x348>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e112      	b.n	8005520 <UART_SetConfig+0x348>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e10f      	b.n	8005520 <UART_SetConfig+0x348>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e10c      	b.n	8005520 <UART_SetConfig+0x348>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a68      	ldr	r2, [pc, #416]	; (80054ac <UART_SetConfig+0x2d4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d120      	bne.n	8005352 <UART_SetConfig+0x17a>
 8005310:	4b64      	ldr	r3, [pc, #400]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d013      	beq.n	8005346 <UART_SetConfig+0x16e>
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d814      	bhi.n	800534c <UART_SetConfig+0x174>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d009      	beq.n	800533a <UART_SetConfig+0x162>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d810      	bhi.n	800534c <UART_SetConfig+0x174>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <UART_SetConfig+0x15c>
 800532e:	2b10      	cmp	r3, #16
 8005330:	d006      	beq.n	8005340 <UART_SetConfig+0x168>
 8005332:	e00b      	b.n	800534c <UART_SetConfig+0x174>
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e0f2      	b.n	8005520 <UART_SetConfig+0x348>
 800533a:	2302      	movs	r3, #2
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e0ef      	b.n	8005520 <UART_SetConfig+0x348>
 8005340:	2304      	movs	r3, #4
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e0ec      	b.n	8005520 <UART_SetConfig+0x348>
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e0e9      	b.n	8005520 <UART_SetConfig+0x348>
 800534c:	2310      	movs	r3, #16
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e0e6      	b.n	8005520 <UART_SetConfig+0x348>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <UART_SetConfig+0x2d8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d120      	bne.n	800539e <UART_SetConfig+0x1c6>
 800535c:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <UART_SetConfig+0x2cc>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005366:	2bc0      	cmp	r3, #192	; 0xc0
 8005368:	d013      	beq.n	8005392 <UART_SetConfig+0x1ba>
 800536a:	2bc0      	cmp	r3, #192	; 0xc0
 800536c:	d814      	bhi.n	8005398 <UART_SetConfig+0x1c0>
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d009      	beq.n	8005386 <UART_SetConfig+0x1ae>
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d810      	bhi.n	8005398 <UART_SetConfig+0x1c0>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <UART_SetConfig+0x1a8>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d006      	beq.n	800538c <UART_SetConfig+0x1b4>
 800537e:	e00b      	b.n	8005398 <UART_SetConfig+0x1c0>
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e0cc      	b.n	8005520 <UART_SetConfig+0x348>
 8005386:	2302      	movs	r3, #2
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e0c9      	b.n	8005520 <UART_SetConfig+0x348>
 800538c:	2304      	movs	r3, #4
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e0c6      	b.n	8005520 <UART_SetConfig+0x348>
 8005392:	2308      	movs	r3, #8
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e0c3      	b.n	8005520 <UART_SetConfig+0x348>
 8005398:	2310      	movs	r3, #16
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e0c0      	b.n	8005520 <UART_SetConfig+0x348>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a44      	ldr	r2, [pc, #272]	; (80054b4 <UART_SetConfig+0x2dc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d125      	bne.n	80053f4 <UART_SetConfig+0x21c>
 80053a8:	4b3e      	ldr	r3, [pc, #248]	; (80054a4 <UART_SetConfig+0x2cc>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b6:	d017      	beq.n	80053e8 <UART_SetConfig+0x210>
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053bc:	d817      	bhi.n	80053ee <UART_SetConfig+0x216>
 80053be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c2:	d00b      	beq.n	80053dc <UART_SetConfig+0x204>
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c8:	d811      	bhi.n	80053ee <UART_SetConfig+0x216>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <UART_SetConfig+0x1fe>
 80053ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d2:	d006      	beq.n	80053e2 <UART_SetConfig+0x20a>
 80053d4:	e00b      	b.n	80053ee <UART_SetConfig+0x216>
 80053d6:	2300      	movs	r3, #0
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e0a1      	b.n	8005520 <UART_SetConfig+0x348>
 80053dc:	2302      	movs	r3, #2
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e09e      	b.n	8005520 <UART_SetConfig+0x348>
 80053e2:	2304      	movs	r3, #4
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e09b      	b.n	8005520 <UART_SetConfig+0x348>
 80053e8:	2308      	movs	r3, #8
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e098      	b.n	8005520 <UART_SetConfig+0x348>
 80053ee:	2310      	movs	r3, #16
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e095      	b.n	8005520 <UART_SetConfig+0x348>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <UART_SetConfig+0x2e0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d125      	bne.n	800544a <UART_SetConfig+0x272>
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540c:	d017      	beq.n	800543e <UART_SetConfig+0x266>
 800540e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005412:	d817      	bhi.n	8005444 <UART_SetConfig+0x26c>
 8005414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005418:	d00b      	beq.n	8005432 <UART_SetConfig+0x25a>
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d811      	bhi.n	8005444 <UART_SetConfig+0x26c>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <UART_SetConfig+0x254>
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d006      	beq.n	8005438 <UART_SetConfig+0x260>
 800542a:	e00b      	b.n	8005444 <UART_SetConfig+0x26c>
 800542c:	2301      	movs	r3, #1
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e076      	b.n	8005520 <UART_SetConfig+0x348>
 8005432:	2302      	movs	r3, #2
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e073      	b.n	8005520 <UART_SetConfig+0x348>
 8005438:	2304      	movs	r3, #4
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e070      	b.n	8005520 <UART_SetConfig+0x348>
 800543e:	2308      	movs	r3, #8
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e06d      	b.n	8005520 <UART_SetConfig+0x348>
 8005444:	2310      	movs	r3, #16
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e06a      	b.n	8005520 <UART_SetConfig+0x348>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <UART_SetConfig+0x2e4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d138      	bne.n	80054c6 <UART_SetConfig+0x2ee>
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800545e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005462:	d017      	beq.n	8005494 <UART_SetConfig+0x2bc>
 8005464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005468:	d82a      	bhi.n	80054c0 <UART_SetConfig+0x2e8>
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d00b      	beq.n	8005488 <UART_SetConfig+0x2b0>
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d824      	bhi.n	80054c0 <UART_SetConfig+0x2e8>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <UART_SetConfig+0x2aa>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	d006      	beq.n	800548e <UART_SetConfig+0x2b6>
 8005480:	e01e      	b.n	80054c0 <UART_SetConfig+0x2e8>
 8005482:	2300      	movs	r3, #0
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e04b      	b.n	8005520 <UART_SetConfig+0x348>
 8005488:	2302      	movs	r3, #2
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e048      	b.n	8005520 <UART_SetConfig+0x348>
 800548e:	2304      	movs	r3, #4
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e045      	b.n	8005520 <UART_SetConfig+0x348>
 8005494:	2308      	movs	r3, #8
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e042      	b.n	8005520 <UART_SetConfig+0x348>
 800549a:	bf00      	nop
 800549c:	efff69f3 	.word	0xefff69f3
 80054a0:	40011000 	.word	0x40011000
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40004800 	.word	0x40004800
 80054b0:	40004c00 	.word	0x40004c00
 80054b4:	40005000 	.word	0x40005000
 80054b8:	40011400 	.word	0x40011400
 80054bc:	40007800 	.word	0x40007800
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e02c      	b.n	8005520 <UART_SetConfig+0x348>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a72      	ldr	r2, [pc, #456]	; (8005694 <UART_SetConfig+0x4bc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d125      	bne.n	800551c <UART_SetConfig+0x344>
 80054d0:	4b71      	ldr	r3, [pc, #452]	; (8005698 <UART_SetConfig+0x4c0>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054de:	d017      	beq.n	8005510 <UART_SetConfig+0x338>
 80054e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054e4:	d817      	bhi.n	8005516 <UART_SetConfig+0x33e>
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d00b      	beq.n	8005504 <UART_SetConfig+0x32c>
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	d811      	bhi.n	8005516 <UART_SetConfig+0x33e>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <UART_SetConfig+0x326>
 80054f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fa:	d006      	beq.n	800550a <UART_SetConfig+0x332>
 80054fc:	e00b      	b.n	8005516 <UART_SetConfig+0x33e>
 80054fe:	2300      	movs	r3, #0
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e00d      	b.n	8005520 <UART_SetConfig+0x348>
 8005504:	2302      	movs	r3, #2
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e00a      	b.n	8005520 <UART_SetConfig+0x348>
 800550a:	2304      	movs	r3, #4
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e007      	b.n	8005520 <UART_SetConfig+0x348>
 8005510:	2308      	movs	r3, #8
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e004      	b.n	8005520 <UART_SetConfig+0x348>
 8005516:	2310      	movs	r3, #16
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e001      	b.n	8005520 <UART_SetConfig+0x348>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	d15b      	bne.n	80055e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800552a:	7ffb      	ldrb	r3, [r7, #31]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d828      	bhi.n	8005582 <UART_SetConfig+0x3aa>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x360>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005565 	.word	0x08005565
 8005540:	0800556d 	.word	0x0800556d
 8005544:	08005583 	.word	0x08005583
 8005548:	08005573 	.word	0x08005573
 800554c:	08005583 	.word	0x08005583
 8005550:	08005583 	.word	0x08005583
 8005554:	08005583 	.word	0x08005583
 8005558:	0800557b 	.word	0x0800557b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fe fcf2 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8005560:	61b8      	str	r0, [r7, #24]
        break;
 8005562:	e013      	b.n	800558c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7fe fd02 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8005568:	61b8      	str	r0, [r7, #24]
        break;
 800556a:	e00f      	b.n	800558c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800556c:	4b4b      	ldr	r3, [pc, #300]	; (800569c <UART_SetConfig+0x4c4>)
 800556e:	61bb      	str	r3, [r7, #24]
        break;
 8005570:	e00c      	b.n	800558c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005572:	f7fe fbd5 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8005576:	61b8      	str	r0, [r7, #24]
        break;
 8005578:	e008      	b.n	800558c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	61bb      	str	r3, [r7, #24]
        break;
 8005580:	e004      	b.n	800558c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	77bb      	strb	r3, [r7, #30]
        break;
 800558a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d074      	beq.n	800567c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	005a      	lsls	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	441a      	add	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d916      	bls.n	80055dc <UART_SetConfig+0x404>
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d212      	bcs.n	80055dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	89fa      	ldrh	r2, [r7, #14]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e04f      	b.n	800567c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	77bb      	strb	r3, [r7, #30]
 80055e0:	e04c      	b.n	800567c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d828      	bhi.n	800563a <UART_SetConfig+0x462>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x418>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	0800563b 	.word	0x0800563b
 8005600:	0800562b 	.word	0x0800562b
 8005604:	0800563b 	.word	0x0800563b
 8005608:	0800563b 	.word	0x0800563b
 800560c:	0800563b 	.word	0x0800563b
 8005610:	08005633 	.word	0x08005633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fc96 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8005618:	61b8      	str	r0, [r7, #24]
        break;
 800561a:	e013      	b.n	8005644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fe fca6 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8005620:	61b8      	str	r0, [r7, #24]
        break;
 8005622:	e00f      	b.n	8005644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <UART_SetConfig+0x4c4>)
 8005626:	61bb      	str	r3, [r7, #24]
        break;
 8005628:	e00c      	b.n	8005644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7fe fb79 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 800562e:	61b8      	str	r0, [r7, #24]
        break;
 8005630:	e008      	b.n	8005644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	61bb      	str	r3, [r7, #24]
        break;
 8005638:	e004      	b.n	8005644 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	77bb      	strb	r3, [r7, #30]
        break;
 8005642:	bf00      	nop
    }

    if (pclk != 0U)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	085a      	lsrs	r2, r3, #1
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b0f      	cmp	r3, #15
 8005662:	d909      	bls.n	8005678 <UART_SetConfig+0x4a0>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566a:	d205      	bcs.n	8005678 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	e001      	b.n	800567c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005688:	7fbb      	ldrb	r3, [r7, #30]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40007c00 	.word	0x40007c00
 8005698:	40023800 	.word	0x40023800
 800569c:	00f42400 	.word	0x00f42400

080056a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579e:	d10a      	bne.n	80057b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  }
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f4:	f7fb fe7a 	bl	80014ec <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d10e      	bne.n	8005826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f81b 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e011      	b.n	800584a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b09c      	sub	sp, #112	; 0x70
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005862:	e0a7      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	f000 80a3 	beq.w	80059b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586e:	f7fb fe3d 	bl	80014ec <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <UART_WaitOnFlagUntilTimeout+0x32>
 800587e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005880:	2b00      	cmp	r3, #0
 8005882:	d13f      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005898:	667b      	str	r3, [r7, #100]	; 0x64
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e6      	bne.n	8005884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	663b      	str	r3, [r7, #96]	; 0x60
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80058d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e068      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d050      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d148      	bne.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
 800594c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e6      	bne.n	800592c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	66bb      	str	r3, [r7, #104]	; 0x68
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800597e:	623a      	str	r2, [r7, #32]
 8005980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	69f9      	ldr	r1, [r7, #28]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	61bb      	str	r3, [r7, #24]
   return(result);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e010      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	f43f af48 	beq.w	8005864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3770      	adds	r7, #112	; 0x70
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 001c 	add.w	r0, r7, #28
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d120      	bne.n	8005a3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <USB_CoreInit+0xac>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d105      	bne.n	8005a2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa96 	bl	8005f60 <USB_CoreReset>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e010      	b.n	8005a5c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa8a 	bl	8005f60 <USB_CoreReset>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10b      	bne.n	8005a7a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f043 0206 	orr.w	r2, r3, #6
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a86:	b004      	add	sp, #16
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	ffbdffbf 	.word	0xffbdffbf

08005a90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 0201 	bic.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d115      	bne.n	8005b00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7fb fd0f 	bl	8001504 <HAL_Delay>
      ms++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa29 	bl	8005f44 <USB_GetMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d01e      	beq.n	8005b36 <USB_SetCurrentMode+0x84>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b31      	cmp	r3, #49	; 0x31
 8005afc:	d9f0      	bls.n	8005ae0 <USB_SetCurrentMode+0x2e>
 8005afe:	e01a      	b.n	8005b36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fb fcf6 	bl	8001504 <HAL_Delay>
      ms++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa10 	bl	8005f44 <USB_GetMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <USB_SetCurrentMode+0x84>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b31      	cmp	r3, #49	; 0x31
 8005b2e:	d9f0      	bls.n	8005b12 <USB_SetCurrentMode+0x60>
 8005b30:	e001      	b.n	8005b36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e005      	b.n	8005b42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b32      	cmp	r3, #50	; 0x32
 8005b3a:	d101      	bne.n	8005b40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	e009      	b.n	8005b80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3340      	adds	r3, #64	; 0x40
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0e      	cmp	r3, #14
 8005b84:	d9f2      	bls.n	8005b6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11c      	bne.n	8005bc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e005      	b.n	8005bd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	4619      	mov	r1, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	461a      	mov	r2, r3
 8005bee:	680b      	ldr	r3, [r1, #0]
 8005bf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d10c      	bne.n	8005c12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f965 	bl	8005ed0 <USB_SetDevSpeed>
 8005c06:	e008      	b.n	8005c1a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c08:	2101      	movs	r1, #1
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f960 	bl	8005ed0 <USB_SetDevSpeed>
 8005c10:	e003      	b.n	8005c1a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c12:	2103      	movs	r1, #3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f95b 	bl	8005ed0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8f3 	bl	8005e08 <USB_FlushTxFifo>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f91f 	bl	8005e70 <USB_FlushRxFifo>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e043      	b.n	8005cee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7c:	d118      	bne.n	8005cb0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e013      	b.n	8005cc2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e008      	b.n	8005cc2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ce6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3301      	adds	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3b7      	bcc.n	8005c66 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e043      	b.n	8005d84 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d12:	d118      	bne.n	8005d46 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	461a      	mov	r2, r3
 8005d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e013      	b.n	8005d58 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e008      	b.n	8005d58 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	461a      	mov	r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	461a      	mov	r2, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3b7      	bcc.n	8005cfc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005dac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f043 0210 	orr.w	r2, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <USB_DevInit+0x2b4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d105      	bne.n	8005df0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <USB_DevInit+0x2b8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfc:	b004      	add	sp, #16
 8005dfe:	4770      	bx	lr
 8005e00:	803c3800 	.word	0x803c3800
 8005e04:	40000004 	.word	0x40000004

08005e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <USB_FlushTxFifo+0x64>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e01b      	b.n	8005e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	daf2      	bge.n	8005e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	019b      	lsls	r3, r3, #6
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <USB_FlushTxFifo+0x64>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e006      	b.n	8005e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d0f0      	beq.n	8005e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	00030d40 	.word	0x00030d40

08005e70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <USB_FlushRxFifo+0x5c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e018      	b.n	8005ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	daf2      	bge.n	8005e7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <USB_FlushRxFifo+0x5c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e006      	b.n	8005ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b10      	cmp	r3, #16
 8005ebc:	d0f0      	beq.n	8005ea0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	00030d40 	.word	0x00030d40

08005ed0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f003 0301 	and.w	r3, r3, #1
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <USB_CoreReset+0x64>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e01b      	b.n	8005fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	daf2      	bge.n	8005f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f043 0201 	orr.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <USB_CoreReset+0x64>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d0f0      	beq.n	8005f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	00030d40 	.word	0x00030d40

08005fc8 <siprintf>:
 8005fc8:	b40e      	push	{r1, r2, r3}
 8005fca:	b500      	push	{lr}
 8005fcc:	b09c      	sub	sp, #112	; 0x70
 8005fce:	ab1d      	add	r3, sp, #116	; 0x74
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	9006      	str	r0, [sp, #24]
 8005fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fd8:	4809      	ldr	r0, [pc, #36]	; (8006000 <siprintf+0x38>)
 8005fda:	9107      	str	r1, [sp, #28]
 8005fdc:	9104      	str	r1, [sp, #16]
 8005fde:	4909      	ldr	r1, [pc, #36]	; (8006004 <siprintf+0x3c>)
 8005fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe4:	9105      	str	r1, [sp, #20]
 8005fe6:	6800      	ldr	r0, [r0, #0]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	a902      	add	r1, sp, #8
 8005fec:	f000 f992 	bl	8006314 <_svfiprintf_r>
 8005ff0:	9b02      	ldr	r3, [sp, #8]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	b01c      	add	sp, #112	; 0x70
 8005ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ffc:	b003      	add	sp, #12
 8005ffe:	4770      	bx	lr
 8006000:	20000058 	.word	0x20000058
 8006004:	ffff0208 	.word	0xffff0208

08006008 <memset>:
 8006008:	4402      	add	r2, r0
 800600a:	4603      	mov	r3, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <__errno>:
 8006018:	4b01      	ldr	r3, [pc, #4]	; (8006020 <__errno+0x8>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000058 	.word	0x20000058

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4d0d      	ldr	r5, [pc, #52]	; (800605c <__libc_init_array+0x38>)
 8006028:	4c0d      	ldr	r4, [pc, #52]	; (8006060 <__libc_init_array+0x3c>)
 800602a:	1b64      	subs	r4, r4, r5
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	2600      	movs	r6, #0
 8006030:	42a6      	cmp	r6, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	4d0b      	ldr	r5, [pc, #44]	; (8006064 <__libc_init_array+0x40>)
 8006036:	4c0c      	ldr	r4, [pc, #48]	; (8006068 <__libc_init_array+0x44>)
 8006038:	f000 fc6a 	bl	8006910 <_init>
 800603c:	1b64      	subs	r4, r4, r5
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	2600      	movs	r6, #0
 8006042:	42a6      	cmp	r6, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	f855 3b04 	ldr.w	r3, [r5], #4
 800604c:	4798      	blx	r3
 800604e:	3601      	adds	r6, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	f855 3b04 	ldr.w	r3, [r5], #4
 8006056:	4798      	blx	r3
 8006058:	3601      	adds	r6, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	080069cc 	.word	0x080069cc
 8006060:	080069cc 	.word	0x080069cc
 8006064:	080069cc 	.word	0x080069cc
 8006068:	080069d0 	.word	0x080069d0

0800606c <__retarget_lock_acquire_recursive>:
 800606c:	4770      	bx	lr

0800606e <__retarget_lock_release_recursive>:
 800606e:	4770      	bx	lr

08006070 <_free_r>:
 8006070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	d044      	beq.n	8006100 <_free_r+0x90>
 8006076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f1a1 0404 	sub.w	r4, r1, #4
 8006082:	bfb8      	it	lt
 8006084:	18e4      	addlt	r4, r4, r3
 8006086:	f000 f8df 	bl	8006248 <__malloc_lock>
 800608a:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <_free_r+0x94>)
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x30>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	b003      	add	sp, #12
 8006098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800609c:	f000 b8da 	b.w	8006254 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x46>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1961      	adds	r1, r4, r5
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x22>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x50>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x46>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1855      	adds	r5, r2, r1
 80060c4:	42a5      	cmp	r5, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x70>
 80060c8:	6824      	ldr	r4, [r4, #0]
 80060ca:	4421      	add	r1, r4
 80060cc:	1854      	adds	r4, r2, r1
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x26>
 80060d4:	681c      	ldr	r4, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	440c      	add	r4, r1
 80060dc:	6014      	str	r4, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x26>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x78>
 80060e2:	230c      	movs	r3, #12
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x26>
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1949      	addeq	r1, r1, r5
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x26>
 8006100:	b003      	add	sp, #12
 8006102:	bd30      	pop	{r4, r5, pc}
 8006104:	20000960 	.word	0x20000960

08006108 <sbrk_aligned>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4e0e      	ldr	r6, [pc, #56]	; (8006144 <sbrk_aligned+0x3c>)
 800610c:	460c      	mov	r4, r1
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	4605      	mov	r5, r0
 8006112:	b911      	cbnz	r1, 800611a <sbrk_aligned+0x12>
 8006114:	f000 fba6 	bl	8006864 <_sbrk_r>
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 fba1 	bl	8006864 <_sbrk_r>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d00a      	beq.n	800613c <sbrk_aligned+0x34>
 8006126:	1cc4      	adds	r4, r0, #3
 8006128:	f024 0403 	bic.w	r4, r4, #3
 800612c:	42a0      	cmp	r0, r4
 800612e:	d007      	beq.n	8006140 <sbrk_aligned+0x38>
 8006130:	1a21      	subs	r1, r4, r0
 8006132:	4628      	mov	r0, r5
 8006134:	f000 fb96 	bl	8006864 <_sbrk_r>
 8006138:	3001      	adds	r0, #1
 800613a:	d101      	bne.n	8006140 <sbrk_aligned+0x38>
 800613c:	f04f 34ff 	mov.w	r4, #4294967295
 8006140:	4620      	mov	r0, r4
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	20000964 	.word	0x20000964

08006148 <_malloc_r>:
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614c:	1ccd      	adds	r5, r1, #3
 800614e:	f025 0503 	bic.w	r5, r5, #3
 8006152:	3508      	adds	r5, #8
 8006154:	2d0c      	cmp	r5, #12
 8006156:	bf38      	it	cc
 8006158:	250c      	movcc	r5, #12
 800615a:	2d00      	cmp	r5, #0
 800615c:	4607      	mov	r7, r0
 800615e:	db01      	blt.n	8006164 <_malloc_r+0x1c>
 8006160:	42a9      	cmp	r1, r5
 8006162:	d905      	bls.n	8006170 <_malloc_r+0x28>
 8006164:	230c      	movs	r3, #12
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	2600      	movs	r6, #0
 800616a:	4630      	mov	r0, r6
 800616c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006244 <_malloc_r+0xfc>
 8006174:	f000 f868 	bl	8006248 <__malloc_lock>
 8006178:	f8d8 3000 	ldr.w	r3, [r8]
 800617c:	461c      	mov	r4, r3
 800617e:	bb5c      	cbnz	r4, 80061d8 <_malloc_r+0x90>
 8006180:	4629      	mov	r1, r5
 8006182:	4638      	mov	r0, r7
 8006184:	f7ff ffc0 	bl	8006108 <sbrk_aligned>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	4604      	mov	r4, r0
 800618c:	d155      	bne.n	800623a <_malloc_r+0xf2>
 800618e:	f8d8 4000 	ldr.w	r4, [r8]
 8006192:	4626      	mov	r6, r4
 8006194:	2e00      	cmp	r6, #0
 8006196:	d145      	bne.n	8006224 <_malloc_r+0xdc>
 8006198:	2c00      	cmp	r4, #0
 800619a:	d048      	beq.n	800622e <_malloc_r+0xe6>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	4631      	mov	r1, r6
 80061a0:	4638      	mov	r0, r7
 80061a2:	eb04 0903 	add.w	r9, r4, r3
 80061a6:	f000 fb5d 	bl	8006864 <_sbrk_r>
 80061aa:	4581      	cmp	r9, r0
 80061ac:	d13f      	bne.n	800622e <_malloc_r+0xe6>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	1a6d      	subs	r5, r5, r1
 80061b2:	4629      	mov	r1, r5
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ffa7 	bl	8006108 <sbrk_aligned>
 80061ba:	3001      	adds	r0, #1
 80061bc:	d037      	beq.n	800622e <_malloc_r+0xe6>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	442b      	add	r3, r5
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	f8d8 3000 	ldr.w	r3, [r8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d038      	beq.n	800623e <_malloc_r+0xf6>
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	42a2      	cmp	r2, r4
 80061d0:	d12b      	bne.n	800622a <_malloc_r+0xe2>
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	e00f      	b.n	80061f8 <_malloc_r+0xb0>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	1b52      	subs	r2, r2, r5
 80061dc:	d41f      	bmi.n	800621e <_malloc_r+0xd6>
 80061de:	2a0b      	cmp	r2, #11
 80061e0:	d917      	bls.n	8006212 <_malloc_r+0xca>
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	6025      	str	r5, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	6059      	strne	r1, [r3, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	bf08      	it	eq
 80061f0:	f8c8 1000 	streq.w	r1, [r8]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4638      	mov	r0, r7
 80061fa:	f104 060b 	add.w	r6, r4, #11
 80061fe:	f000 f829 	bl	8006254 <__malloc_unlock>
 8006202:	f026 0607 	bic.w	r6, r6, #7
 8006206:	1d23      	adds	r3, r4, #4
 8006208:	1af2      	subs	r2, r6, r3
 800620a:	d0ae      	beq.n	800616a <_malloc_r+0x22>
 800620c:	1b9b      	subs	r3, r3, r6
 800620e:	50a3      	str	r3, [r4, r2]
 8006210:	e7ab      	b.n	800616a <_malloc_r+0x22>
 8006212:	42a3      	cmp	r3, r4
 8006214:	6862      	ldr	r2, [r4, #4]
 8006216:	d1dd      	bne.n	80061d4 <_malloc_r+0x8c>
 8006218:	f8c8 2000 	str.w	r2, [r8]
 800621c:	e7ec      	b.n	80061f8 <_malloc_r+0xb0>
 800621e:	4623      	mov	r3, r4
 8006220:	6864      	ldr	r4, [r4, #4]
 8006222:	e7ac      	b.n	800617e <_malloc_r+0x36>
 8006224:	4634      	mov	r4, r6
 8006226:	6876      	ldr	r6, [r6, #4]
 8006228:	e7b4      	b.n	8006194 <_malloc_r+0x4c>
 800622a:	4613      	mov	r3, r2
 800622c:	e7cc      	b.n	80061c8 <_malloc_r+0x80>
 800622e:	230c      	movs	r3, #12
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4638      	mov	r0, r7
 8006234:	f000 f80e 	bl	8006254 <__malloc_unlock>
 8006238:	e797      	b.n	800616a <_malloc_r+0x22>
 800623a:	6025      	str	r5, [r4, #0]
 800623c:	e7dc      	b.n	80061f8 <_malloc_r+0xb0>
 800623e:	605b      	str	r3, [r3, #4]
 8006240:	deff      	udf	#255	; 0xff
 8006242:	bf00      	nop
 8006244:	20000960 	.word	0x20000960

08006248 <__malloc_lock>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__malloc_lock+0x8>)
 800624a:	f7ff bf0f 	b.w	800606c <__retarget_lock_acquire_recursive>
 800624e:	bf00      	nop
 8006250:	2000095c 	.word	0x2000095c

08006254 <__malloc_unlock>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__malloc_unlock+0x8>)
 8006256:	f7ff bf0a 	b.w	800606e <__retarget_lock_release_recursive>
 800625a:	bf00      	nop
 800625c:	2000095c 	.word	0x2000095c

08006260 <__ssputs_r>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	688e      	ldr	r6, [r1, #8]
 8006266:	461f      	mov	r7, r3
 8006268:	42be      	cmp	r6, r7
 800626a:	680b      	ldr	r3, [r1, #0]
 800626c:	4682      	mov	sl, r0
 800626e:	460c      	mov	r4, r1
 8006270:	4690      	mov	r8, r2
 8006272:	d82c      	bhi.n	80062ce <__ssputs_r+0x6e>
 8006274:	898a      	ldrh	r2, [r1, #12]
 8006276:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800627a:	d026      	beq.n	80062ca <__ssputs_r+0x6a>
 800627c:	6965      	ldr	r5, [r4, #20]
 800627e:	6909      	ldr	r1, [r1, #16]
 8006280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006284:	eba3 0901 	sub.w	r9, r3, r1
 8006288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800628c:	1c7b      	adds	r3, r7, #1
 800628e:	444b      	add	r3, r9
 8006290:	106d      	asrs	r5, r5, #1
 8006292:	429d      	cmp	r5, r3
 8006294:	bf38      	it	cc
 8006296:	461d      	movcc	r5, r3
 8006298:	0553      	lsls	r3, r2, #21
 800629a:	d527      	bpl.n	80062ec <__ssputs_r+0x8c>
 800629c:	4629      	mov	r1, r5
 800629e:	f7ff ff53 	bl	8006148 <_malloc_r>
 80062a2:	4606      	mov	r6, r0
 80062a4:	b360      	cbz	r0, 8006300 <__ssputs_r+0xa0>
 80062a6:	6921      	ldr	r1, [r4, #16]
 80062a8:	464a      	mov	r2, r9
 80062aa:	f000 faeb 	bl	8006884 <memcpy>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	6126      	str	r6, [r4, #16]
 80062bc:	6165      	str	r5, [r4, #20]
 80062be:	444e      	add	r6, r9
 80062c0:	eba5 0509 	sub.w	r5, r5, r9
 80062c4:	6026      	str	r6, [r4, #0]
 80062c6:	60a5      	str	r5, [r4, #8]
 80062c8:	463e      	mov	r6, r7
 80062ca:	42be      	cmp	r6, r7
 80062cc:	d900      	bls.n	80062d0 <__ssputs_r+0x70>
 80062ce:	463e      	mov	r6, r7
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	4632      	mov	r2, r6
 80062d4:	4641      	mov	r1, r8
 80062d6:	f000 faab 	bl	8006830 <memmove>
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	1b9b      	subs	r3, r3, r6
 80062de:	60a3      	str	r3, [r4, #8]
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	4433      	add	r3, r6
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	2000      	movs	r0, #0
 80062e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ec:	462a      	mov	r2, r5
 80062ee:	f000 fad7 	bl	80068a0 <_realloc_r>
 80062f2:	4606      	mov	r6, r0
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1e0      	bne.n	80062ba <__ssputs_r+0x5a>
 80062f8:	6921      	ldr	r1, [r4, #16]
 80062fa:	4650      	mov	r0, sl
 80062fc:	f7ff feb8 	bl	8006070 <_free_r>
 8006300:	230c      	movs	r3, #12
 8006302:	f8ca 3000 	str.w	r3, [sl]
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630c:	81a3      	strh	r3, [r4, #12]
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	e7e9      	b.n	80062e8 <__ssputs_r+0x88>

08006314 <_svfiprintf_r>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	4698      	mov	r8, r3
 800631a:	898b      	ldrh	r3, [r1, #12]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	b09d      	sub	sp, #116	; 0x74
 8006320:	4607      	mov	r7, r0
 8006322:	460d      	mov	r5, r1
 8006324:	4614      	mov	r4, r2
 8006326:	d50e      	bpl.n	8006346 <_svfiprintf_r+0x32>
 8006328:	690b      	ldr	r3, [r1, #16]
 800632a:	b963      	cbnz	r3, 8006346 <_svfiprintf_r+0x32>
 800632c:	2140      	movs	r1, #64	; 0x40
 800632e:	f7ff ff0b 	bl	8006148 <_malloc_r>
 8006332:	6028      	str	r0, [r5, #0]
 8006334:	6128      	str	r0, [r5, #16]
 8006336:	b920      	cbnz	r0, 8006342 <_svfiprintf_r+0x2e>
 8006338:	230c      	movs	r3, #12
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e0d0      	b.n	80064e4 <_svfiprintf_r+0x1d0>
 8006342:	2340      	movs	r3, #64	; 0x40
 8006344:	616b      	str	r3, [r5, #20]
 8006346:	2300      	movs	r3, #0
 8006348:	9309      	str	r3, [sp, #36]	; 0x24
 800634a:	2320      	movs	r3, #32
 800634c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006350:	f8cd 800c 	str.w	r8, [sp, #12]
 8006354:	2330      	movs	r3, #48	; 0x30
 8006356:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064fc <_svfiprintf_r+0x1e8>
 800635a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800635e:	f04f 0901 	mov.w	r9, #1
 8006362:	4623      	mov	r3, r4
 8006364:	469a      	mov	sl, r3
 8006366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800636a:	b10a      	cbz	r2, 8006370 <_svfiprintf_r+0x5c>
 800636c:	2a25      	cmp	r2, #37	; 0x25
 800636e:	d1f9      	bne.n	8006364 <_svfiprintf_r+0x50>
 8006370:	ebba 0b04 	subs.w	fp, sl, r4
 8006374:	d00b      	beq.n	800638e <_svfiprintf_r+0x7a>
 8006376:	465b      	mov	r3, fp
 8006378:	4622      	mov	r2, r4
 800637a:	4629      	mov	r1, r5
 800637c:	4638      	mov	r0, r7
 800637e:	f7ff ff6f 	bl	8006260 <__ssputs_r>
 8006382:	3001      	adds	r0, #1
 8006384:	f000 80a9 	beq.w	80064da <_svfiprintf_r+0x1c6>
 8006388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638a:	445a      	add	r2, fp
 800638c:	9209      	str	r2, [sp, #36]	; 0x24
 800638e:	f89a 3000 	ldrb.w	r3, [sl]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80a1 	beq.w	80064da <_svfiprintf_r+0x1c6>
 8006398:	2300      	movs	r3, #0
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a2:	f10a 0a01 	add.w	sl, sl, #1
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ae:	931a      	str	r3, [sp, #104]	; 0x68
 80063b0:	4654      	mov	r4, sl
 80063b2:	2205      	movs	r2, #5
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	4850      	ldr	r0, [pc, #320]	; (80064fc <_svfiprintf_r+0x1e8>)
 80063ba:	f7f9 ff31 	bl	8000220 <memchr>
 80063be:	9a04      	ldr	r2, [sp, #16]
 80063c0:	b9d8      	cbnz	r0, 80063fa <_svfiprintf_r+0xe6>
 80063c2:	06d0      	lsls	r0, r2, #27
 80063c4:	bf44      	itt	mi
 80063c6:	2320      	movmi	r3, #32
 80063c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063cc:	0711      	lsls	r1, r2, #28
 80063ce:	bf44      	itt	mi
 80063d0:	232b      	movmi	r3, #43	; 0x2b
 80063d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d6:	f89a 3000 	ldrb.w	r3, [sl]
 80063da:	2b2a      	cmp	r3, #42	; 0x2a
 80063dc:	d015      	beq.n	800640a <_svfiprintf_r+0xf6>
 80063de:	9a07      	ldr	r2, [sp, #28]
 80063e0:	4654      	mov	r4, sl
 80063e2:	2000      	movs	r0, #0
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	4621      	mov	r1, r4
 80063ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ee:	3b30      	subs	r3, #48	; 0x30
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d94d      	bls.n	8006490 <_svfiprintf_r+0x17c>
 80063f4:	b1b0      	cbz	r0, 8006424 <_svfiprintf_r+0x110>
 80063f6:	9207      	str	r2, [sp, #28]
 80063f8:	e014      	b.n	8006424 <_svfiprintf_r+0x110>
 80063fa:	eba0 0308 	sub.w	r3, r0, r8
 80063fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006402:	4313      	orrs	r3, r2
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	46a2      	mov	sl, r4
 8006408:	e7d2      	b.n	80063b0 <_svfiprintf_r+0x9c>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1d19      	adds	r1, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9103      	str	r1, [sp, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfbb      	ittet	lt
 8006416:	425b      	neglt	r3, r3
 8006418:	f042 0202 	orrlt.w	r2, r2, #2
 800641c:	9307      	strge	r3, [sp, #28]
 800641e:	9307      	strlt	r3, [sp, #28]
 8006420:	bfb8      	it	lt
 8006422:	9204      	strlt	r2, [sp, #16]
 8006424:	7823      	ldrb	r3, [r4, #0]
 8006426:	2b2e      	cmp	r3, #46	; 0x2e
 8006428:	d10c      	bne.n	8006444 <_svfiprintf_r+0x130>
 800642a:	7863      	ldrb	r3, [r4, #1]
 800642c:	2b2a      	cmp	r3, #42	; 0x2a
 800642e:	d134      	bne.n	800649a <_svfiprintf_r+0x186>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	9203      	str	r2, [sp, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	bfb8      	it	lt
 800643c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006440:	3402      	adds	r4, #2
 8006442:	9305      	str	r3, [sp, #20]
 8006444:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800650c <_svfiprintf_r+0x1f8>
 8006448:	7821      	ldrb	r1, [r4, #0]
 800644a:	2203      	movs	r2, #3
 800644c:	4650      	mov	r0, sl
 800644e:	f7f9 fee7 	bl	8000220 <memchr>
 8006452:	b138      	cbz	r0, 8006464 <_svfiprintf_r+0x150>
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	eba0 000a 	sub.w	r0, r0, sl
 800645a:	2240      	movs	r2, #64	; 0x40
 800645c:	4082      	lsls	r2, r0
 800645e:	4313      	orrs	r3, r2
 8006460:	3401      	adds	r4, #1
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	4825      	ldr	r0, [pc, #148]	; (8006500 <_svfiprintf_r+0x1ec>)
 800646a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800646e:	2206      	movs	r2, #6
 8006470:	f7f9 fed6 	bl	8000220 <memchr>
 8006474:	2800      	cmp	r0, #0
 8006476:	d038      	beq.n	80064ea <_svfiprintf_r+0x1d6>
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <_svfiprintf_r+0x1f0>)
 800647a:	bb1b      	cbnz	r3, 80064c4 <_svfiprintf_r+0x1b0>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	3307      	adds	r3, #7
 8006480:	f023 0307 	bic.w	r3, r3, #7
 8006484:	3308      	adds	r3, #8
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	4433      	add	r3, r6
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	e768      	b.n	8006362 <_svfiprintf_r+0x4e>
 8006490:	fb0c 3202 	mla	r2, ip, r2, r3
 8006494:	460c      	mov	r4, r1
 8006496:	2001      	movs	r0, #1
 8006498:	e7a6      	b.n	80063e8 <_svfiprintf_r+0xd4>
 800649a:	2300      	movs	r3, #0
 800649c:	3401      	adds	r4, #1
 800649e:	9305      	str	r3, [sp, #20]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f04f 0c0a 	mov.w	ip, #10
 80064a6:	4620      	mov	r0, r4
 80064a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ac:	3a30      	subs	r2, #48	; 0x30
 80064ae:	2a09      	cmp	r2, #9
 80064b0:	d903      	bls.n	80064ba <_svfiprintf_r+0x1a6>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c6      	beq.n	8006444 <_svfiprintf_r+0x130>
 80064b6:	9105      	str	r1, [sp, #20]
 80064b8:	e7c4      	b.n	8006444 <_svfiprintf_r+0x130>
 80064ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80064be:	4604      	mov	r4, r0
 80064c0:	2301      	movs	r3, #1
 80064c2:	e7f0      	b.n	80064a6 <_svfiprintf_r+0x192>
 80064c4:	ab03      	add	r3, sp, #12
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	462a      	mov	r2, r5
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <_svfiprintf_r+0x1f4>)
 80064cc:	a904      	add	r1, sp, #16
 80064ce:	4638      	mov	r0, r7
 80064d0:	f3af 8000 	nop.w
 80064d4:	1c42      	adds	r2, r0, #1
 80064d6:	4606      	mov	r6, r0
 80064d8:	d1d6      	bne.n	8006488 <_svfiprintf_r+0x174>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	065b      	lsls	r3, r3, #25
 80064de:	f53f af2d 	bmi.w	800633c <_svfiprintf_r+0x28>
 80064e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064e4:	b01d      	add	sp, #116	; 0x74
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	462a      	mov	r2, r5
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <_svfiprintf_r+0x1f4>)
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	4638      	mov	r0, r7
 80064f6:	f000 f879 	bl	80065ec <_printf_i>
 80064fa:	e7eb      	b.n	80064d4 <_svfiprintf_r+0x1c0>
 80064fc:	08006990 	.word	0x08006990
 8006500:	0800699a 	.word	0x0800699a
 8006504:	00000000 	.word	0x00000000
 8006508:	08006261 	.word	0x08006261
 800650c:	08006996 	.word	0x08006996

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf02      	ittt	eq
 8006582:	68e5      	ldreq	r5, [r4, #12]
 8006584:	6833      	ldreq	r3, [r6, #0]
 8006586:	1aed      	subeq	r5, r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f4:	2f78      	cmp	r7, #120	; 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d4 	beq.w	80067b6 <_printf_i+0x1ca>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80c0 	beq.w	8006794 <_printf_i+0x1a8>
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	0800679d 	.word	0x0800679d
 800665c:	080066c5 	.word	0x080066c5
 8006660:	08006757 	.word	0x08006757
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067bf 	.word	0x080067bf
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c5 	.word	0x080066c5
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800675f 	.word	0x0800675f
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	602a      	str	r2, [r5, #0]
 800668c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e09f      	b.n	80067d8 <_printf_i+0x1ec>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	0607      	lsls	r7, r0, #24
 800669e:	f103 0104 	add.w	r1, r3, #4
 80066a2:	6029      	str	r1, [r5, #0]
 80066a4:	d501      	bpl.n	80066aa <_printf_i+0xbe>
 80066a6:	681e      	ldr	r6, [r3, #0]
 80066a8:	e003      	b.n	80066b2 <_printf_i+0xc6>
 80066aa:	0646      	lsls	r6, r0, #25
 80066ac:	d5fb      	bpl.n	80066a6 <_printf_i+0xba>
 80066ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	da03      	bge.n	80066be <_printf_i+0xd2>
 80066b6:	232d      	movs	r3, #45	; 0x2d
 80066b8:	4276      	negs	r6, r6
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	485a      	ldr	r0, [pc, #360]	; (8006828 <_printf_i+0x23c>)
 80066c0:	230a      	movs	r3, #10
 80066c2:	e012      	b.n	80066ea <_printf_i+0xfe>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	6029      	str	r1, [r5, #0]
 80066cc:	0605      	lsls	r5, r0, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0xe8>
 80066d0:	681e      	ldr	r6, [r3, #0]
 80066d2:	e002      	b.n	80066da <_printf_i+0xee>
 80066d4:	0641      	lsls	r1, r0, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0xe4>
 80066d8:	881e      	ldrh	r6, [r3, #0]
 80066da:	4853      	ldr	r0, [pc, #332]	; (8006828 <_printf_i+0x23c>)
 80066dc:	2f6f      	cmp	r7, #111	; 0x6f
 80066de:	bf0c      	ite	eq
 80066e0:	2308      	moveq	r3, #8
 80066e2:	230a      	movne	r3, #10
 80066e4:	2100      	movs	r1, #0
 80066e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ea:	6865      	ldr	r5, [r4, #4]
 80066ec:	60a5      	str	r5, [r4, #8]
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	bfa2      	ittt	ge
 80066f2:	6821      	ldrge	r1, [r4, #0]
 80066f4:	f021 0104 	bicge.w	r1, r1, #4
 80066f8:	6021      	strge	r1, [r4, #0]
 80066fa:	b90e      	cbnz	r6, 8006700 <_printf_i+0x114>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d04b      	beq.n	8006798 <_printf_i+0x1ac>
 8006700:	4615      	mov	r5, r2
 8006702:	fbb6 f1f3 	udiv	r1, r6, r3
 8006706:	fb03 6711 	mls	r7, r3, r1, r6
 800670a:	5dc7      	ldrb	r7, [r0, r7]
 800670c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006710:	4637      	mov	r7, r6
 8006712:	42bb      	cmp	r3, r7
 8006714:	460e      	mov	r6, r1
 8006716:	d9f4      	bls.n	8006702 <_printf_i+0x116>
 8006718:	2b08      	cmp	r3, #8
 800671a:	d10b      	bne.n	8006734 <_printf_i+0x148>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07de      	lsls	r6, r3, #31
 8006720:	d508      	bpl.n	8006734 <_printf_i+0x148>
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	bfde      	ittt	le
 800672a:	2330      	movle	r3, #48	; 0x30
 800672c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006734:	1b52      	subs	r2, r2, r5
 8006736:	6122      	str	r2, [r4, #16]
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	464b      	mov	r3, r9
 800673e:	aa03      	add	r2, sp, #12
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fee4 	bl	8006510 <_printf_common>
 8006748:	3001      	adds	r0, #1
 800674a:	d14a      	bne.n	80067e2 <_printf_i+0x1f6>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	b004      	add	sp, #16
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f043 0320 	orr.w	r3, r3, #32
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	4833      	ldr	r0, [pc, #204]	; (800682c <_printf_i+0x240>)
 8006760:	2778      	movs	r7, #120	; 0x78
 8006762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	061f      	lsls	r7, r3, #24
 800676c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006770:	d402      	bmi.n	8006778 <_printf_i+0x18c>
 8006772:	065f      	lsls	r7, r3, #25
 8006774:	bf48      	it	mi
 8006776:	b2b6      	uxthmi	r6, r6
 8006778:	07df      	lsls	r7, r3, #31
 800677a:	bf48      	it	mi
 800677c:	f043 0320 	orrmi.w	r3, r3, #32
 8006780:	6029      	str	r1, [r5, #0]
 8006782:	bf48      	it	mi
 8006784:	6023      	strmi	r3, [r4, #0]
 8006786:	b91e      	cbnz	r6, 8006790 <_printf_i+0x1a4>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	2310      	movs	r3, #16
 8006792:	e7a7      	b.n	80066e4 <_printf_i+0xf8>
 8006794:	4824      	ldr	r0, [pc, #144]	; (8006828 <_printf_i+0x23c>)
 8006796:	e7e4      	b.n	8006762 <_printf_i+0x176>
 8006798:	4615      	mov	r5, r2
 800679a:	e7bd      	b.n	8006718 <_printf_i+0x12c>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	6826      	ldr	r6, [r4, #0]
 80067a0:	6961      	ldr	r1, [r4, #20]
 80067a2:	1d18      	adds	r0, r3, #4
 80067a4:	6028      	str	r0, [r5, #0]
 80067a6:	0635      	lsls	r5, r6, #24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0x1c4>
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0x1ca>
 80067b0:	0670      	lsls	r0, r6, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0x1c0>
 80067b4:	8019      	strh	r1, [r3, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	4615      	mov	r5, r2
 80067bc:	e7bc      	b.n	8006738 <_printf_i+0x14c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	602a      	str	r2, [r5, #0]
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7f9 fd28 	bl	8000220 <memchr>
 80067d0:	b108      	cbz	r0, 80067d6 <_printf_i+0x1ea>
 80067d2:	1b40      	subs	r0, r0, r5
 80067d4:	6060      	str	r0, [r4, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	e7aa      	b.n	8006738 <_printf_i+0x14c>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0ad      	beq.n	800674c <_printf_i+0x160>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d413      	bmi.n	800681e <_printf_i+0x232>
 80067f6:	68e0      	ldr	r0, [r4, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	bfb8      	it	lt
 80067fe:	4618      	movlt	r0, r3
 8006800:	e7a6      	b.n	8006750 <_printf_i+0x164>
 8006802:	2301      	movs	r3, #1
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d09d      	beq.n	800674c <_printf_i+0x160>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf2      	bgt.n	8006802 <_printf_i+0x216>
 800681c:	e7eb      	b.n	80067f6 <_printf_i+0x20a>
 800681e:	2500      	movs	r5, #0
 8006820:	f104 0619 	add.w	r6, r4, #25
 8006824:	e7f5      	b.n	8006812 <_printf_i+0x226>
 8006826:	bf00      	nop
 8006828:	080069a1 	.word	0x080069a1
 800682c:	080069b2 	.word	0x080069b2

08006830 <memmove>:
 8006830:	4288      	cmp	r0, r1
 8006832:	b510      	push	{r4, lr}
 8006834:	eb01 0402 	add.w	r4, r1, r2
 8006838:	d902      	bls.n	8006840 <memmove+0x10>
 800683a:	4284      	cmp	r4, r0
 800683c:	4623      	mov	r3, r4
 800683e:	d807      	bhi.n	8006850 <memmove+0x20>
 8006840:	1e43      	subs	r3, r0, #1
 8006842:	42a1      	cmp	r1, r4
 8006844:	d008      	beq.n	8006858 <memmove+0x28>
 8006846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800684a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800684e:	e7f8      	b.n	8006842 <memmove+0x12>
 8006850:	4402      	add	r2, r0
 8006852:	4601      	mov	r1, r0
 8006854:	428a      	cmp	r2, r1
 8006856:	d100      	bne.n	800685a <memmove+0x2a>
 8006858:	bd10      	pop	{r4, pc}
 800685a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800685e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006862:	e7f7      	b.n	8006854 <memmove+0x24>

08006864 <_sbrk_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	; (8006880 <_sbrk_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa fd7a 	bl	8001368 <_sbrk>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_sbrk_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_sbrk_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000958 	.word	0x20000958

08006884 <memcpy>:
 8006884:	440a      	add	r2, r1
 8006886:	4291      	cmp	r1, r2
 8006888:	f100 33ff 	add.w	r3, r0, #4294967295
 800688c:	d100      	bne.n	8006890 <memcpy+0xc>
 800688e:	4770      	bx	lr
 8006890:	b510      	push	{r4, lr}
 8006892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800689a:	4291      	cmp	r1, r2
 800689c:	d1f9      	bne.n	8006892 <memcpy+0xe>
 800689e:	bd10      	pop	{r4, pc}

080068a0 <_realloc_r>:
 80068a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a4:	4680      	mov	r8, r0
 80068a6:	4614      	mov	r4, r2
 80068a8:	460e      	mov	r6, r1
 80068aa:	b921      	cbnz	r1, 80068b6 <_realloc_r+0x16>
 80068ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b0:	4611      	mov	r1, r2
 80068b2:	f7ff bc49 	b.w	8006148 <_malloc_r>
 80068b6:	b92a      	cbnz	r2, 80068c4 <_realloc_r+0x24>
 80068b8:	f7ff fbda 	bl	8006070 <_free_r>
 80068bc:	4625      	mov	r5, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c4:	f000 f81b 	bl	80068fe <_malloc_usable_size_r>
 80068c8:	4284      	cmp	r4, r0
 80068ca:	4607      	mov	r7, r0
 80068cc:	d802      	bhi.n	80068d4 <_realloc_r+0x34>
 80068ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068d2:	d812      	bhi.n	80068fa <_realloc_r+0x5a>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4640      	mov	r0, r8
 80068d8:	f7ff fc36 	bl	8006148 <_malloc_r>
 80068dc:	4605      	mov	r5, r0
 80068de:	2800      	cmp	r0, #0
 80068e0:	d0ed      	beq.n	80068be <_realloc_r+0x1e>
 80068e2:	42bc      	cmp	r4, r7
 80068e4:	4622      	mov	r2, r4
 80068e6:	4631      	mov	r1, r6
 80068e8:	bf28      	it	cs
 80068ea:	463a      	movcs	r2, r7
 80068ec:	f7ff ffca 	bl	8006884 <memcpy>
 80068f0:	4631      	mov	r1, r6
 80068f2:	4640      	mov	r0, r8
 80068f4:	f7ff fbbc 	bl	8006070 <_free_r>
 80068f8:	e7e1      	b.n	80068be <_realloc_r+0x1e>
 80068fa:	4635      	mov	r5, r6
 80068fc:	e7df      	b.n	80068be <_realloc_r+0x1e>

080068fe <_malloc_usable_size_r>:
 80068fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006902:	1f18      	subs	r0, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	bfbc      	itt	lt
 8006908:	580b      	ldrlt	r3, [r1, r0]
 800690a:	18c0      	addlt	r0, r0, r3
 800690c:	4770      	bx	lr
	...

08006910 <_init>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr

0800691c <_fini>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr
