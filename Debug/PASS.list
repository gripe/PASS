
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800728c  0800728c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007294  08007294  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800729c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000060  080072fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc0  080072fc  00020bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f66  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1b  00000000  00000000  00035039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00037c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d38  00000000  00000000  00038d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026804  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016481  00000000  00000000  0006028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe76  00000000  00000000  0007670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd8  00000000  00000000  00166584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016b25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800713c 	.word	0x0800713c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800713c 	.word	0x0800713c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <read_ADC_Channel>:
uint32_t sai_fifo_b[16];
uint16_t audio_buf_low[AUDIO_LOW_BUF_SIZE];
//uint16_t audio_buf_high[AUDIO_HIGH_BUF_SIZE];
int32_t delay = 0;

uint16_t read_ADC_Channel(ADC_HandleTypeDef* hadc, int channel) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef chConfig = { 0 };
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
	chConfig.Channel = channel;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	60bb      	str	r3, [r7, #8]
	chConfig.Rank = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
	chConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &chConfig);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fb04 	bl	8001bf4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f99b 	bl	8001928 <HAL_ADC_Start>
	int status = HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80005f2:	f04f 31ff 	mov.w	r1, #4294967295
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f001 fa64 	bl	8001ac4 <HAL_ADC_PollForConversion>
 80005fc:	4603      	mov	r3, r0
 80005fe:	61fb      	str	r3, [r7, #28]
		  if (status != HAL_OK) {
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <read_ADC_Channel+0x4e>
			Error_Handler();
 8000606:	f000 fd5b 	bl	80010c0 <Error_Handler>
		  }
	uint16_t val = HAL_ADC_GetValue(hadc);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 fae5 	bl	8001bda <HAL_ADC_GetValue>
 8000610:	4603      	mov	r3, r0
 8000612:	837b      	strh	r3, [r7, #26]
//	HAL_ADC_Stop(hadc);

	return val;
 8000614:	8b7b      	ldrh	r3, [r7, #26]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	static int circ_offset_low = 0;
	static int circ_offset_high = 0;


	if(hsai == &hsai_BlockB1) return;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a45      	ldr	r2, [pc, #276]	; (8000740 <HAL_SAI_TxCpltCallback+0x120>)
 800062c:	4293      	cmp	r3, r2
 800062e:	f000 8083 	beq.w	8000738 <HAL_SAI_TxCpltCallback+0x118>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000632:	b672      	cpsid	i
}
 8000634:	bf00      	nop

	__disable_irq();
	adc_get[0] = read_ADC_Channel(&hadc1, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	4842      	ldr	r0, [pc, #264]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800063a:	f7ff ffbf 	bl	80005bc <read_ADC_Channel>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 8000644:	801a      	strh	r2, [r3, #0]
	adc_get[1] = read_ADC_Channel(&hadc1, 3);
 8000646:	2103      	movs	r1, #3
 8000648:	483e      	ldr	r0, [pc, #248]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800064a:	f7ff ffb7 	bl	80005bc <read_ADC_Channel>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 8000654:	805a      	strh	r2, [r3, #2]
	delay = (read_ADC_Channel(&hadc1, 4) - 2000) * 7 / 2048;
 8000656:	2104      	movs	r1, #4
 8000658:	483a      	ldr	r0, [pc, #232]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800065a:	f7ff ffaf 	bl	80005bc <read_ADC_Channel>
 800065e:	4603      	mov	r3, r0
 8000660:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8000664:	4613      	mov	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	da01      	bge.n	8000672 <HAL_SAI_TxCpltCallback+0x52>
 800066e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000672:	12db      	asrs	r3, r3, #11
 8000674:	461a      	mov	r2, r3
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <HAL_SAI_TxCpltCallback+0x12c>)
 8000678:	601a      	str	r2, [r3, #0]



//	audio_buf_high[circ_offset_high] = (adc_get[0] << 4) - (1 << 15);
	audio_buf_low[circ_offset_low] = (adc_get[1] << 4) - (1 << 15);
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 800067c:	885b      	ldrh	r3, [r3, #2]
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b33      	ldr	r3, [pc, #204]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800068a:	b291      	uxth	r1, r2
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <HAL_SAI_TxCpltCallback+0x134>)
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	circ_offset_high = (circ_offset_high + 1) % AUDIO_HIGH_BUF_SIZE;
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <HAL_SAI_TxCpltCallback+0x138>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <HAL_SAI_TxCpltCallback+0x13c>)
 800069a:	fb83 1302 	smull	r1, r3, r3, r2
 800069e:	4413      	add	r3, r2
 80006a0:	10d9      	asrs	r1, r3, #3
 80006a2:	17d3      	asrs	r3, r2, #31
 80006a4:	1ac9      	subs	r1, r1, r3
 80006a6:	460b      	mov	r3, r1
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	1a5b      	subs	r3, r3, r1
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	460b      	mov	r3, r1
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <HAL_SAI_TxCpltCallback+0x138>)
 80006ba:	601a      	str	r2, [r3, #0]
	circ_offset_low = (circ_offset_low + 1) % AUDIO_LOW_BUF_SIZE;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a27      	ldr	r2, [pc, #156]	; (8000760 <HAL_SAI_TxCpltCallback+0x140>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	441a      	add	r2, r3
 80006ca:	11d1      	asrs	r1, r2, #7
 80006cc:	17da      	asrs	r2, r3, #31
 80006ce:	1a8a      	subs	r2, r1, r2
 80006d0:	21b4      	movs	r1, #180	; 0xb4
 80006d2:	fb01 f202 	mul.w	r2, r1, r2
 80006d6:	1a9a      	subs	r2, r3, r2
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006da:	601a      	str	r2, [r3, #0]

	int buf_index;
	//Fill the 12 subwoofers
	for(int i = 0; i < 12; i ++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e025      	b.n	800072e <HAL_SAI_TxCpltCallback+0x10e>
		buf_index = (delay * i + (AUDIO_LOW_BUF_SIZE >> 1) + circ_offset_low) % AUDIO_LOW_BUF_SIZE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_SAI_TxCpltCallback+0x12c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <HAL_SAI_TxCpltCallback+0x140>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	441a      	add	r2, r3
 80006fe:	11d1      	asrs	r1, r2, #7
 8000700:	17da      	asrs	r2, r3, #31
 8000702:	1a8a      	subs	r2, r1, r2
 8000704:	21b4      	movs	r1, #180	; 0xb4
 8000706:	fb01 f202 	mul.w	r2, r1, r2
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
		buf_index = MAX(buf_index, 0);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000714:	60bb      	str	r3, [r7, #8]
		sai_fifo_a[i] = audio_buf_low[buf_index];
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_SAI_TxCpltCallback+0x134>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	4619      	mov	r1, r3
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <HAL_SAI_TxCpltCallback+0x144>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 12; i ++) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b0b      	cmp	r3, #11
 8000732:	ddd6      	ble.n	80006e2 <HAL_SAI_TxCpltCallback+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000734:	b662      	cpsie	i
}
 8000736:	e000      	b.n	800073a <HAL_SAI_TxCpltCallback+0x11a>
	if(hsai == &hsai_BlockB1) return;
 8000738:	bf00      	nop
////	sprintf(msg1, "adc2 is %d\r\n", adc_get[1]);
////	HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
////	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);


}
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000019c 	.word	0x2000019c
 8000744:	2000007c 	.word	0x2000007c
 8000748:	20000870 	.word	0x20000870
 800074c:	20000a5c 	.word	0x20000a5c
 8000750:	20000a64 	.word	0x20000a64
 8000754:	200008f4 	.word	0x200008f4
 8000758:	20000a68 	.word	0x20000a68
 800075c:	88888889 	.word	0x88888889
 8000760:	b60b60b7 	.word	0xb60b60b7
 8000764:	20000874 	.word	0x20000874

08000768 <write_DAC1>:
uint8_t dac_ctrl1 = 0b10000100;
uint8_t dac_ctrl2 = 0b10000;



void write_DAC1(uint8_t reg, uint8_t* data) {
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b0ba      	sub	sp, #232	; 0xe8
 800076c:	af04      	add	r7, sp, #16
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC1_ADDR << 1, reg,
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29a      	uxth	r2, r3
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2108      	movs	r1, #8
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <write_DAC1+0xc0>)
 800078c:	f002 fbf4 	bl	8002f78 <HAL_I2C_Mem_Write>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success on DAC1!\r\n";
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <write_DAC1+0xc4>)
 8000798:	f107 040c 	add.w	r4, r7, #12
 800079c:	461d      	mov	r5, r3
 800079e:	6828      	ldr	r0, [r5, #0]
 80007a0:	6869      	ldr	r1, [r5, #4]
 80007a2:	68aa      	ldr	r2, [r5, #8]
 80007a4:	68eb      	ldr	r3, [r5, #12]
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	8a2b      	ldrh	r3, [r5, #16]
 80007aa:	7caa      	ldrb	r2, [r5, #18]
 80007ac:	8023      	strh	r3, [r4, #0]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70a3      	strb	r3, [r4, #2]
 80007b2:	f107 031f 	add.w	r3, r7, #31
 80007b6:	2251      	movs	r2, #81	; 0x51
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f006 f83a 	bl	8006834 <memset>
	if (ret != HAL_OK) {
 80007c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d01d      	beq.n	8000804 <write_DAC1+0x9c>
		sprintf(str_fail, "Error is %d on DAC1; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 80007c8:	4817      	ldr	r0, [pc, #92]	; (8000828 <write_DAC1+0xc0>)
 80007ca:	f002 fce9 	bl	80031a0 <HAL_I2C_GetError>
 80007ce:	4601      	mov	r1, r0
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4613      	mov	r3, r2
 80007de:	460a      	mov	r2, r1
 80007e0:	4913      	ldr	r1, [pc, #76]	; (8000830 <write_DAC1+0xc8>)
 80007e2:	f006 f807 	bl	80067f4 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80007e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fd10 	bl	8000210 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <write_DAC1+0xcc>)
 80007fe:	f005 f87d 	bl	80058fc <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000802:	e00d      	b.n	8000820 <write_DAC1+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd01 	bl	8000210 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	f107 010c 	add.w	r1, r7, #12
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <write_DAC1+0xcc>)
 800081c:	f005 f86e 	bl	80058fc <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	37d8      	adds	r7, #216	; 0xd8
 8000824:	46bd      	mov	sp, r7
 8000826:	bdb0      	pop	{r4, r5, r7, pc}
 8000828:	200000c4 	.word	0x200000c4
 800082c:	08007188 	.word	0x08007188
 8000830:	08007154 	.word	0x08007154
 8000834:	200002e0 	.word	0x200002e0

08000838 <write_DAC2>:

void write_DAC2(uint8_t reg, uint8_t* data) {
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b0ba      	sub	sp, #232	; 0xe8
 800083c:	af04      	add	r7, sp, #16
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC2_ADDR << 1, reg,
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	9302      	str	r3, [sp, #8]
 800084e:	2301      	movs	r3, #1
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	2148      	movs	r1, #72	; 0x48
 800085a:	4827      	ldr	r0, [pc, #156]	; (80008f8 <write_DAC2+0xc0>)
 800085c:	f002 fb8c 	bl	8002f78 <HAL_I2C_Mem_Write>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <write_DAC2+0xc4>)
 8000868:	f107 040c 	add.w	r4, r7, #12
 800086c:	461d      	mov	r5, r3
 800086e:	6828      	ldr	r0, [r5, #0]
 8000870:	6869      	ldr	r1, [r5, #4]
 8000872:	68aa      	ldr	r2, [r5, #8]
 8000874:	68eb      	ldr	r3, [r5, #12]
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	8a2b      	ldrh	r3, [r5, #16]
 800087a:	7caa      	ldrb	r2, [r5, #18]
 800087c:	8023      	strh	r3, [r4, #0]
 800087e:	4613      	mov	r3, r2
 8000880:	70a3      	strb	r3, [r4, #2]
 8000882:	f107 031f 	add.w	r3, r7, #31
 8000886:	2251      	movs	r2, #81	; 0x51
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 ffd2 	bl	8006834 <memset>
	if (ret != HAL_OK) {
 8000890:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d01d      	beq.n	80008d4 <write_DAC2+0x9c>
		sprintf(str_fail, "Error is %d on DAC2; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <write_DAC2+0xc0>)
 800089a:	f002 fc81 	bl	80031a0 <HAL_I2C_GetError>
 800089e:	4601      	mov	r1, r0
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	4913      	ldr	r1, [pc, #76]	; (8000900 <write_DAC2+0xc8>)
 80008b2:	f005 ff9f 	bl	80067f4 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80008b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fca8 	bl	8000210 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <write_DAC2+0xcc>)
 80008ce:	f005 f815 	bl	80058fc <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 80008d2:	e00d      	b.n	80008f0 <write_DAC2+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc99 	bl	8000210 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f107 010c 	add.w	r1, r7, #12
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <write_DAC2+0xcc>)
 80008ec:	f005 f806 	bl	80058fc <HAL_UART_Transmit>
}
 80008f0:	bf00      	nop
 80008f2:	37d8      	adds	r7, #216	; 0xd8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	200000c4 	.word	0x200000c4
 80008fc:	080071d0 	.word	0x080071d0
 8000900:	0800719c 	.word	0x0800719c
 8000904:	200002e0 	.word	0x200002e0

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 ff46 	bl	800179e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 f8a5 	bl	8000a60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000916:	f000 f90b 	bl	8000b30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 fb17 	bl	8000f4c <MX_GPIO_Init>
  MX_DMA_Init();
 800091e:	f000 faef 	bl	8000f00 <MX_DMA_Init>
  MX_SAI1_Init();
 8000922:	f000 f9db 	bl	8000cdc <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000926:	f000 fabd 	bl	8000ea4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800092a:	f000 f997 	bl	8000c5c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800092e:	f000 fa89 	bl	8000e44 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000932:	f000 f925 	bl	8000b80 <MX_ADC1_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8000936:	b672      	cpsid	i
}
 8000938:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __disable_irq();
//  HAL_ADC_Start_DMA(&hadc1, &adc_get, 2);
  sai_fifo_a[0] = 0x7000U;
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <main+0x120>)
 800093c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000940:	601a      	str	r2, [r3, #0]
  sai_fifo_b[0] = 0x7000U;
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <main+0x124>)
 8000944:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000948:	601a      	str	r2, [r3, #0]
  int error;
  error = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint32_t * )&sai_fifo_a, 16);
 800094a:	2210      	movs	r2, #16
 800094c:	4936      	ldr	r1, [pc, #216]	; (8000a28 <main+0x120>)
 800094e:	4838      	ldr	r0, [pc, #224]	; (8000a30 <main+0x128>)
 8000950:	f004 fc64 	bl	800521c <HAL_SAI_Transmit_DMA>
 8000954:	4603      	mov	r3, r0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  char error_msg[50];
  sprintf(error_msg, "Error is %d on DMA1\r\n", error);
 8000958:	463b      	mov	r3, r7
 800095a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800095c:	4935      	ldr	r1, [pc, #212]	; (8000a34 <main+0x12c>)
 800095e:	4618      	mov	r0, r3
 8000960:	f005 ff48 	bl	80067f4 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000964:	463b      	mov	r3, r7
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fc52 	bl	8000210 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	4639      	mov	r1, r7
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <main+0x130>)
 8000978:	f004 ffc0 	bl	80058fc <HAL_UART_Transmit>


  error = HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint32_t * )&sai_fifo_b, 16);
 800097c:	2210      	movs	r2, #16
 800097e:	492b      	ldr	r1, [pc, #172]	; (8000a2c <main+0x124>)
 8000980:	482e      	ldr	r0, [pc, #184]	; (8000a3c <main+0x134>)
 8000982:	f004 fc4b 	bl	800521c <HAL_SAI_Transmit_DMA>
 8000986:	4603      	mov	r3, r0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  sprintf(error_msg, "Error is %d on DMA2\r\n", error);
 800098a:	463b      	mov	r3, r7
 800098c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800098e:	492c      	ldr	r1, [pc, #176]	; (8000a40 <main+0x138>)
 8000990:	4618      	mov	r0, r3
 8000992:	f005 ff2f 	bl	80067f4 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000996:	463b      	mov	r3, r7
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fc39 	bl	8000210 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4639      	mov	r1, r7
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	4823      	ldr	r0, [pc, #140]	; (8000a38 <main+0x130>)
 80009aa:	f004 ffa7 	bl	80058fc <HAL_UART_Transmit>

  //HAL_Delay(1000);



  sprintf(error_msg, "UART good!\r\n");
 80009ae:	463b      	mov	r3, r7
 80009b0:	4924      	ldr	r1, [pc, #144]	; (8000a44 <main+0x13c>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 ff1e 	bl	80067f4 <siprintf>

  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 80009b8:	463b      	mov	r3, r7
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc28 	bl	8000210 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4639      	mov	r1, r7
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <main+0x130>)
 80009cc:	f004 ff96 	bl	80058fc <HAL_UART_Transmit>


  write_DAC1(PLL_CLK_CTRL0, &pll_clk_data);
 80009d0:	491d      	ldr	r1, [pc, #116]	; (8000a48 <main+0x140>)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fec8 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_MUTE1, &mute_data_DAC1);
 80009d8:	491c      	ldr	r1, [pc, #112]	; (8000a4c <main+0x144>)
 80009da:	2009      	movs	r0, #9
 80009dc:	f7ff fec4 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL0, &dac_ctrl0);
 80009e0:	491b      	ldr	r1, [pc, #108]	; (8000a50 <main+0x148>)
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff fec0 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL1, &dac_ctrl1);
 80009e8:	491a      	ldr	r1, [pc, #104]	; (8000a54 <main+0x14c>)
 80009ea:	2007      	movs	r0, #7
 80009ec:	f7ff febc 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL2, &dac_ctrl2);
 80009f0:	4919      	ldr	r1, [pc, #100]	; (8000a58 <main+0x150>)
 80009f2:	2008      	movs	r0, #8
 80009f4:	f7ff feb8 	bl	8000768 <write_DAC1>

  write_DAC2(PLL_CLK_CTRL0, &pll_clk_data);
 80009f8:	4913      	ldr	r1, [pc, #76]	; (8000a48 <main+0x140>)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ff1c 	bl	8000838 <write_DAC2>
write_DAC2(DAC_MUTE1, &mute_data_DAC2);
 8000a00:	4916      	ldr	r1, [pc, #88]	; (8000a5c <main+0x154>)
 8000a02:	2009      	movs	r0, #9
 8000a04:	f7ff ff18 	bl	8000838 <write_DAC2>
write_DAC2(DAC_CTRL0, &dac_ctrl0);
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <main+0x148>)
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff ff14 	bl	8000838 <write_DAC2>
write_DAC2(DAC_CTRL1, &dac_ctrl1);
 8000a10:	4910      	ldr	r1, [pc, #64]	; (8000a54 <main+0x14c>)
 8000a12:	2007      	movs	r0, #7
 8000a14:	f7ff ff10 	bl	8000838 <write_DAC2>
write_DAC2(DAC_CTRL2, &dac_ctrl2);
 8000a18:	490f      	ldr	r1, [pc, #60]	; (8000a58 <main+0x150>)
 8000a1a:	2008      	movs	r0, #8
 8000a1c:	f7ff ff0c 	bl	8000838 <write_DAC2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a20:	b662      	cpsie	i
}
 8000a22:	bf00      	nop

  __enable_irq();



  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x11c>
 8000a26:	bf00      	nop
 8000a28:	20000874 	.word	0x20000874
 8000a2c:	200008b4 	.word	0x200008b4
 8000a30:	20000118 	.word	0x20000118
 8000a34:	080071e4 	.word	0x080071e4
 8000a38:	200002e0 	.word	0x200002e0
 8000a3c:	2000019c 	.word	0x2000019c
 8000a40:	080071fc 	.word	0x080071fc
 8000a44:	08007214 	.word	0x08007214
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000a60 	.word	0x20000a60
 8000a50:	20000001 	.word	0x20000001
 8000a54:	20000002 	.word	0x20000002
 8000a58:	20000003 	.word	0x20000003
 8000a5c:	20000a61 	.word	0x20000a61

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 fee0 	bl	8006834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a84:	f002 ffbe 	bl	8003a04 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xc8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <SystemClock_Config+0xcc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <SystemClock_Config+0xcc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <SystemClock_Config+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ad4:	2348      	movs	r3, #72	; 0x48
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 ff9d 	bl	8003a24 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af0:	f000 fae6 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fa2b 	bl	8003f6c <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b1c:	f000 fad0 	bl	80010c0 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	; 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0a2      	sub	sp, #136	; 0x88
 8000b34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2284      	movs	r2, #132	; 0x84
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 fe79 	bl	8006834 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000b42:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000b46:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000b48:	2332      	movs	r3, #50	; 0x32
 8000b4a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fc26 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000b72:	f000 faa5 	bl	80010c0 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3788      	adds	r7, #136	; 0x88
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <MX_ADC1_Init+0xd4>)
 8000b96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <MX_ADC1_Init+0xd8>)
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bde:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000be0:	f000 fe5e 	bl	80018a0 <HAL_ADC_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f000 fa69 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000c00:	f000 fff8 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c0a:	f000 fa59 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000c1c:	f000 ffea 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c26:	f000 fa4b 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_ADC1_Init+0xd0>)
 8000c38:	f000 ffdc 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000c42:	f000 fa3d 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000007c 	.word	0x2000007c
 8000c54:	40012000 	.word	0x40012000
 8000c58:	0f000001 	.word	0x0f000001

08000c5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_I2C2_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x601015E9;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <MX_I2C2_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c98:	f002 f8de 	bl	8002e58 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 fa0d 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000caa:	f002 fccb 	bl	8003644 <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 fa04 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cbc:	f002 fd0d 	bl	80036da <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f9fb 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c4 	.word	0x200000c4
 8000cd4:	40005800 	.word	0x40005800
 8000cd8:	601015e9 	.word	0x601015e9

08000cdc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ce0:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000ce2:	4a55      	ldr	r2, [pc, #340]	; (8000e38 <MX_SAI1_Init+0x15c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ce6:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cec:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000cf2:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cf8:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d04:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d10:	4b48      	ldr	r3, [pc, #288]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 7;
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d54:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d64:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d74:	2210      	movs	r2, #16
 8000d76:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d80:	482c      	ldr	r0, [pc, #176]	; (8000e34 <MX_SAI1_Init+0x158>)
 8000d82:	f004 f849 	bl	8004e18 <HAL_SAI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SAI1_Init+0xb4>
  {
    Error_Handler();
 8000d8c:	f000 f998 	bl	80010c0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000d92:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <MX_SAI1_Init+0x164>)
 8000d94:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000df2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000dfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_SAI1_Init+0x160>)
 8000e20:	f003 fffa 	bl	8004e18 <HAL_SAI_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_SAI1_Init+0x152>
  {
    Error_Handler();
 8000e2a:	f000 f949 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000118 	.word	0x20000118
 8000e38:	40015804 	.word	0x40015804
 8000e3c:	2000019c 	.word	0x2000019c
 8000e40:	40015824 	.word	0x40015824

08000e44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <MX_USART3_UART_Init+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART3_UART_Init+0x58>)
 8000e88:	f004 fcea 	bl	8005860 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f915 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200002e0 	.word	0x200002e0
 8000ea0:	40004800 	.word	0x40004800

08000ea4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee8:	f002 fc43 	bl	8003772 <HAL_PCD_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f000 f8e5 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000368 	.word	0x20000368

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_DMA_Init+0x48>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_DMA_Init+0x48>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_DMA_Init+0x48>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2039      	movs	r0, #57	; 0x39
 8000f24:	f001 f991 	bl	800224a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f28:	2039      	movs	r0, #57	; 0x39
 8000f2a:	f001 f9aa 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	203c      	movs	r0, #60	; 0x3c
 8000f34:	f001 f989 	bl	800224a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f38:	203c      	movs	r0, #60	; 0x3c
 8000f3a:	f001 f9a2 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a41      	ldr	r2, [pc, #260]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_GPIO_Init+0x168>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_GPIO_Init+0x168>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <MX_GPIO_Init+0x168>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x168>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_GPIO_Init+0x168>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <MX_GPIO_Init+0x16c>)
 800102a:	f001 fefb 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4822      	ldr	r0, [pc, #136]	; (80010bc <MX_GPIO_Init+0x170>)
 8001034:	f001 fef6 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_GPIO_Init+0x16c>)
 8001056:	f001 fd39 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800105a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001060:	2311      	movs	r3, #17
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_GPIO_Init+0x16c>)
 8001074:	f001 fd2a 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0x170>)
 8001090:	f001 fd1c 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_GPIO_Init+0x170>)
 80010a8:	f001 fd10 	bl	8002acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40021800 	.word	0x40021800

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b09a      	sub	sp, #104	; 0x68
 80010c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010c6:	b672      	cpsid	i
}
 80010c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <Error_Handler+0x48>)
 80010cc:	1d3c      	adds	r4, r7, #4
 80010ce:	461d      	mov	r5, r3
 80010d0:	6828      	ldr	r0, [r5, #0]
 80010d2:	6869      	ldr	r1, [r5, #4]
 80010d4:	68aa      	ldr	r2, [r5, #8]
 80010d6:	68eb      	ldr	r3, [r5, #12]
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	7c2b      	ldrb	r3, [r5, #16]
 80010dc:	7023      	strb	r3, [r4, #0]
 80010de:	f107 0315 	add.w	r3, r7, #21
 80010e2:	2253      	movs	r2, #83	; 0x53
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fba4 	bl	8006834 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f88e 	bl	8000210 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <Error_Handler+0x4c>)
 8001100:	f004 fbfc 	bl	80058fc <HAL_UART_Transmit>

  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x44>
 8001106:	bf00      	nop
 8001108:	08007224 	.word	0x08007224
 800110c:	200002e0 	.word	0x200002e0

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x44>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_MspInit+0x44>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x44>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_MspInit+0x44>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_MspInit+0x44>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d123      	bne.n	80011c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80011aa:	2319      	movs	r3, #25
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_ADC_MspInit+0x7c>)
 80011be:	f001 fc85 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012000 	.word	0x40012000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0aa      	sub	sp, #168	; 0xa8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	2284      	movs	r2, #132	; 0x84
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fb1b 	bl	8006834 <memset>
  if(hi2c->Instance==I2C2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_I2C_MspInit+0xb0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d13b      	bne.n	8001280 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800120e:	2300      	movs	r3, #0
 8001210:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4618      	mov	r0, r3
 8001218:	f003 f8ce 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001222:	f7ff ff4d 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_I2C_MspInit+0xb4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_I2C_MspInit+0xb4>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_I2C_MspInit+0xb4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001244:	2312      	movs	r3, #18
 8001246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001256:	2304      	movs	r3, #4
 8001258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_I2C_MspInit+0xb8>)
 8001264:	f001 fc32 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_I2C_MspInit+0xb4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_I2C_MspInit+0xb4>)
 800126e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_I2C_MspInit+0xb4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	37a8      	adds	r7, #168	; 0xa8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40005800 	.word	0x40005800
 800128c:	40023800 	.word	0x40023800
 8001290:	40021400 	.word	0x40021400

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0aa      	sub	sp, #168	; 0xa8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2284      	movs	r2, #132	; 0x84
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 fabd 	bl	8006834 <memset>
  if(huart->Instance==USART3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <HAL_UART_MspInit+0xb4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d13c      	bne.n	800133e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f870 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012de:	f7ff feef 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_UART_MspInit+0xb8>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_UART_MspInit+0xb8>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_UART_MspInit+0xb8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_UART_MspInit+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_UART_MspInit+0xb8>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_UART_MspInit+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_UART_MspInit+0xbc>)
 800133a:	f001 fbc7 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	37a8      	adds	r7, #168	; 0xa8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004800 	.word	0x40004800
 800134c:	40023800 	.word	0x40023800
 8001350:	40020c00 	.word	0x40020c00

08001354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ac      	sub	sp, #176	; 0xb0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	2284      	movs	r2, #132	; 0x84
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fa5d 	bl	8006834 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d159      	bne.n	8001438 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001388:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f003 f80f 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f7ff fe8e 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d6:	230a      	movs	r3, #10
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e0:	4619      	mov	r1, r3
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 80013e4:	f001 fb72 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001400:	4619      	mov	r1, r3
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 8001404:	f001 fb62 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001412:	6353      	str	r3, [r2, #52]	; 0x34
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37b0      	adds	r7, #176	; 0xb0
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_SAI_MspInit+0x1b8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d163      	bne.n	8001522 <HAL_SAI_MspInit+0xda>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800145a:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001462:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 8001468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2057      	movs	r0, #87	; 0x57
 8001480:	f000 fee3 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001484:	2057      	movs	r0, #87	; 0x57
 8001486:	f000 fefc 	bl	8002282 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800148a:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 8001492:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001494:	2370      	movs	r3, #112	; 0x70
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80014a4:	2306      	movs	r3, #6
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4857      	ldr	r0, [pc, #348]	; (800160c <HAL_SAI_MspInit+0x1c4>)
 80014b0:	f001 fb0c 	bl	8002acc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80014b4:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014b6:	4a57      	ldr	r2, [pc, #348]	; (8001614 <HAL_SAI_MspInit+0x1cc>)
 80014b8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b52      	ldr	r3, [pc, #328]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014d4:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014da:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014f2:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80014fa:	4845      	ldr	r0, [pc, #276]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 80014fc:	f000 fedc 	bl	80022b8 <HAL_DMA_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_SAI_MspInit+0xc2>
    {
      Error_Handler();
 8001506:	f7ff fddb 	bl	80010c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 800150e:	671a      	str	r2, [r3, #112]	; 0x70
 8001510:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 800151a:	66da      	str	r2, [r3, #108]	; 0x6c
 800151c:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <HAL_SAI_MspInit+0x1c8>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_SAI_MspInit+0x1d0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d164      	bne.n	80015f6 <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d113      	bne.n	800155c <HAL_SAI_MspInit+0x114>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	4a33      	ldr	r2, [pc, #204]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 800153a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153e:	6453      	str	r3, [r2, #68]	; 0x44
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_SAI_MspInit+0x1c0>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2057      	movs	r0, #87	; 0x57
 8001552:	f000 fe7a 	bl	800224a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001556:	2057      	movs	r0, #87	; 0x57
 8001558:	f000 fe93 	bl	8002282 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_SAI_MspInit+0x1bc>)
 8001564:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001566:	2308      	movs	r3, #8
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001576:	2306      	movs	r3, #6
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4822      	ldr	r0, [pc, #136]	; (800160c <HAL_SAI_MspInit+0x1c4>)
 8001582:	f001 faa3 	bl	8002acc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_SAI_MspInit+0x1d8>)
 800158a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 800158e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001592:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ae:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015be:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015d0:	f000 fe72 	bl	80022b8 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 80015da:	f7ff fd71 	bl	80010c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015e2:	671a      	str	r2, [r3, #112]	; 0x70
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_SAI_MspInit+0x1d4>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40015804 	.word	0x40015804
 8001604:	20000a6c 	.word	0x20000a6c
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	20000220 	.word	0x20000220
 8001614:	40026428 	.word	0x40026428
 8001618:	40015824 	.word	0x40015824
 800161c:	20000280 	.word	0x20000280
 8001620:	40026470 	.word	0x40026470

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f8d2 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA2_Stream1_IRQHandler+0x10>)
 800167e:	f000 ffbb 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000220 	.word	0x20000220

0800168c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA2_Stream4_IRQHandler+0x10>)
 8001692:	f000 ffb1 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000280 	.word	0x20000280

080016a0 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <SAI1_IRQHandler+0x14>)
 80016a6:	f003 fe69 	bl	800537c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <SAI1_IRQHandler+0x18>)
 80016ac:	f003 fe66 	bl	800537c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000118 	.word	0x20000118
 80016b8:	2000019c 	.word	0x2000019c

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f005 f8aa 	bl	8006844 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20050000 	.word	0x20050000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000a70 	.word	0x20000a70
 8001724:	20000bc0 	.word	0x20000bc0

08001728 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001768:	4c0b      	ldr	r4, [pc, #44]	; (8001798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001776:	f7ff ffd7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f005 f869 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff f8c3 	bl	8000908 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001790:	0800729c 	.word	0x0800729c
  ldr r2, =_sbss
 8001794:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001798:	20000bc0 	.word	0x20000bc0

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>

0800179e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 fd46 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f805 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ae:	f7ff fcaf 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fd61 	bl	800229e <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 fd29 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000004 	.word	0x20000004
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000000c 	.word	0x2000000c
 800183c:	20000a74 	.word	0x20000a74

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000a74 	.word	0x20000a74

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e031      	b.n	800191a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fc4a 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_ADC_Init+0x84>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	f043 0202 	orr.w	r2, r3, #2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fad6 	bl	8001ea0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f023 0303 	bic.w	r3, r3, #3
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	e001      	b.n	8001910 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	ffffeefd 	.word	0xffffeefd

08001928 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start+0x1a>
 800193e:	2302      	movs	r3, #2
 8001940:	e0ad      	b.n	8001a9e <HAL_ADC_Start+0x176>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d018      	beq.n	800198a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_ADC_Start+0x184>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_ADC_Start+0x188>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d175      	bne.n	8001a84 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_ADC_Start+0x18c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f023 0206 	bic.w	r2, r3, #6
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_ADC_Start+0x190>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10f      	bne.n	8001a26 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d143      	bne.n	8001a9c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e03a      	b.n	8001a9c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a24      	ldr	r2, [pc, #144]	; (8001abc <HAL_ADC_Start+0x194>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10e      	bne.n	8001a4e <HAL_ADC_Start+0x126>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a4c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_ADC_Start+0x190>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d120      	bne.n	8001a9c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_ADC_Start+0x198>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d11b      	bne.n	8001a9c <HAL_ADC_Start+0x174>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d114      	bne.n	8001a9c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	e00b      	b.n	8001a9c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f043 0210 	orr.w	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	431bde83 	.word	0x431bde83
 8001ab4:	fffff8fe 	.word	0xfffff8fe
 8001ab8:	40012300 	.word	0x40012300
 8001abc:	40012000 	.word	0x40012000
 8001ac0:	40012200 	.word	0x40012200

08001ac4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae0:	d113      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af0:	d10b      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0220 	orr.w	r2, r3, #32
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e063      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b0a:	f7ff fe99 	bl	8001840 <HAL_GetTick>
 8001b0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b10:	e021      	b.n	8001b56 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d01d      	beq.n	8001b56 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_PollForConversion+0x6c>
 8001b20:	f7ff fe8e 	bl	8001840 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d212      	bcs.n	8001b56 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d00b      	beq.n	8001b56 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0204 	orr.w	r2, r3, #4
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e03d      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d1d6      	bne.n	8001b12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0212 	mvn.w	r2, #18
 8001b6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d123      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11f      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e136      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x28a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d93a      	bls.n	8001c96 <HAL_ADC_ConfigChannel+0xa2>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c28:	d035      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68d9      	ldr	r1, [r3, #12]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	2207      	movs	r2, #7
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a8d      	ldr	r2, [pc, #564]	; (8001e8c <HAL_ADC_ConfigChannel+0x298>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	061a      	lsls	r2, r3, #24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c6e:	e035      	b.n	8001cdc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4403      	add	r3, r0
 8001c88:	3b1e      	subs	r3, #30
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c94:	e022      	b.n	8001cdc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6919      	ldr	r1, [r3, #16]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	2207      	movs	r2, #7
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6919      	ldr	r1, [r3, #16]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4403      	add	r3, r0
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d824      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b05      	subs	r3, #5
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	400a      	ands	r2, r1
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b05      	subs	r3, #5
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2c:	e04c      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d824      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b23      	subs	r3, #35	; 0x23
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b23      	subs	r3, #35	; 0x23
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b41      	subs	r3, #65	; 0x41
 8001d92:	221f      	movs	r2, #31
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b41      	subs	r3, #65	; 0x41
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_ADC_ConfigChannel+0x29c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10a      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x1f4>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001de6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <HAL_ADC_ConfigChannel+0x29c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10f      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b12      	cmp	r3, #18
 8001df8:	d10b      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e04:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_ADC_ConfigChannel+0x29c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d12b      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x280>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_ADC_ConfigChannel+0x298>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d003      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x23a>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b11      	cmp	r3, #17
 8001e2c:	d122      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e38:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_ADC_ConfigChannel+0x298>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_ADC_ConfigChannel+0x2a8>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9a      	lsrs	r2, r3, #18
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f9      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	10000012 	.word	0x10000012
 8001e90:	40012000 	.word	0x40012000
 8001e94:	40012300 	.word	0x40012300
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	431bde83 	.word	0x431bde83

08001ea0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <ADC_Init+0x1ec>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a77      	ldr	r2, [pc, #476]	; (800208c <ADC_Init+0x1ec>)
 8001eae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001eb2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <ADC_Init+0x1ec>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4973      	ldr	r1, [pc, #460]	; (800208c <ADC_Init+0x1ec>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	021a      	lsls	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4a58      	ldr	r2, [pc, #352]	; (8002090 <ADC_Init+0x1f0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e00f      	b.n	8001f9a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0202 	bic.w	r2, r2, #2
 8001fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	005a      	lsls	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fe6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	035a      	lsls	r2, r3, #13
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e007      	b.n	8002010 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	3b01      	subs	r3, #1
 800202c:	051a      	lsls	r2, r3, #20
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002052:	025a      	lsls	r2, r3, #9
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	029a      	lsls	r2, r3, #10
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40012300 	.word	0x40012300
 8002090:	0f000001 	.word	0x0f000001

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	05fa0000 	.word	0x05fa0000

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fabc 	bl	8001840 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e099      	b.n	8002408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f4:	e00f      	b.n	8002316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f6:	f7ff faa3 	bl	8001840 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b05      	cmp	r3, #5
 8002302:	d908      	bls.n	8002316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2203      	movs	r2, #3
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e078      	b.n	8002408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e8      	bne.n	80022f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_DMA_Init+0x158>)
 8002330:	4013      	ands	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2b04      	cmp	r3, #4
 800236e:	d107      	bne.n	8002380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4313      	orrs	r3, r2
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0307 	bic.w	r3, r3, #7
 8002396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d117      	bne.n	80023da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fb09 	bl	80029d4 <DMA_CheckFifoParam>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023d6:	2301      	movs	r3, #1
 80023d8:	e016      	b.n	8002408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fac0 	bl	8002968 <DMA_CalcBaseAndBitshift>
 80023e8:	4603      	mov	r3, r0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	223f      	movs	r2, #63	; 0x3f
 80023f2:	409a      	lsls	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	f010803f 	.word	0xf010803f

08002414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_DMA_Start_IT+0x26>
 8002436:	2302      	movs	r3, #2
 8002438:	e048      	b.n	80024cc <HAL_DMA_Start_IT+0xb8>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d137      	bne.n	80024be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fa52 	bl	800290c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	223f      	movs	r2, #63	; 0x3f
 800246e:	409a      	lsls	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0216 	orr.w	r2, r2, #22
 8002482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002492:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e005      	b.n	80024ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff f9ad 	bl	8001840 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d008      	beq.n	8002506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e052      	b.n	80025ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_Abort+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002556:	e013      	b.n	8002580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002558:	f7ff f972 	bl	8001840 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d90c      	bls.n	8002580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e015      	b.n	80025ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e4      	bne.n	8002558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	223f      	movs	r2, #63	; 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00c      	b.n	80025ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002604:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_DMA_IRQHandler+0x248>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8e      	ldr	r2, [pc, #568]	; (8002844 <HAL_DMA_IRQHandler+0x24c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2208      	movs	r2, #8
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2208      	movs	r2, #8
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2201      	movs	r2, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2210      	movs	r2, #16
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03c      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2210      	movs	r2, #16
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e01f      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e016      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2220      	movs	r2, #32
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808f 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8087 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2220      	movs	r2, #32
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d136      	bne.n	8002810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0216 	bic.w	r2, r2, #22
 80027b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x1da>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0208 	bic.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	223f      	movs	r2, #63	; 0x3f
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d07e      	beq.n	8002904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
        }
        return;
 800280e:	e079      	b.n	8002904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01d      	beq.n	800285a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	2b00      	cmp	r3, #0
 8002832:	d031      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e02c      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
 800283e:	bf00      	nop
 8002840:	20000004 	.word	0x20000004
 8002844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e01e      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0210 	bic.w	r2, r2, #16
 8002876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	2b00      	cmp	r3, #0
 800289e:	d032      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2205      	movs	r2, #5
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3301      	adds	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d307      	bcc.n	80028e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f2      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x2cc>
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002904:	bf00      	nop
    }
  }
}
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d108      	bne.n	800294c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800294a:	e007      	b.n	800295c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3b10      	subs	r3, #16
 8002978:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <DMA_CalcBaseAndBitshift+0x60>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <DMA_CalcBaseAndBitshift+0x64>)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d908      	bls.n	80029a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <DMA_CalcBaseAndBitshift+0x68>)
 800299e:	4013      	ands	r3, r2
 80029a0:	1d1a      	adds	r2, r3, #4
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58
 80029a6:	e006      	b.n	80029b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	aaaaaaab 	.word	0xaaaaaaab
 80029cc:	08007250 	.word	0x08007250
 80029d0:	fffffc00 	.word	0xfffffc00

080029d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11f      	bne.n	8002a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d856      	bhi.n	8002aa2 <DMA_CheckFifoParam+0xce>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <DMA_CheckFifoParam+0x28>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a1f 	.word	0x08002a1f
 8002a04:	08002a0d 	.word	0x08002a0d
 8002a08:	08002aa3 	.word	0x08002aa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d046      	beq.n	8002aa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1c:	e043      	b.n	8002aa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a26:	d140      	bne.n	8002aaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2c:	e03d      	b.n	8002aaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	d121      	bne.n	8002a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d837      	bhi.n	8002aae <DMA_CheckFifoParam+0xda>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x70>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a5b 	.word	0x08002a5b
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002a6d 	.word	0x08002a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e030      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d025      	beq.n	8002ab2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6a:	e022      	b.n	8002ab2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a74:	d11f      	bne.n	8002ab6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7a:	e01c      	b.n	8002ab6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d903      	bls.n	8002a8a <DMA_CheckFifoParam+0xb6>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d003      	beq.n	8002a90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a88:	e018      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8e:	e015      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00e      	beq.n	8002aba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e00b      	b.n	8002aba <DMA_CheckFifoParam+0xe6>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e00a      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e008      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e006      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e004      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
    }
  } 
  
  return status; 
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e175      	b.n	8002dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8164 	bne.w	8002dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x56>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80be 	beq.w	8002dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d037      	beq.n	8002d0a <HAL_GPIO_Init+0x23e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_GPIO_Init+0x23a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02b      	beq.n	8002d02 <HAL_GPIO_Init+0x236>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a55      	ldr	r2, [pc, #340]	; (8002e04 <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x232>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x22e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_GPIO_Init+0x350>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002ce2:	2309      	movs	r3, #9
 8002ce4:	e012      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	e010      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cea:	2308      	movs	r3, #8
 8002cec:	e00e      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d1c:	4935      	ldr	r1, [pc, #212]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	f67f ae86 	bls.w	8002aec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40021400 	.word	0x40021400
 8002e10:	40021800 	.word	0x40021800
 8002e14:	40021c00 	.word	0x40021c00
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40022400 	.word	0x40022400
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e40:	e003      	b.n	8002e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe f9aa 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e006      	b.n	8002ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d104      	bne.n	8002ef2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_I2C_Init+0x11c>)
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69d9      	ldr	r1, [r3, #28]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	02008000 	.word	0x02008000

08002f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 80f9 	bne.w	8003192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_I2C_Mem_Write+0x34>
 8002fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ed      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Mem_Write+0x4e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0e6      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fce:	f7fe fc37 	bl	8001840 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f961 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d1      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003018:	88f8      	ldrh	r0, [r7, #6]
 800301a:	893a      	ldrh	r2, [r7, #8]
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4603      	mov	r3, r0
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8c5 	bl	80031b8 <I2C_RequestMemoryWrite>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0a9      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d90e      	bls.n	8003068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8979      	ldrh	r1, [r7, #10]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fabd 	bl	80035e0 <I2C_TransferConfig>
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	b2da      	uxtb	r2, r3
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 faac 	bl	80035e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f94b 	bl	8003328 <I2C_WaitOnTXISFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e07b      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d034      	beq.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d130      	bne.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8dd 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04d      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	d90e      	bls.n	8003120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	b2da      	uxtb	r2, r3
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fa61 	bl	80035e0 <I2C_TransferConfig>
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa50 	bl	80035e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d19e      	bne.n	8003088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f92a 	bl	80033a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01a      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_I2C_Mem_Write+0x224>)
 8003172:	400b      	ands	r3, r1
 8003174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	fe00e800 	.word	0xfe00e800

080031a0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <I2C_RequestMemoryWrite+0xa4>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f9fd 	bl	80035e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f89c 	bl	8003328 <I2C_WaitOnTXISFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02c      	b.n	8003254 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
 800320a:	e015      	b.n	8003238 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f882 	bl	8003328 <I2C_WaitOnTXISFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e012      	b.n	8003254 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2200      	movs	r2, #0
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f830 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	80002000 	.word	0x80002000

08003260 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d103      	bne.n	800327e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	619a      	str	r2, [r3, #24]
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b8:	e022      	b.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d01e      	beq.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe fabd 	bl	8001840 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e00f      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	429a      	cmp	r2, r3
 800331c:	d0cd      	beq.n	80032ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003334:	e02c      	b.n	8003390 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f870 	bl	8003420 <I2C_IsErrorOccurred>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e02a      	b.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d01e      	beq.n	8003390 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7fe fa75 	bl	8001840 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d1cb      	bne.n	8003336 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b4:	e028      	b.n	8003408 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f830 	bl	8003420 <I2C_IsErrorOccurred>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e026      	b.n	8003418 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe fa39 	bl	8001840 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d113      	bne.n	8003408 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b20      	cmp	r3, #32
 8003414:	d1cf      	bne.n	80033b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d068      	beq.n	800351e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2210      	movs	r2, #16
 8003452:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003454:	e049      	b.n	80034ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d045      	beq.n	80034ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe f9ef 	bl	8001840 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_IsErrorOccurred+0x54>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d13a      	bne.n	80034ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003486:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d121      	bne.n	80034dc <I2C_IsErrorOccurred+0xbc>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349e:	d01d      	beq.n	80034dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d01a      	beq.n	80034dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034b6:	f7fe f9c3 	bl	8001840 <HAL_GetTick>
 80034ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034bc:	e00e      	b.n	80034dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034be:	f7fe f9bf 	bl	8001840 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b19      	cmp	r3, #25
 80034ca:	d907      	bls.n	80034dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80034da:	e006      	b.n	80034ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d1e9      	bne.n	80034be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d003      	beq.n	8003500 <I2C_IsErrorOccurred+0xe0>
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0aa      	beq.n	8003456 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2220      	movs	r2, #32
 800350e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003562:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800358c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fe63 	bl	8003260 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <I2C_IsErrorOccurred+0x1bc>)
 80035a6:	400b      	ands	r3, r1
 80035a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3728      	adds	r7, #40	; 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	fe00e800 	.word	0xfe00e800

080035e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	4613      	mov	r3, r2
 80035f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035f8:	7a7b      	ldrb	r3, [r7, #9]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003600:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	4313      	orrs	r3, r2
 800360a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800360e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	0d5b      	lsrs	r3, r3, #21
 800361a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <I2C_TransferConfig+0x60>)
 8003620:	430b      	orrs	r3, r1
 8003622:	43db      	mvns	r3, r3
 8003624:	ea02 0103 	and.w	r1, r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	03ff63ff 	.word	0x03ff63ff

08003644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d138      	bne.n	80036cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003664:	2302      	movs	r3, #2
 8003666:	e032      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d139      	bne.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e033      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2224      	movs	r2, #36	; 0x24
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800372c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003774:	b08f      	sub	sp, #60	; 0x3c
 8003776:	af0a      	add	r7, sp, #40	; 0x28
 8003778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e116      	b.n	80039b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fdd8 	bl	8001354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2203      	movs	r2, #3
 80037a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 fd7a 	bl	80062bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	687e      	ldr	r6, [r7, #4]
 80037d0:	466d      	mov	r5, sp
 80037d2:	f106 0410 	add.w	r4, r6, #16
 80037d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e6:	1d33      	adds	r3, r6, #4
 80037e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f002 fd0e 	bl	800620c <USB_CoreInit>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0d7      	b.n	80039b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f002 fd68 	bl	80062de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e04a      	b.n	80038aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	333d      	adds	r3, #61	; 0x3d
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	333c      	adds	r3, #60	; 0x3c
 8003838:	7bfa      	ldrb	r2, [r7, #15]
 800383a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	b298      	uxth	r0, r3
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3344      	adds	r3, #68	; 0x44
 8003850:	4602      	mov	r2, r0
 8003852:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3340      	adds	r3, #64	; 0x40
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3348      	adds	r3, #72	; 0x48
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3354      	adds	r3, #84	; 0x54
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	3301      	adds	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3af      	bcc.n	8003814 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e044      	b.n	8003944 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	3301      	adds	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d3b5      	bcc.n	80038ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	687e      	ldr	r6, [r7, #4]
 8003956:	466d      	mov	r5, sp
 8003958:	f106 0410 	add.w	r4, r6, #16
 800395c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800395e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003964:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003968:	e885 0003 	stmia.w	r5, {r0, r1}
 800396c:	1d33      	adds	r3, r6, #4
 800396e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003970:	6838      	ldr	r0, [r7, #0]
 8003972:	f002 fd01 	bl	8006378 <USB_DevInit>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e014      	b.n	80039b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2b01      	cmp	r3, #1
 800399e:	d102      	bne.n	80039a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f80b 	bl	80039bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 febf 	bl	800672e <USB_DevDisconnect>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_PCDEx_ActivateLPM+0x44>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	10000003 	.word	0x10000003

08003a04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40007000 	.word	0x40007000

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e291      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8087 	beq.w	8003b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a48:	4b96      	ldr	r3, [pc, #600]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d00c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a54:	4b93      	ldr	r3, [pc, #588]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d112      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
 8003a60:	4b90      	ldr	r3, [pc, #576]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6c:	d10b      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x130>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d168      	bne.n	8003b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e26b      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x7a>
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e02e      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x9c>
 8003aa6:	4b7f      	ldr	r3, [pc, #508]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xc0>
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a72      	ldr	r2, [pc, #456]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a6e      	ldr	r2, [pc, #440]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6b      	ldr	r2, [pc, #428]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fe9c 	bl	8001840 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fe98 	bl	8001840 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e21f      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe8>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fe88 	bl	8001840 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fe84 	bl	8001840 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e20b      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b46:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x110>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d069      	beq.n	8003c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b62:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x190>
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1df      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	493d      	ldr	r1, [pc, #244]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	e040      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fe3a 	bl	8001840 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fe36 	bl	8001840 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1bd      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4929      	ldr	r1, [pc, #164]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	e018      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fe16 	bl	8001840 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fe12 	bl	8001840 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e199      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d038      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d019      	beq.n	8003c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd fdf3 	bl	8001840 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fdef 	bl	8001840 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e176      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x23a>
 8003c7c:	e01a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fdd9 	bl	8001840 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fd fdd5 	bl	8001840 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d903      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e15c      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
 8003ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a4 	beq.w	8003e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fd fd9d 	bl	8001840 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fd fd99 	bl	8001840 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e120      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x31a>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	e02d      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x33c>
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a66      	ldr	r2, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x35e>
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a5a      	ldr	r2, [pc, #360]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fd fd4d 	bl	8001840 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fd49 	bl	8001840 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0ce      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCC_OscConfig+0x386>
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd fd37 	bl	8001840 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd fd33 	bl	8001840 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a4 	beq.w	8003f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d06b      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d149      	bne.n	8003ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a30      	ldr	r2, [pc, #192]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fd04 	bl	8001840 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fd00 	bl	8001840 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e087      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd fcd4 	bl	8001840 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd fcd0 	bl	8001840 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e057      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x478>
 8003eba:	e04f      	b.n	8003f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fcba 	bl	8001840 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fcb6 	bl	8001840 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e03d      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4ac>
 8003eee:	e035      	b.n	8003f5c <HAL_RCC_OscConfig+0x538>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x544>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d028      	beq.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d121      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0d0      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d910      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 020f 	bic.w	r2, r3, #15
 8003f9a:	4965      	ldr	r1, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d040      	beq.n	8004090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d115      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e073      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e06b      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4936      	ldr	r1, [pc, #216]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fd fbee 	bl	8001840 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fd fbea 	bl	8001840 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e053      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d210      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 020f 	bic.w	r2, r3, #15
 80040a6:	4922      	ldr	r1, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1cc>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1d0>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1d4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd fb4a 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08007238 	.word	0x08007238
 800413c:	20000004 	.word	0x20000004
 8004140:	20000008 	.word	0x20000008

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b094      	sub	sp, #80	; 0x50
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	2300      	movs	r3, #0
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	2300      	movs	r3, #0
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80e1 	bhi.w	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e0db      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800417c:	e0db      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x208>)
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004182:	e0d8      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800418e:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
 80041b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f04f 0000 	mov.w	r0, #0
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	0159      	lsls	r1, r3, #5
 80041c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c8:	0150      	lsls	r0, r2, #5
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4621      	mov	r1, r4
 80041d0:	1a51      	subs	r1, r2, r1
 80041d2:	6139      	str	r1, [r7, #16]
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb63 0301 	sbc.w	r3, r3, r1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e8:	4659      	mov	r1, fp
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f2:	4651      	mov	r1, sl
 80041f4:	018a      	lsls	r2, r1, #6
 80041f6:	4651      	mov	r1, sl
 80041f8:	ebb2 0801 	subs.w	r8, r2, r1
 80041fc:	4659      	mov	r1, fp
 80041fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004216:	4690      	mov	r8, r2
 8004218:	4699      	mov	r9, r3
 800421a:	4623      	mov	r3, r4
 800421c:	eb18 0303 	adds.w	r3, r8, r3
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	462b      	mov	r3, r5
 8004224:	eb49 0303 	adc.w	r3, r9, r3
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004236:	4629      	mov	r1, r5
 8004238:	024b      	lsls	r3, r1, #9
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004240:	4621      	mov	r1, r4
 8004242:	024a      	lsls	r2, r1, #9
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
 800424e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004254:	f7fc f834 	bl	80002c0 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	e058      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	2200      	movs	r2, #0
 800426a:	4618      	mov	r0, r3
 800426c:	4611      	mov	r1, r2
 800426e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	0159      	lsls	r1, r3, #5
 800428a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428e:	0150      	lsls	r0, r2, #5
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4641      	mov	r1, r8
 8004296:	ebb2 0a01 	subs.w	sl, r2, r1
 800429a:	4649      	mov	r1, r9
 800429c:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b4:	ebb2 040a 	subs.w	r4, r2, sl
 80042b8:	eb63 050b 	sbc.w	r5, r3, fp
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	00eb      	lsls	r3, r5, #3
 80042c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ca:	00e2      	lsls	r2, r4, #3
 80042cc:	4614      	mov	r4, r2
 80042ce:	461d      	mov	r5, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	18e3      	adds	r3, r4, r3
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	464b      	mov	r3, r9
 80042d8:	eb45 0303 	adc.w	r3, r5, r3
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f4:	4621      	mov	r1, r4
 80042f6:	028a      	lsls	r2, r1, #10
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	61fa      	str	r2, [r7, #28]
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004308:	f7fb ffda 	bl	80002c0 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_GetSysClockFreq+0x200>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetSysClockFreq+0x204>)
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004338:	4618      	mov	r0, r3
 800433a:	3750      	adds	r7, #80	; 0x50
 800433c:	46bd      	mov	sp, r7
 800433e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000004 	.word	0x20000004

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	08007248 	.word	0x08007248

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffdc 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08007248 	.word	0x08007248

080043b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e0:	4b69      	ldr	r3, [pc, #420]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ea:	6093      	str	r3, [r2, #8]
 80043ec:	4b66      	ldr	r3, [pc, #408]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	4964      	ldr	r1, [pc, #400]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	4959      	ldr	r1, [pc, #356]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	494a      	ldr	r1, [pc, #296]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800447a:	2301      	movs	r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 808b 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449c:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6413      	str	r3, [r2, #64]	; 0x40
 80044a8:	4b37      	ldr	r3, [pc, #220]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a34      	ldr	r2, [pc, #208]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd f9be 	bl	8001840 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd f9ba 	bl	8001840 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e357      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e6:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d035      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d02e      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004504:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d114      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd f982 	bl	8001840 <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd f97e 	bl	8001840 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e319      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456e:	d111      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800457e:	400b      	ands	r3, r1
 8004580:	4901      	ldr	r1, [pc, #4]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	e00b      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	0ffffcff 	.word	0x0ffffcff
 8004594:	4baa      	ldr	r3, [pc, #680]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4aa9      	ldr	r2, [pc, #676]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	4ba7      	ldr	r3, [pc, #668]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ac:	49a4      	ldr	r1, [pc, #656]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045be:	4ba0      	ldr	r3, [pc, #640]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	4a9e      	ldr	r2, [pc, #632]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ce:	4b9c      	ldr	r3, [pc, #624]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	4999      	ldr	r1, [pc, #612]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ec:	4b94      	ldr	r3, [pc, #592]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fa:	4991      	ldr	r1, [pc, #580]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460e:	4b8c      	ldr	r3, [pc, #560]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461c:	4988      	ldr	r1, [pc, #544]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004630:	4b83      	ldr	r3, [pc, #524]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	4980      	ldr	r1, [pc, #512]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004652:	4b7b      	ldr	r3, [pc, #492]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4977      	ldr	r1, [pc, #476]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	496f      	ldr	r1, [pc, #444]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004696:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f023 020c 	bic.w	r2, r3, #12
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	4966      	ldr	r1, [pc, #408]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046b8:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	495e      	ldr	r1, [pc, #376]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046da:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	4955      	ldr	r1, [pc, #340]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	494d      	ldr	r1, [pc, #308]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	4944      	ldr	r1, [pc, #272]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004740:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	493c      	ldr	r1, [pc, #240]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	4933      	ldr	r1, [pc, #204]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004792:	492b      	ldr	r1, [pc, #172]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d011      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	4922      	ldr	r1, [pc, #136]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d101      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f4:	4912      	ldr	r1, [pc, #72]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	4909      	ldr	r1, [pc, #36]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d006      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80d9 	beq.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004834:	4b02      	ldr	r3, [pc, #8]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a01      	ldr	r2, [pc, #4]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800483e:	e001      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004840:	40023800 	.word	0x40023800
 8004844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004846:	f7fc fffb 	bl	8001840 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800484e:	f7fc fff7 	bl	8001840 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d901      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e194      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004860:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d021      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11d      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004880:	4b64      	ldr	r3, [pc, #400]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800488e:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004894:	0e1b      	lsrs	r3, r3, #24
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	019a      	lsls	r2, r3, #6
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	071b      	lsls	r3, r3, #28
 80048b4:	4957      	ldr	r1, [pc, #348]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d129      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048e8:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	0f1b      	lsrs	r3, r3, #28
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	019a      	lsls	r2, r3, #6
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	431a      	orrs	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	071b      	lsls	r3, r3, #28
 800491c:	493d      	ldr	r1, [pc, #244]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004924:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492a:	f023 021f 	bic.w	r2, r3, #31
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	3b01      	subs	r3, #1
 8004934:	4937      	ldr	r1, [pc, #220]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	0e1b      	lsrs	r3, r3, #24
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495c:	0f1b      	lsrs	r3, r3, #28
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	019a      	lsls	r2, r3, #6
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	431a      	orrs	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	431a      	orrs	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	071b      	lsls	r3, r3, #28
 800497c:	4925      	ldr	r1, [pc, #148]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d011      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	019a      	lsls	r2, r3, #6
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	071b      	lsls	r3, r3, #28
 80049ac:	4919      	ldr	r1, [pc, #100]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fc ff3e 	bl	8001840 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049c8:	f7fc ff3a 	bl	8001840 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0d7      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 80cd 	bne.w	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fc ff21 	bl	8001840 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a02:	f7fc ff1d 	bl	8001840 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d903      	bls.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0ba      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a18:	4b5e      	ldr	r3, [pc, #376]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a24:	d0ed      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d12a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a4e:	4b51      	ldr	r3, [pc, #324]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	0f1b      	lsrs	r3, r3, #28
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	061b      	lsls	r3, r3, #24
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	4944      	ldr	r1, [pc, #272]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a8a:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	493d      	ldr	r1, [pc, #244]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d022      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab8:	d11d      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	0e1b      	lsrs	r3, r3, #24
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	0f1b      	lsrs	r3, r3, #28
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	019a      	lsls	r2, r3, #6
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	4929      	ldr	r1, [pc, #164]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d028      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b10:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	4917      	ldr	r1, [pc, #92]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4911      	ldr	r1, [pc, #68]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b60:	f7fc fe6e 	bl	8001840 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b68:	f7fc fe6a 	bl	8001840 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e007      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b86:	d1ef      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800

08004b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bb6:	f040 808d 	bne.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004bba:	4b93      	ldr	r3, [pc, #588]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004bc8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd0:	d07c      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd8:	d87b      	bhi.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be6:	d039      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004be8:	e073      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bea:	4b87      	ldr	r3, [pc, #540]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bf6:	4b84      	ldr	r3, [pc, #528]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfe:	4a83      	ldr	r2, [pc, #524]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	e007      	b.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c08:	4b7f      	ldr	r3, [pc, #508]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	4a7f      	ldr	r2, [pc, #508]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004c18:	4b7b      	ldr	r3, [pc, #492]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	0e1b      	lsrs	r3, r3, #24
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004c26:	4b78      	ldr	r3, [pc, #480]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	fb03 f202 	mul.w	r2, r3, r2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004c40:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
        break;
 8004c5a:	e03b      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c5c:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d108      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c68:	4b67      	ldr	r3, [pc, #412]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c70:	4a66      	ldr	r2, [pc, #408]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e007      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c82:	4a63      	ldr	r2, [pc, #396]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	fb03 f202 	mul.w	r2, r3, r2
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004cb2:	4b55      	ldr	r3, [pc, #340]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
        break;
 8004cca:	e003      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ccc:	4b51      	ldr	r3, [pc, #324]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004cce:	617b      	str	r3, [r7, #20]
        break;
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004cd2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cda:	f040 808d 	bne.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004cde:	4b4a      	ldr	r3, [pc, #296]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf4:	d07c      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfc:	d87b      	bhi.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0a:	d039      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004d0c:	e073      	b.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d22:	4a3a      	ldr	r2, [pc, #232]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e007      	b.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d2c:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d34:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004d3c:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004d4a:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	fb03 f202 	mul.w	r2, r3, r2
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004d64:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
        break;
 8004d7e:	e03b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d80:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d108      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	e007      	b.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da6:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004dae:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	fb03 f202 	mul.w	r2, r3, r2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
        break;
 8004dee:	e003      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004df2:	617b      	str	r3, [r7, #20]
        break;
 8004df4:	e000      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8004df6:	bf00      	nop
      }
    }
  }

  return frequency;
 8004df8:	697b      	ldr	r3, [r7, #20]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	007a1200 	.word	0x007a1200
 8004e14:	00bb8000 	.word	0x00bb8000

08004e18 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e156      	b.n	80050e4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fafc 	bl	8001448 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc21 	bl	80056a0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d00c      	beq.n	8004e80 <HAL_SAI_Init+0x68>
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d80d      	bhi.n	8004e86 <HAL_SAI_Init+0x6e>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SAI_Init+0x5c>
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d003      	beq.n	8004e7a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004e72:	e008      	b.n	8004e86 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
      break;
 8004e78:	e006      	b.n	8004e88 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	61fb      	str	r3, [r7, #28]
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e80:	2320      	movs	r3, #32
 8004e82:	61fb      	str	r3, [r7, #28]
      break;
 8004e84:	e000      	b.n	8004e88 <HAL_SAI_Init+0x70>
      break;
 8004e86:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d81e      	bhi.n	8004ece <HAL_SAI_Init+0xb6>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_SAI_Init+0x80>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004eaf 	.word	0x08004eaf
 8004ea0:	08004eb7 	.word	0x08004eb7
 8004ea4:	08004ebf 	.word	0x08004ebf
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
    }
    break;
 8004eac:	e010      	b.n	8004ed0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	617b      	str	r3, [r7, #20]
    }
    break;
 8004eb4:	e00c      	b.n	8004ed0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eba:	617b      	str	r3, [r7, #20]
    }
    break;
 8004ebc:	e008      	b.n	8004ed0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ec2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004ece:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a85      	ldr	r2, [pc, #532]	; (80050ec <HAL_SAI_Init+0x2d4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_SAI_Init+0xcc>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a84      	ldr	r2, [pc, #528]	; (80050f0 <HAL_SAI_Init+0x2d8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004ee4:	4a83      	ldr	r2, [pc, #524]	; (80050f4 <HAL_SAI_Init+0x2dc>)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e002      	b.n	8004ef2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004eec:	4a82      	ldr	r2, [pc, #520]	; (80050f8 <HAL_SAI_Init+0x2e0>)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d04c      	beq.n	8004f94 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7a      	ldr	r2, [pc, #488]	; (80050ec <HAL_SAI_Init+0x2d4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_SAI_Init+0xfa>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a78      	ldr	r2, [pc, #480]	; (80050f0 <HAL_SAI_Init+0x2d8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d104      	bne.n	8004f1c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f16:	f7ff fe3f 	bl	8004b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f1a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a76      	ldr	r2, [pc, #472]	; (80050fc <HAL_SAI_Init+0x2e4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_SAI_Init+0x118>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a75      	ldr	r2, [pc, #468]	; (8005100 <HAL_SAI_Init+0x2e8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d104      	bne.n	8004f3a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004f30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004f34:	f7ff fe30 	bl	8004b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f38:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	461a      	mov	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	025b      	lsls	r3, r3, #9
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a6b      	ldr	r2, [pc, #428]	; (8005104 <HAL_SAI_Init+0x2ec>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	08da      	lsrs	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004f60:	68f9      	ldr	r1, [r7, #12]
 8004f62:	4b68      	ldr	r3, [pc, #416]	; (8005104 <HAL_SAI_Init+0x2ec>)
 8004f64:	fba3 2301 	umull	r2, r3, r3, r1
 8004f68:	08da      	lsrs	r2, r3, #3
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	1aca      	subs	r2, r1, r3
 8004f74:	2a08      	cmp	r2, #8
 8004f76:	d904      	bls.n	8004f82 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d104      	bne.n	8004f94 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	085a      	lsrs	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_SAI_Init+0x18c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d109      	bne.n	8004fb8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_SAI_Init+0x198>
 8004fac:	2300      	movs	r3, #0
 8004fae:	e001      	b.n	8004fb4 <HAL_SAI_Init+0x19c>
 8004fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	e008      	b.n	8004fca <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <HAL_SAI_Init+0x1ae>
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	e000      	b.n	8004fc8 <HAL_SAI_Init+0x1b0>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	; (8005108 <HAL_SAI_Init+0x2f0>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004fee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005002:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800500e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	051b      	lsls	r3, r3, #20
 8005016:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_SAI_Init+0x2f4>)
 800502c:	400b      	ands	r3, r1
 800502e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <HAL_SAI_Init+0x2f8>)
 800505a:	400b      	ands	r3, r1
 800505c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800506e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005074:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800507a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	3b01      	subs	r3, #1
 8005082:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005084:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68d9      	ldr	r1, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	f24f 0320 	movw	r3, #61472	; 0xf020
 800509c:	400b      	ands	r3, r1
 800509e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	3b01      	subs	r3, #1
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40015804 	.word	0x40015804
 80050f0:	40015824 	.word	0x40015824
 80050f4:	40015800 	.word	0x40015800
 80050f8:	40015c00 	.word	0x40015c00
 80050fc:	40015c04 	.word	0x40015c04
 8005100:	40015c24 	.word	0x40015c24
 8005104:	cccccccd 	.word	0xcccccccd
 8005108:	ff05c010 	.word	0xff05c010
 800510c:	ffff1ff0 	.word	0xffff1ff0
 8005110:	fff88000 	.word	0xfff88000

08005114 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SAI_Abort+0x1a>
 800512a:	2302      	movs	r3, #2
 800512c:	e072      	b.n	8005214 <HAL_SAI_Abort+0x100>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005144:	d149      	bne.n	80051da <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005154:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01c      	beq.n	8005198 <HAL_SAI_Abort+0x84>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b12      	cmp	r3, #18
 8005168:	d116      	bne.n	8005198 <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd f9b0 	bl	80024d4 <HAL_DMA_Abort>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00e      	beq.n	8005198 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d009      	beq.n	8005198 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800518e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01c      	beq.n	80051da <HAL_SAI_Abort+0xc6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b22      	cmp	r3, #34	; 0x22
 80051aa:	d116      	bne.n	80051da <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fd f98f 	bl	80024d4 <HAL_DMA_Abort>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d009      	beq.n	80051da <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa57 	bl	80056a0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0208 	orr.w	r2, r2, #8
 8005200:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800522a:	f7fc fb09 	bl	8001840 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_SAI_Transmit_DMA+0x20>
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e093      	b.n	8005368 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	f040 808c 	bne.w	8005366 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_SAI_Transmit_DMA+0x40>
 8005258:	2302      	movs	r3, #2
 800525a:	e085      	b.n	8005368 <HAL_SAI_Transmit_DMA+0x14c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2212      	movs	r2, #18
 8005286:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	4a38      	ldr	r2, [pc, #224]	; (8005370 <HAL_SAI_Transmit_DMA+0x154>)
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <HAL_SAI_Transmit_DMA+0x158>)
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529e:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_SAI_Transmit_DMA+0x15c>)
 80052a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a6:	2200      	movs	r2, #0
 80052a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b2:	4619      	mov	r1, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	331c      	adds	r3, #28
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052c2:	f7fd f8a7 	bl	8002414 <HAL_DMA_Start_IT>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e047      	b.n	8005368 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80052d8:	2100      	movs	r1, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f9aa 	bl	8005634 <SAI_InterruptFlag>
 80052e0:	4601      	mov	r1, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052fe:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005300:	e015      	b.n	800532e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005302:	f7fc fa9d 	bl	8001840 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005310:	d90d      	bls.n	800532e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005318:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e01c      	b.n	8005368 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0e2      	beq.n	8005302 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005358:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08005771 	.word	0x08005771
 8005374:	08005711 	.word	0x08005711
 8005378:	0800578d 	.word	0x0800578d

0800537c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8137 	beq.w	8005600 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <HAL_SAI_IRQHandler+0x4c>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
 80053c6:	e11b      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01e      	beq.n	8005410 <HAL_SAI_IRQHandler+0x94>
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d019      	beq.n	8005410 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b22      	cmp	r3, #34	; 0x22
 80053ee:	d101      	bne.n	80053f4 <HAL_SAI_IRQHandler+0x78>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_SAI_IRQHandler+0x7a>
 80053f4:	2302      	movs	r3, #2
 80053f6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f909 	bl	8005620 <HAL_SAI_ErrorCallback>
 800540e:	e0f7      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <HAL_SAI_IRQHandler+0xc2>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2202      	movs	r2, #2
 800542a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80e5 	beq.w	8005600 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 800543c:	e0e0      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d039      	beq.n	80054bc <HAL_SAI_IRQHandler+0x140>
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d034      	beq.n	80054bc <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2220      	movs	r2, #32
 8005458:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005460:	f043 0204 	orr.w	r2, r3, #4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01c      	beq.n	80054ae <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005480:	4a61      	ldr	r2, [pc, #388]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 8005482:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005488:	4618      	mov	r0, r3
 800548a:	f7fd f893 	bl	80025b4 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800548e:	e0b4      	b.n	80055fa <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80b0 	beq.w	80055fa <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5a      	ldr	r2, [pc, #360]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd f884 	bl	80025b4 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ac:	e0a5      	b.n	80055fa <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fe30 	bl	8005114 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8b3 	bl	8005620 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ba:	e09e      	b.n	80055fa <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d038      	beq.n	8005538 <HAL_SAI_IRQHandler+0x1bc>
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d033      	beq.n	8005538 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2240      	movs	r2, #64	; 0x40
 80054d6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	f043 0208 	orr.w	r2, r3, #8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fe:	4a42      	ldr	r2, [pc, #264]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	4618      	mov	r0, r3
 8005508:	f7fd f854 	bl	80025b4 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800550c:	e077      	b.n	80055fe <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	2b00      	cmp	r3, #0
 8005514:	d073      	beq.n	80055fe <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 800551c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	4618      	mov	r0, r3
 8005524:	f7fd f846 	bl	80025b4 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005528:	e069      	b.n	80055fe <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fdf2 	bl	8005114 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f875 	bl	8005620 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005536:	e062      	b.n	80055fe <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d041      	beq.n	80055c6 <HAL_SAI_IRQHandler+0x24a>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d03c      	beq.n	80055c6 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2204      	movs	r2, #4
 8005552:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 8005572:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005578:	4618      	mov	r0, r3
 800557a:	f7fd f81b 	bl	80025b4 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800557e:	e03f      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <HAL_SAI_IRQHandler+0x28c>)
 800558e:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4618      	mov	r0, r3
 8005596:	f7fd f80d 	bl	80025b4 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800559a:	e031      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f82e 	bl	8005620 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 80055c4:	e01c      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_SAI_IRQHandler+0x284>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2210      	movs	r2, #16
 80055e0:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e8:	f043 0210 	orr.w	r2, r3, #16
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f814 	bl	8005620 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80055f8:	e002      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055fe:	bf00      	nop
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	080057f3 	.word	0x080057f3

0800560c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800563e:	2301      	movs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d103      	bne.n	8005650 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f043 0308 	orr.w	r3, r3, #8
 800564e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10b      	bne.n	8005670 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800565c:	2b03      	cmp	r3, #3
 800565e:	d003      	beq.n	8005668 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d103      	bne.n	8005670 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f043 0310 	orr.w	r3, r3, #16
 800566e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d003      	beq.n	8005680 <SAI_InterruptFlag+0x4c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d104      	bne.n	800568a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e003      	b.n	8005692 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f043 0304 	orr.w	r3, r3, #4
 8005690:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80056a8:	4b17      	ldr	r3, [pc, #92]	; (8005708 <SAI_Disable+0x68>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <SAI_Disable+0x6c>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0b1b      	lsrs	r3, r3, #12
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	60fa      	str	r2, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	72fb      	strb	r3, [r7, #11]
      break;
 80056ea:	e006      	b.n	80056fa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e8      	bne.n	80056cc <SAI_Disable+0x2c>

  return status;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20000004 	.word	0x20000004
 800570c:	95cbec1b 	.word	0x95cbec1b

08005710 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d01c      	beq.n	8005762 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800573e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005740:	2100      	movs	r1, #0
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff ff76 	bl	8005634 <SAI_InterruptFlag>
 8005748:	4603      	mov	r3, r0
 800574a:	43d9      	mvns	r1, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	400a      	ands	r2, r1
 8005758:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7fa ff5c 	bl	8000620 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ff44 	bl	800560c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d004      	beq.n	80057be <SAI_DMAError+0x32>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d112      	bne.n	80057e4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80057cc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ff66 	bl	80056a0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff ff1b 	bl	8005620 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800580e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005828:	2b20      	cmp	r3, #32
 800582a:	d00a      	beq.n	8005842 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff ff37 	bl	80056a0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0208 	orr.w	r2, r2, #8
 8005840:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fee4 	bl	8005620 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e040      	b.n	80058f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fd06 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	; 0x24
 800588c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8b0 	bl	8005a04 <UART_SetConfig>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e022      	b.n	80058f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fb08 	bl	8005ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fb8f 	bl	8006010 <UART_CheckIdleState>
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005910:	2b20      	cmp	r3, #32
 8005912:	d171      	bne.n	80059f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_UART_Transmit+0x24>
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e06a      	b.n	80059fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2221      	movs	r2, #33	; 0x21
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005932:	f7fb ff85 	bl	8001840 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d108      	bne.n	8005964 <HAL_UART_Transmit+0x68>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800596c:	e02c      	b.n	80059c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb80 	bl	800607e <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e038      	b.n	80059fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3302      	adds	r3, #2
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e007      	b.n	80059b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1cc      	bne.n	800596e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2200      	movs	r2, #0
 80059dc:	2140      	movs	r1, #64	; 0x40
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fb4d 	bl	800607e <UART_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e005      	b.n	80059fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4ba6      	ldr	r3, [pc, #664]	; (8005cc8 <UART_SetConfig+0x2c4>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a94      	ldr	r2, [pc, #592]	; (8005ccc <UART_SetConfig+0x2c8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d120      	bne.n	8005ac2 <UART_SetConfig+0xbe>
 8005a80:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d816      	bhi.n	8005abc <UART_SetConfig+0xb8>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x90>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005aab 	.word	0x08005aab
 8005aa0:	08005ab7 	.word	0x08005ab7
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e150      	b.n	8005d4c <UART_SetConfig+0x348>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e14d      	b.n	8005d4c <UART_SetConfig+0x348>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e14a      	b.n	8005d4c <UART_SetConfig+0x348>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e147      	b.n	8005d4c <UART_SetConfig+0x348>
 8005abc:	2310      	movs	r3, #16
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e144      	b.n	8005d4c <UART_SetConfig+0x348>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a83      	ldr	r2, [pc, #524]	; (8005cd4 <UART_SetConfig+0x2d0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d132      	bne.n	8005b32 <UART_SetConfig+0x12e>
 8005acc:	4b80      	ldr	r3, [pc, #512]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d828      	bhi.n	8005b2c <UART_SetConfig+0x128>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0xdc>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b2d 	.word	0x08005b2d
 8005ae8:	08005b2d 	.word	0x08005b2d
 8005aec:	08005b2d 	.word	0x08005b2d
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b1b 	.word	0x08005b1b
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b27 	.word	0x08005b27
 8005b14:	2300      	movs	r3, #0
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e118      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e115      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b20:	2304      	movs	r3, #4
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e112      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b26:	2308      	movs	r3, #8
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e10f      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e10c      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d120      	bne.n	8005b7e <UART_SetConfig+0x17a>
 8005b3c:	4b64      	ldr	r3, [pc, #400]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d013      	beq.n	8005b72 <UART_SetConfig+0x16e>
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d814      	bhi.n	8005b78 <UART_SetConfig+0x174>
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d009      	beq.n	8005b66 <UART_SetConfig+0x162>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d810      	bhi.n	8005b78 <UART_SetConfig+0x174>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x15c>
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d006      	beq.n	8005b6c <UART_SetConfig+0x168>
 8005b5e:	e00b      	b.n	8005b78 <UART_SetConfig+0x174>
 8005b60:	2300      	movs	r3, #0
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e0f2      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b66:	2302      	movs	r3, #2
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e0ef      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e0ec      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b72:	2308      	movs	r3, #8
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e0e9      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e0e6      	b.n	8005d4c <UART_SetConfig+0x348>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a56      	ldr	r2, [pc, #344]	; (8005cdc <UART_SetConfig+0x2d8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d120      	bne.n	8005bca <UART_SetConfig+0x1c6>
 8005b88:	4b51      	ldr	r3, [pc, #324]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b92:	2bc0      	cmp	r3, #192	; 0xc0
 8005b94:	d013      	beq.n	8005bbe <UART_SetConfig+0x1ba>
 8005b96:	2bc0      	cmp	r3, #192	; 0xc0
 8005b98:	d814      	bhi.n	8005bc4 <UART_SetConfig+0x1c0>
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d009      	beq.n	8005bb2 <UART_SetConfig+0x1ae>
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d810      	bhi.n	8005bc4 <UART_SetConfig+0x1c0>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <UART_SetConfig+0x1a8>
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d006      	beq.n	8005bb8 <UART_SetConfig+0x1b4>
 8005baa:	e00b      	b.n	8005bc4 <UART_SetConfig+0x1c0>
 8005bac:	2300      	movs	r3, #0
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0cc      	b.n	8005d4c <UART_SetConfig+0x348>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e0c9      	b.n	8005d4c <UART_SetConfig+0x348>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e0c6      	b.n	8005d4c <UART_SetConfig+0x348>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e0c3      	b.n	8005d4c <UART_SetConfig+0x348>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e0c0      	b.n	8005d4c <UART_SetConfig+0x348>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a44      	ldr	r2, [pc, #272]	; (8005ce0 <UART_SetConfig+0x2dc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d125      	bne.n	8005c20 <UART_SetConfig+0x21c>
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be2:	d017      	beq.n	8005c14 <UART_SetConfig+0x210>
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d817      	bhi.n	8005c1a <UART_SetConfig+0x216>
 8005bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bee:	d00b      	beq.n	8005c08 <UART_SetConfig+0x204>
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf4:	d811      	bhi.n	8005c1a <UART_SetConfig+0x216>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <UART_SetConfig+0x1fe>
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d006      	beq.n	8005c0e <UART_SetConfig+0x20a>
 8005c00:	e00b      	b.n	8005c1a <UART_SetConfig+0x216>
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e0a1      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e09e      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e09b      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c14:	2308      	movs	r3, #8
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e098      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e095      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <UART_SetConfig+0x2e0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d125      	bne.n	8005c76 <UART_SetConfig+0x272>
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c38:	d017      	beq.n	8005c6a <UART_SetConfig+0x266>
 8005c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c3e:	d817      	bhi.n	8005c70 <UART_SetConfig+0x26c>
 8005c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c44:	d00b      	beq.n	8005c5e <UART_SetConfig+0x25a>
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d811      	bhi.n	8005c70 <UART_SetConfig+0x26c>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <UART_SetConfig+0x254>
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d006      	beq.n	8005c64 <UART_SetConfig+0x260>
 8005c56:	e00b      	b.n	8005c70 <UART_SetConfig+0x26c>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e076      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e073      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c64:	2304      	movs	r3, #4
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e070      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e06d      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c70:	2310      	movs	r3, #16
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e06a      	b.n	8005d4c <UART_SetConfig+0x348>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <UART_SetConfig+0x2e4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d138      	bne.n	8005cf2 <UART_SetConfig+0x2ee>
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c8e:	d017      	beq.n	8005cc0 <UART_SetConfig+0x2bc>
 8005c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c94:	d82a      	bhi.n	8005cec <UART_SetConfig+0x2e8>
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d00b      	beq.n	8005cb4 <UART_SetConfig+0x2b0>
 8005c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca0:	d824      	bhi.n	8005cec <UART_SetConfig+0x2e8>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <UART_SetConfig+0x2aa>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d006      	beq.n	8005cba <UART_SetConfig+0x2b6>
 8005cac:	e01e      	b.n	8005cec <UART_SetConfig+0x2e8>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e04b      	b.n	8005d4c <UART_SetConfig+0x348>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e048      	b.n	8005d4c <UART_SetConfig+0x348>
 8005cba:	2304      	movs	r3, #4
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e045      	b.n	8005d4c <UART_SetConfig+0x348>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e042      	b.n	8005d4c <UART_SetConfig+0x348>
 8005cc6:	bf00      	nop
 8005cc8:	efff69f3 	.word	0xefff69f3
 8005ccc:	40011000 	.word	0x40011000
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	40004400 	.word	0x40004400
 8005cd8:	40004800 	.word	0x40004800
 8005cdc:	40004c00 	.word	0x40004c00
 8005ce0:	40005000 	.word	0x40005000
 8005ce4:	40011400 	.word	0x40011400
 8005ce8:	40007800 	.word	0x40007800
 8005cec:	2310      	movs	r3, #16
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e02c      	b.n	8005d4c <UART_SetConfig+0x348>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a72      	ldr	r2, [pc, #456]	; (8005ec0 <UART_SetConfig+0x4bc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d125      	bne.n	8005d48 <UART_SetConfig+0x344>
 8005cfc:	4b71      	ldr	r3, [pc, #452]	; (8005ec4 <UART_SetConfig+0x4c0>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d0a:	d017      	beq.n	8005d3c <UART_SetConfig+0x338>
 8005d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d10:	d817      	bhi.n	8005d42 <UART_SetConfig+0x33e>
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d16:	d00b      	beq.n	8005d30 <UART_SetConfig+0x32c>
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	d811      	bhi.n	8005d42 <UART_SetConfig+0x33e>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <UART_SetConfig+0x326>
 8005d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d26:	d006      	beq.n	8005d36 <UART_SetConfig+0x332>
 8005d28:	e00b      	b.n	8005d42 <UART_SetConfig+0x33e>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e00d      	b.n	8005d4c <UART_SetConfig+0x348>
 8005d30:	2302      	movs	r3, #2
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e00a      	b.n	8005d4c <UART_SetConfig+0x348>
 8005d36:	2304      	movs	r3, #4
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e007      	b.n	8005d4c <UART_SetConfig+0x348>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e004      	b.n	8005d4c <UART_SetConfig+0x348>
 8005d42:	2310      	movs	r3, #16
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e001      	b.n	8005d4c <UART_SetConfig+0x348>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	d15b      	bne.n	8005e0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d828      	bhi.n	8005dae <UART_SetConfig+0x3aa>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0x360>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08005d91 	.word	0x08005d91
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08005daf 	.word	0x08005daf
 8005d74:	08005d9f 	.word	0x08005d9f
 8005d78:	08005daf 	.word	0x08005daf
 8005d7c:	08005daf 	.word	0x08005daf
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	08005da7 	.word	0x08005da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fe faee 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005d8c:	61b8      	str	r0, [r7, #24]
        break;
 8005d8e:	e013      	b.n	8005db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d90:	f7fe fafe 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005d94:	61b8      	str	r0, [r7, #24]
        break;
 8005d96:	e00f      	b.n	8005db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d98:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <UART_SetConfig+0x4c4>)
 8005d9a:	61bb      	str	r3, [r7, #24]
        break;
 8005d9c:	e00c      	b.n	8005db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7fe f9d1 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005da2:	61b8      	str	r0, [r7, #24]
        break;
 8005da4:	e008      	b.n	8005db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005daa:	61bb      	str	r3, [r7, #24]
        break;
 8005dac:	e004      	b.n	8005db8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	77bb      	strb	r3, [r7, #30]
        break;
 8005db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d074      	beq.n	8005ea8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	005a      	lsls	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d916      	bls.n	8005e08 <UART_SetConfig+0x404>
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d212      	bcs.n	8005e08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f023 030f 	bic.w	r3, r3, #15
 8005dea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	89fb      	ldrh	r3, [r7, #14]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	89fa      	ldrh	r2, [r7, #14]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	e04f      	b.n	8005ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77bb      	strb	r3, [r7, #30]
 8005e0c:	e04c      	b.n	8005ea8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e0e:	7ffb      	ldrb	r3, [r7, #31]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d828      	bhi.n	8005e66 <UART_SetConfig+0x462>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x418>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e67 	.word	0x08005e67
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fa92 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005e44:	61b8      	str	r0, [r7, #24]
        break;
 8005e46:	e013      	b.n	8005e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7fe faa2 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	61b8      	str	r0, [r7, #24]
        break;
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <UART_SetConfig+0x4c4>)
 8005e52:	61bb      	str	r3, [r7, #24]
        break;
 8005e54:	e00c      	b.n	8005e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe f975 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005e5a:	61b8      	str	r0, [r7, #24]
        break;
 8005e5c:	e008      	b.n	8005e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61bb      	str	r3, [r7, #24]
        break;
 8005e64:	e004      	b.n	8005e70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d018      	beq.n	8005ea8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	085a      	lsrs	r2, r3, #1
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	441a      	add	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d909      	bls.n	8005ea4 <UART_SetConfig+0x4a0>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e96:	d205      	bcs.n	8005ea4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	e001      	b.n	8005ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40007c00 	.word	0x40007c00
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00f42400 	.word	0x00f42400

08005ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fca:	d10a      	bne.n	8005fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af02      	add	r7, sp, #8
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006020:	f7fb fc0e 	bl	8001840 <HAL_GetTick>
 8006024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b08      	cmp	r3, #8
 8006032:	d10e      	bne.n	8006052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f81b 	bl	800607e <UART_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e011      	b.n	8006076 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b09c      	sub	sp, #112	; 0x70
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608e:	e0a7      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	f000 80a3 	beq.w	80061e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fb fbd1 	bl	8001840 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d13f      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060c4:	667b      	str	r3, [r7, #100]	; 0x64
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	663b      	str	r3, [r7, #96]	; 0x60
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006102:	64ba      	str	r2, [r7, #72]	; 0x48
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e068      	b.n	8006202 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d050      	beq.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800614c:	d148      	bne.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006156:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800616c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800617c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061aa:	623a      	str	r2, [r7, #32]
 80061ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	69f9      	ldr	r1, [r7, #28]
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e010      	b.n	8006202 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4013      	ands	r3, r2
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	bf0c      	ite	eq
 80061f0:	2301      	moveq	r3, #1
 80061f2:	2300      	movne	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	f43f af48 	beq.w	8006090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3770      	adds	r7, #112	; 0x70
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800620c:	b084      	sub	sp, #16
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	f107 001c 	add.w	r0, r7, #28
 800621a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2b01      	cmp	r3, #1
 8006222:	d120      	bne.n	8006266 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <USB_CoreInit+0xac>)
 8006236:	4013      	ands	r3, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa96 	bl	800678c <USB_CoreReset>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e010      	b.n	8006288 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fa8a 	bl	800678c <USB_CoreReset>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10b      	bne.n	80062a6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f043 0206 	orr.w	r2, r3, #6
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062b2:	b004      	add	sp, #16
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	ffbdffbf 	.word	0xffbdffbf

080062bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f023 0201 	bic.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d115      	bne.n	800632c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800630c:	2001      	movs	r0, #1
 800630e:	f7fb faa3 	bl	8001858 <HAL_Delay>
      ms++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa29 	bl	8006770 <USB_GetMode>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d01e      	beq.n	8006362 <USB_SetCurrentMode+0x84>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b31      	cmp	r3, #49	; 0x31
 8006328:	d9f0      	bls.n	800630c <USB_SetCurrentMode+0x2e>
 800632a:	e01a      	b.n	8006362 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d115      	bne.n	800635e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800633e:	2001      	movs	r0, #1
 8006340:	f7fb fa8a 	bl	8001858 <HAL_Delay>
      ms++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa10 	bl	8006770 <USB_GetMode>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <USB_SetCurrentMode+0x84>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b31      	cmp	r3, #49	; 0x31
 800635a:	d9f0      	bls.n	800633e <USB_SetCurrentMode+0x60>
 800635c:	e001      	b.n	8006362 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e005      	b.n	800636e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b32      	cmp	r3, #50	; 0x32
 8006366:	d101      	bne.n	800636c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006378:	b084      	sub	sp, #16
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	e009      	b.n	80063ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3340      	adds	r3, #64	; 0x40
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3301      	adds	r3, #1
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b0e      	cmp	r3, #14
 80063b0:	d9f2      	bls.n	8006398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11c      	bne.n	80063f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e005      	b.n	80063fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	4619      	mov	r1, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	461a      	mov	r2, r3
 800641a:	680b      	ldr	r3, [r1, #0]
 800641c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	2b01      	cmp	r3, #1
 8006422:	d10c      	bne.n	800643e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800642a:	2100      	movs	r1, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f965 	bl	80066fc <USB_SetDevSpeed>
 8006432:	e008      	b.n	8006446 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006434:	2101      	movs	r1, #1
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f960 	bl	80066fc <USB_SetDevSpeed>
 800643c:	e003      	b.n	8006446 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800643e:	2103      	movs	r1, #3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f95b 	bl	80066fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006446:	2110      	movs	r1, #16
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f8f3 	bl	8006634 <USB_FlushTxFifo>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f91f 	bl	800669c <USB_FlushRxFifo>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	461a      	mov	r2, r3
 8006470:	2300      	movs	r3, #0
 8006472:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647a:	461a      	mov	r2, r3
 800647c:	2300      	movs	r3, #0
 800647e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e043      	b.n	800651a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a8:	d118      	bne.n	80064dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	461a      	mov	r2, r3
 80064be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e013      	b.n	80064ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e008      	b.n	80064ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	461a      	mov	r2, r3
 80064ea:	2300      	movs	r3, #0
 80064ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	461a      	mov	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	461a      	mov	r2, r3
 800650e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3301      	adds	r3, #1
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	d3b7      	bcc.n	8006492 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	e043      	b.n	80065b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653e:	d118      	bne.n	8006572 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	461a      	mov	r2, r3
 8006554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e013      	b.n	8006584 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e008      	b.n	8006584 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	461a      	mov	r2, r3
 8006580:	2300      	movs	r3, #0
 8006582:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	461a      	mov	r2, r3
 80065a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3301      	adds	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3b7      	bcc.n	8006528 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f043 0210 	orr.w	r2, r3, #16
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <USB_DevInit+0x2b4>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f043 0208 	orr.w	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <USB_DevInit+0x2b8>)
 8006616:	4313      	orrs	r3, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr
 800662c:	803c3800 	.word	0x803c3800
 8006630:	40000004 	.word	0x40000004

08006634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a13      	ldr	r2, [pc, #76]	; (8006698 <USB_FlushTxFifo+0x64>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e01b      	b.n	800668c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	daf2      	bge.n	8006642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	019b      	lsls	r3, r3, #6
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a08      	ldr	r2, [pc, #32]	; (8006698 <USB_FlushTxFifo+0x64>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e006      	b.n	800668c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d0f0      	beq.n	800666c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	00030d40 	.word	0x00030d40

0800669c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <USB_FlushRxFifo+0x5c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e018      	b.n	80066ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	daf2      	bge.n	80066a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2210      	movs	r2, #16
 80066ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <USB_FlushRxFifo+0x5c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e006      	b.n	80066ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d0f0      	beq.n	80066cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	00030d40 	.word	0x00030d40

080066fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800671c:	4313      	orrs	r3, r2
 800671e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006748:	f023 0303 	bic.w	r3, r3, #3
 800674c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675c:	f043 0302 	orr.w	r3, r3, #2
 8006760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0301 	and.w	r3, r3, #1
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <USB_CoreReset+0x64>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e01b      	b.n	80067e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	daf2      	bge.n	8006798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <USB_CoreReset+0x64>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e006      	b.n	80067e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d0f0      	beq.n	80067c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	00030d40 	.word	0x00030d40

080067f4 <siprintf>:
 80067f4:	b40e      	push	{r1, r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b09c      	sub	sp, #112	; 0x70
 80067fa:	ab1d      	add	r3, sp, #116	; 0x74
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	9006      	str	r0, [sp, #24]
 8006800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <siprintf+0x38>)
 8006806:	9107      	str	r1, [sp, #28]
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	4909      	ldr	r1, [pc, #36]	; (8006830 <siprintf+0x3c>)
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	6800      	ldr	r0, [r0, #0]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	a902      	add	r1, sp, #8
 8006818:	f000 f992 	bl	8006b40 <_svfiprintf_r>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	b01c      	add	sp, #112	; 0x70
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	2000005c 	.word	0x2000005c
 8006830:	ffff0208 	.word	0xffff0208

08006834 <memset>:
 8006834:	4402      	add	r2, r0
 8006836:	4603      	mov	r3, r0
 8006838:	4293      	cmp	r3, r2
 800683a:	d100      	bne.n	800683e <memset+0xa>
 800683c:	4770      	bx	lr
 800683e:	f803 1b01 	strb.w	r1, [r3], #1
 8006842:	e7f9      	b.n	8006838 <memset+0x4>

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2000005c 	.word	0x2000005c

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 fc6a 	bl	800713c <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08007294 	.word	0x08007294
 800688c:	08007294 	.word	0x08007294
 8006890:	08007294 	.word	0x08007294
 8006894:	08007298 	.word	0x08007298

08006898 <__retarget_lock_acquire_recursive>:
 8006898:	4770      	bx	lr

0800689a <__retarget_lock_release_recursive>:
 800689a:	4770      	bx	lr

0800689c <_free_r>:
 800689c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800689e:	2900      	cmp	r1, #0
 80068a0:	d044      	beq.n	800692c <_free_r+0x90>
 80068a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f1a1 0404 	sub.w	r4, r1, #4
 80068ae:	bfb8      	it	lt
 80068b0:	18e4      	addlt	r4, r4, r3
 80068b2:	f000 f8df 	bl	8006a74 <__malloc_lock>
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <_free_r+0x94>)
 80068b8:	9801      	ldr	r0, [sp, #4]
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	b933      	cbnz	r3, 80068cc <_free_r+0x30>
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6014      	str	r4, [r2, #0]
 80068c2:	b003      	add	sp, #12
 80068c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c8:	f000 b8da 	b.w	8006a80 <__malloc_unlock>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x46>
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	1961      	adds	r1, r4, r5
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1949      	addeq	r1, r1, r5
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	e7ed      	b.n	80068be <_free_r+0x22>
 80068e2:	461a      	mov	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <_free_r+0x50>
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d9fa      	bls.n	80068e2 <_free_r+0x46>
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	1855      	adds	r5, r2, r1
 80068f0:	42a5      	cmp	r5, r4
 80068f2:	d10b      	bne.n	800690c <_free_r+0x70>
 80068f4:	6824      	ldr	r4, [r4, #0]
 80068f6:	4421      	add	r1, r4
 80068f8:	1854      	adds	r4, r2, r1
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	d1e0      	bne.n	80068c2 <_free_r+0x26>
 8006900:	681c      	ldr	r4, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	6053      	str	r3, [r2, #4]
 8006906:	440c      	add	r4, r1
 8006908:	6014      	str	r4, [r2, #0]
 800690a:	e7da      	b.n	80068c2 <_free_r+0x26>
 800690c:	d902      	bls.n	8006914 <_free_r+0x78>
 800690e:	230c      	movs	r3, #12
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	e7d6      	b.n	80068c2 <_free_r+0x26>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf04      	itt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	6063      	str	r3, [r4, #4]
 8006922:	bf04      	itt	eq
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	6054      	str	r4, [r2, #4]
 800692a:	e7ca      	b.n	80068c2 <_free_r+0x26>
 800692c:	b003      	add	sp, #12
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	20000bb8 	.word	0x20000bb8

08006934 <sbrk_aligned>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4e0e      	ldr	r6, [pc, #56]	; (8006970 <sbrk_aligned+0x3c>)
 8006938:	460c      	mov	r4, r1
 800693a:	6831      	ldr	r1, [r6, #0]
 800693c:	4605      	mov	r5, r0
 800693e:	b911      	cbnz	r1, 8006946 <sbrk_aligned+0x12>
 8006940:	f000 fba6 	bl	8007090 <_sbrk_r>
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 fba1 	bl	8007090 <_sbrk_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d00a      	beq.n	8006968 <sbrk_aligned+0x34>
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d007      	beq.n	800696c <sbrk_aligned+0x38>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fb96 	bl	8007090 <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d101      	bne.n	800696c <sbrk_aligned+0x38>
 8006968:	f04f 34ff 	mov.w	r4, #4294967295
 800696c:	4620      	mov	r0, r4
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	20000bbc 	.word	0x20000bbc

08006974 <_malloc_r>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	1ccd      	adds	r5, r1, #3
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	2d00      	cmp	r5, #0
 8006988:	4607      	mov	r7, r0
 800698a:	db01      	blt.n	8006990 <_malloc_r+0x1c>
 800698c:	42a9      	cmp	r1, r5
 800698e:	d905      	bls.n	800699c <_malloc_r+0x28>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	2600      	movs	r6, #0
 8006996:	4630      	mov	r0, r6
 8006998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a70 <_malloc_r+0xfc>
 80069a0:	f000 f868 	bl	8006a74 <__malloc_lock>
 80069a4:	f8d8 3000 	ldr.w	r3, [r8]
 80069a8:	461c      	mov	r4, r3
 80069aa:	bb5c      	cbnz	r4, 8006a04 <_malloc_r+0x90>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ffc0 	bl	8006934 <sbrk_aligned>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	4604      	mov	r4, r0
 80069b8:	d155      	bne.n	8006a66 <_malloc_r+0xf2>
 80069ba:	f8d8 4000 	ldr.w	r4, [r8]
 80069be:	4626      	mov	r6, r4
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d145      	bne.n	8006a50 <_malloc_r+0xdc>
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	d048      	beq.n	8006a5a <_malloc_r+0xe6>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	4631      	mov	r1, r6
 80069cc:	4638      	mov	r0, r7
 80069ce:	eb04 0903 	add.w	r9, r4, r3
 80069d2:	f000 fb5d 	bl	8007090 <_sbrk_r>
 80069d6:	4581      	cmp	r9, r0
 80069d8:	d13f      	bne.n	8006a5a <_malloc_r+0xe6>
 80069da:	6821      	ldr	r1, [r4, #0]
 80069dc:	1a6d      	subs	r5, r5, r1
 80069de:	4629      	mov	r1, r5
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff ffa7 	bl	8006934 <sbrk_aligned>
 80069e6:	3001      	adds	r0, #1
 80069e8:	d037      	beq.n	8006a5a <_malloc_r+0xe6>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	442b      	add	r3, r5
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	f8d8 3000 	ldr.w	r3, [r8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d038      	beq.n	8006a6a <_malloc_r+0xf6>
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	42a2      	cmp	r2, r4
 80069fc:	d12b      	bne.n	8006a56 <_malloc_r+0xe2>
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	e00f      	b.n	8006a24 <_malloc_r+0xb0>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	1b52      	subs	r2, r2, r5
 8006a08:	d41f      	bmi.n	8006a4a <_malloc_r+0xd6>
 8006a0a:	2a0b      	cmp	r2, #11
 8006a0c:	d917      	bls.n	8006a3e <_malloc_r+0xca>
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	6025      	str	r5, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	6059      	strne	r1, [r3, #4]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	bf08      	it	eq
 8006a1c:	f8c8 1000 	streq.w	r1, [r8]
 8006a20:	5162      	str	r2, [r4, r5]
 8006a22:	604b      	str	r3, [r1, #4]
 8006a24:	4638      	mov	r0, r7
 8006a26:	f104 060b 	add.w	r6, r4, #11
 8006a2a:	f000 f829 	bl	8006a80 <__malloc_unlock>
 8006a2e:	f026 0607 	bic.w	r6, r6, #7
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	1af2      	subs	r2, r6, r3
 8006a36:	d0ae      	beq.n	8006996 <_malloc_r+0x22>
 8006a38:	1b9b      	subs	r3, r3, r6
 8006a3a:	50a3      	str	r3, [r4, r2]
 8006a3c:	e7ab      	b.n	8006996 <_malloc_r+0x22>
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	6862      	ldr	r2, [r4, #4]
 8006a42:	d1dd      	bne.n	8006a00 <_malloc_r+0x8c>
 8006a44:	f8c8 2000 	str.w	r2, [r8]
 8006a48:	e7ec      	b.n	8006a24 <_malloc_r+0xb0>
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	6864      	ldr	r4, [r4, #4]
 8006a4e:	e7ac      	b.n	80069aa <_malloc_r+0x36>
 8006a50:	4634      	mov	r4, r6
 8006a52:	6876      	ldr	r6, [r6, #4]
 8006a54:	e7b4      	b.n	80069c0 <_malloc_r+0x4c>
 8006a56:	4613      	mov	r3, r2
 8006a58:	e7cc      	b.n	80069f4 <_malloc_r+0x80>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f000 f80e 	bl	8006a80 <__malloc_unlock>
 8006a64:	e797      	b.n	8006996 <_malloc_r+0x22>
 8006a66:	6025      	str	r5, [r4, #0]
 8006a68:	e7dc      	b.n	8006a24 <_malloc_r+0xb0>
 8006a6a:	605b      	str	r3, [r3, #4]
 8006a6c:	deff      	udf	#255	; 0xff
 8006a6e:	bf00      	nop
 8006a70:	20000bb8 	.word	0x20000bb8

08006a74 <__malloc_lock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__malloc_lock+0x8>)
 8006a76:	f7ff bf0f 	b.w	8006898 <__retarget_lock_acquire_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	20000bb4 	.word	0x20000bb4

08006a80 <__malloc_unlock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	; (8006a88 <__malloc_unlock+0x8>)
 8006a82:	f7ff bf0a 	b.w	800689a <__retarget_lock_release_recursive>
 8006a86:	bf00      	nop
 8006a88:	20000bb4 	.word	0x20000bb4

08006a8c <__ssputs_r>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	688e      	ldr	r6, [r1, #8]
 8006a92:	461f      	mov	r7, r3
 8006a94:	42be      	cmp	r6, r7
 8006a96:	680b      	ldr	r3, [r1, #0]
 8006a98:	4682      	mov	sl, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4690      	mov	r8, r2
 8006a9e:	d82c      	bhi.n	8006afa <__ssputs_r+0x6e>
 8006aa0:	898a      	ldrh	r2, [r1, #12]
 8006aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006aa6:	d026      	beq.n	8006af6 <__ssputs_r+0x6a>
 8006aa8:	6965      	ldr	r5, [r4, #20]
 8006aaa:	6909      	ldr	r1, [r1, #16]
 8006aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ab0:	eba3 0901 	sub.w	r9, r3, r1
 8006ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab8:	1c7b      	adds	r3, r7, #1
 8006aba:	444b      	add	r3, r9
 8006abc:	106d      	asrs	r5, r5, #1
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	bf38      	it	cc
 8006ac2:	461d      	movcc	r5, r3
 8006ac4:	0553      	lsls	r3, r2, #21
 8006ac6:	d527      	bpl.n	8006b18 <__ssputs_r+0x8c>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7ff ff53 	bl	8006974 <_malloc_r>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	b360      	cbz	r0, 8006b2c <__ssputs_r+0xa0>
 8006ad2:	6921      	ldr	r1, [r4, #16]
 8006ad4:	464a      	mov	r2, r9
 8006ad6:	f000 faeb 	bl	80070b0 <memcpy>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	6126      	str	r6, [r4, #16]
 8006ae8:	6165      	str	r5, [r4, #20]
 8006aea:	444e      	add	r6, r9
 8006aec:	eba5 0509 	sub.w	r5, r5, r9
 8006af0:	6026      	str	r6, [r4, #0]
 8006af2:	60a5      	str	r5, [r4, #8]
 8006af4:	463e      	mov	r6, r7
 8006af6:	42be      	cmp	r6, r7
 8006af8:	d900      	bls.n	8006afc <__ssputs_r+0x70>
 8006afa:	463e      	mov	r6, r7
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	4632      	mov	r2, r6
 8006b00:	4641      	mov	r1, r8
 8006b02:	f000 faab 	bl	800705c <memmove>
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	1b9b      	subs	r3, r3, r6
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	4433      	add	r3, r6
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	2000      	movs	r0, #0
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	462a      	mov	r2, r5
 8006b1a:	f000 fad7 	bl	80070cc <_realloc_r>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d1e0      	bne.n	8006ae6 <__ssputs_r+0x5a>
 8006b24:	6921      	ldr	r1, [r4, #16]
 8006b26:	4650      	mov	r0, sl
 8006b28:	f7ff feb8 	bl	800689c <_free_r>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	f8ca 3000 	str.w	r3, [sl]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	e7e9      	b.n	8006b14 <__ssputs_r+0x88>

08006b40 <_svfiprintf_r>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4698      	mov	r8, r3
 8006b46:	898b      	ldrh	r3, [r1, #12]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	b09d      	sub	sp, #116	; 0x74
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	d50e      	bpl.n	8006b72 <_svfiprintf_r+0x32>
 8006b54:	690b      	ldr	r3, [r1, #16]
 8006b56:	b963      	cbnz	r3, 8006b72 <_svfiprintf_r+0x32>
 8006b58:	2140      	movs	r1, #64	; 0x40
 8006b5a:	f7ff ff0b 	bl	8006974 <_malloc_r>
 8006b5e:	6028      	str	r0, [r5, #0]
 8006b60:	6128      	str	r0, [r5, #16]
 8006b62:	b920      	cbnz	r0, 8006b6e <_svfiprintf_r+0x2e>
 8006b64:	230c      	movs	r3, #12
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e0d0      	b.n	8006d10 <_svfiprintf_r+0x1d0>
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	616b      	str	r3, [r5, #20]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	2320      	movs	r3, #32
 8006b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b80:	2330      	movs	r3, #48	; 0x30
 8006b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d28 <_svfiprintf_r+0x1e8>
 8006b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b8a:	f04f 0901 	mov.w	r9, #1
 8006b8e:	4623      	mov	r3, r4
 8006b90:	469a      	mov	sl, r3
 8006b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b96:	b10a      	cbz	r2, 8006b9c <_svfiprintf_r+0x5c>
 8006b98:	2a25      	cmp	r2, #37	; 0x25
 8006b9a:	d1f9      	bne.n	8006b90 <_svfiprintf_r+0x50>
 8006b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ba0:	d00b      	beq.n	8006bba <_svfiprintf_r+0x7a>
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff6f 	bl	8006a8c <__ssputs_r>
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f000 80a9 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb6:	445a      	add	r2, fp
 8006bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bba:	f89a 3000 	ldrb.w	r3, [sl]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80a1 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bce:	f10a 0a01 	add.w	sl, sl, #1
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	9307      	str	r3, [sp, #28]
 8006bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bda:	931a      	str	r3, [sp, #104]	; 0x68
 8006bdc:	4654      	mov	r4, sl
 8006bde:	2205      	movs	r2, #5
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	4850      	ldr	r0, [pc, #320]	; (8006d28 <_svfiprintf_r+0x1e8>)
 8006be6:	f7f9 fb1b 	bl	8000220 <memchr>
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	b9d8      	cbnz	r0, 8006c26 <_svfiprintf_r+0xe6>
 8006bee:	06d0      	lsls	r0, r2, #27
 8006bf0:	bf44      	itt	mi
 8006bf2:	2320      	movmi	r3, #32
 8006bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bf8:	0711      	lsls	r1, r2, #28
 8006bfa:	bf44      	itt	mi
 8006bfc:	232b      	movmi	r3, #43	; 0x2b
 8006bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c02:	f89a 3000 	ldrb.w	r3, [sl]
 8006c06:	2b2a      	cmp	r3, #42	; 0x2a
 8006c08:	d015      	beq.n	8006c36 <_svfiprintf_r+0xf6>
 8006c0a:	9a07      	ldr	r2, [sp, #28]
 8006c0c:	4654      	mov	r4, sl
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f04f 0c0a 	mov.w	ip, #10
 8006c14:	4621      	mov	r1, r4
 8006c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c1a:	3b30      	subs	r3, #48	; 0x30
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d94d      	bls.n	8006cbc <_svfiprintf_r+0x17c>
 8006c20:	b1b0      	cbz	r0, 8006c50 <_svfiprintf_r+0x110>
 8006c22:	9207      	str	r2, [sp, #28]
 8006c24:	e014      	b.n	8006c50 <_svfiprintf_r+0x110>
 8006c26:	eba0 0308 	sub.w	r3, r0, r8
 8006c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	46a2      	mov	sl, r4
 8006c34:	e7d2      	b.n	8006bdc <_svfiprintf_r+0x9c>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	1d19      	adds	r1, r3, #4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	9103      	str	r1, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfbb      	ittet	lt
 8006c42:	425b      	neglt	r3, r3
 8006c44:	f042 0202 	orrlt.w	r2, r2, #2
 8006c48:	9307      	strge	r3, [sp, #28]
 8006c4a:	9307      	strlt	r3, [sp, #28]
 8006c4c:	bfb8      	it	lt
 8006c4e:	9204      	strlt	r2, [sp, #16]
 8006c50:	7823      	ldrb	r3, [r4, #0]
 8006c52:	2b2e      	cmp	r3, #46	; 0x2e
 8006c54:	d10c      	bne.n	8006c70 <_svfiprintf_r+0x130>
 8006c56:	7863      	ldrb	r3, [r4, #1]
 8006c58:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5a:	d134      	bne.n	8006cc6 <_svfiprintf_r+0x186>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1d1a      	adds	r2, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	9203      	str	r2, [sp, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb8      	it	lt
 8006c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c6c:	3402      	adds	r4, #2
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d38 <_svfiprintf_r+0x1f8>
 8006c74:	7821      	ldrb	r1, [r4, #0]
 8006c76:	2203      	movs	r2, #3
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f7f9 fad1 	bl	8000220 <memchr>
 8006c7e:	b138      	cbz	r0, 8006c90 <_svfiprintf_r+0x150>
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	eba0 000a 	sub.w	r0, r0, sl
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	4082      	lsls	r2, r0
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c94:	4825      	ldr	r0, [pc, #148]	; (8006d2c <_svfiprintf_r+0x1ec>)
 8006c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c9a:	2206      	movs	r2, #6
 8006c9c:	f7f9 fac0 	bl	8000220 <memchr>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d038      	beq.n	8006d16 <_svfiprintf_r+0x1d6>
 8006ca4:	4b22      	ldr	r3, [pc, #136]	; (8006d30 <_svfiprintf_r+0x1f0>)
 8006ca6:	bb1b      	cbnz	r3, 8006cf0 <_svfiprintf_r+0x1b0>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	4433      	add	r3, r6
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	e768      	b.n	8006b8e <_svfiprintf_r+0x4e>
 8006cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7a6      	b.n	8006c14 <_svfiprintf_r+0xd4>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	3401      	adds	r4, #1
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0c0a 	mov.w	ip, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd8:	3a30      	subs	r2, #48	; 0x30
 8006cda:	2a09      	cmp	r2, #9
 8006cdc:	d903      	bls.n	8006ce6 <_svfiprintf_r+0x1a6>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c6      	beq.n	8006c70 <_svfiprintf_r+0x130>
 8006ce2:	9105      	str	r1, [sp, #20]
 8006ce4:	e7c4      	b.n	8006c70 <_svfiprintf_r+0x130>
 8006ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cea:	4604      	mov	r4, r0
 8006cec:	2301      	movs	r3, #1
 8006cee:	e7f0      	b.n	8006cd2 <_svfiprintf_r+0x192>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <_svfiprintf_r+0x1f4>)
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f3af 8000 	nop.w
 8006d00:	1c42      	adds	r2, r0, #1
 8006d02:	4606      	mov	r6, r0
 8006d04:	d1d6      	bne.n	8006cb4 <_svfiprintf_r+0x174>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	065b      	lsls	r3, r3, #25
 8006d0a:	f53f af2d 	bmi.w	8006b68 <_svfiprintf_r+0x28>
 8006d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d10:	b01d      	add	sp, #116	; 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	ab03      	add	r3, sp, #12
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <_svfiprintf_r+0x1f4>)
 8006d1e:	a904      	add	r1, sp, #16
 8006d20:	4638      	mov	r0, r7
 8006d22:	f000 f879 	bl	8006e18 <_printf_i>
 8006d26:	e7eb      	b.n	8006d00 <_svfiprintf_r+0x1c0>
 8006d28:	08007258 	.word	0x08007258
 8006d2c:	08007262 	.word	0x08007262
 8006d30:	00000000 	.word	0x00000000
 8006d34:	08006a8d 	.word	0x08006a8d
 8006d38:	0800725e 	.word	0x0800725e

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4699      	mov	r9, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d88:	1e13      	subs	r3, r2, #0
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf02      	ittt	eq
 8006dae:	68e5      	ldreq	r5, [r4, #12]
 8006db0:	6833      	ldreq	r3, [r6, #0]
 8006db2:	1aed      	subeq	r5, r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c0      	blx	r8
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	; 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e20:	2f78      	cmp	r7, #120	; 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	; 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d4 	beq.w	8006fe2 <_printf_i+0x1ca>
 8006e3a:	2f58      	cmp	r7, #88	; 0x58
 8006e3c:	f000 80c0 	beq.w	8006fc0 <_printf_i+0x1a8>
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fc9 	.word	0x08006fc9
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006f83 	.word	0x08006f83
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006feb 	.word	0x08006feb
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f8b 	.word	0x08006f8b
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09f      	b.n	8007004 <_printf_i+0x1ec>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	0607      	lsls	r7, r0, #24
 8006eca:	f103 0104 	add.w	r1, r3, #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_i+0xbe>
 8006ed2:	681e      	ldr	r6, [r3, #0]
 8006ed4:	e003      	b.n	8006ede <_printf_i+0xc6>
 8006ed6:	0646      	lsls	r6, r0, #25
 8006ed8:	d5fb      	bpl.n	8006ed2 <_printf_i+0xba>
 8006eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	da03      	bge.n	8006eea <_printf_i+0xd2>
 8006ee2:	232d      	movs	r3, #45	; 0x2d
 8006ee4:	4276      	negs	r6, r6
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	485a      	ldr	r0, [pc, #360]	; (8007054 <_printf_i+0x23c>)
 8006eec:	230a      	movs	r3, #10
 8006eee:	e012      	b.n	8006f16 <_printf_i+0xfe>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0605      	lsls	r5, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xe8>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xee>
 8006f00:	0641      	lsls	r1, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe4>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4853      	ldr	r0, [pc, #332]	; (8007054 <_printf_i+0x23c>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x114>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04b      	beq.n	8006fc4 <_printf_i+0x1ac>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x116>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x148>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x148>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee4 	bl	8006d3c <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14a      	bne.n	800700e <_printf_i+0x1f6>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	4833      	ldr	r0, [pc, #204]	; (8007058 <_printf_i+0x240>)
 8006f8c:	2778      	movs	r7, #120	; 0x78
 8006f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6829      	ldr	r1, [r5, #0]
 8006f96:	061f      	lsls	r7, r3, #24
 8006f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f9c:	d402      	bmi.n	8006fa4 <_printf_i+0x18c>
 8006f9e:	065f      	lsls	r7, r3, #25
 8006fa0:	bf48      	it	mi
 8006fa2:	b2b6      	uxthmi	r6, r6
 8006fa4:	07df      	lsls	r7, r3, #31
 8006fa6:	bf48      	it	mi
 8006fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	bf48      	it	mi
 8006fb0:	6023      	strmi	r3, [r4, #0]
 8006fb2:	b91e      	cbnz	r6, 8006fbc <_printf_i+0x1a4>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	f023 0320 	bic.w	r3, r3, #32
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	e7a7      	b.n	8006f10 <_printf_i+0xf8>
 8006fc0:	4824      	ldr	r0, [pc, #144]	; (8007054 <_printf_i+0x23c>)
 8006fc2:	e7e4      	b.n	8006f8e <_printf_i+0x176>
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	e7bd      	b.n	8006f44 <_printf_i+0x12c>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6826      	ldr	r6, [r4, #0]
 8006fcc:	6961      	ldr	r1, [r4, #20]
 8006fce:	1d18      	adds	r0, r3, #4
 8006fd0:	6028      	str	r0, [r5, #0]
 8006fd2:	0635      	lsls	r5, r6, #24
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0x1c4>
 8006fd8:	6019      	str	r1, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0x1ca>
 8006fdc:	0670      	lsls	r0, r6, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0x1c0>
 8006fe0:	8019      	strh	r1, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	4615      	mov	r5, r2
 8006fe8:	e7bc      	b.n	8006f64 <_printf_i+0x14c>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7f9 f912 	bl	8000220 <memchr>
 8006ffc:	b108      	cbz	r0, 8007002 <_printf_i+0x1ea>
 8006ffe:	1b40      	subs	r0, r0, r5
 8007000:	6060      	str	r0, [r4, #4]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	2300      	movs	r3, #0
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e7aa      	b.n	8006f64 <_printf_i+0x14c>
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	462a      	mov	r2, r5
 8007012:	4649      	mov	r1, r9
 8007014:	4640      	mov	r0, r8
 8007016:	47d0      	blx	sl
 8007018:	3001      	adds	r0, #1
 800701a:	d0ad      	beq.n	8006f78 <_printf_i+0x160>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	d413      	bmi.n	800704a <_printf_i+0x232>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	4298      	cmp	r0, r3
 8007028:	bfb8      	it	lt
 800702a:	4618      	movlt	r0, r3
 800702c:	e7a6      	b.n	8006f7c <_printf_i+0x164>
 800702e:	2301      	movs	r3, #1
 8007030:	4632      	mov	r2, r6
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d09d      	beq.n	8006f78 <_printf_i+0x160>
 800703c:	3501      	adds	r5, #1
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	9903      	ldr	r1, [sp, #12]
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	42ab      	cmp	r3, r5
 8007046:	dcf2      	bgt.n	800702e <_printf_i+0x216>
 8007048:	e7eb      	b.n	8007022 <_printf_i+0x20a>
 800704a:	2500      	movs	r5, #0
 800704c:	f104 0619 	add.w	r6, r4, #25
 8007050:	e7f5      	b.n	800703e <_printf_i+0x226>
 8007052:	bf00      	nop
 8007054:	08007269 	.word	0x08007269
 8007058:	0800727a 	.word	0x0800727a

0800705c <memmove>:
 800705c:	4288      	cmp	r0, r1
 800705e:	b510      	push	{r4, lr}
 8007060:	eb01 0402 	add.w	r4, r1, r2
 8007064:	d902      	bls.n	800706c <memmove+0x10>
 8007066:	4284      	cmp	r4, r0
 8007068:	4623      	mov	r3, r4
 800706a:	d807      	bhi.n	800707c <memmove+0x20>
 800706c:	1e43      	subs	r3, r0, #1
 800706e:	42a1      	cmp	r1, r4
 8007070:	d008      	beq.n	8007084 <memmove+0x28>
 8007072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800707a:	e7f8      	b.n	800706e <memmove+0x12>
 800707c:	4402      	add	r2, r0
 800707e:	4601      	mov	r1, r0
 8007080:	428a      	cmp	r2, r1
 8007082:	d100      	bne.n	8007086 <memmove+0x2a>
 8007084:	bd10      	pop	{r4, pc}
 8007086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800708a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800708e:	e7f7      	b.n	8007080 <memmove+0x24>

08007090 <_sbrk_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_sbrk_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fa fb0e 	bl	80016bc <_sbrk>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_sbrk_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_sbrk_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000bb0 	.word	0x20000bb0

080070b0 <memcpy>:
 80070b0:	440a      	add	r2, r1
 80070b2:	4291      	cmp	r1, r2
 80070b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b8:	d100      	bne.n	80070bc <memcpy+0xc>
 80070ba:	4770      	bx	lr
 80070bc:	b510      	push	{r4, lr}
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c6:	4291      	cmp	r1, r2
 80070c8:	d1f9      	bne.n	80070be <memcpy+0xe>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <_realloc_r>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4680      	mov	r8, r0
 80070d2:	4614      	mov	r4, r2
 80070d4:	460e      	mov	r6, r1
 80070d6:	b921      	cbnz	r1, 80070e2 <_realloc_r+0x16>
 80070d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	4611      	mov	r1, r2
 80070de:	f7ff bc49 	b.w	8006974 <_malloc_r>
 80070e2:	b92a      	cbnz	r2, 80070f0 <_realloc_r+0x24>
 80070e4:	f7ff fbda 	bl	800689c <_free_r>
 80070e8:	4625      	mov	r5, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f0:	f000 f81b 	bl	800712a <_malloc_usable_size_r>
 80070f4:	4284      	cmp	r4, r0
 80070f6:	4607      	mov	r7, r0
 80070f8:	d802      	bhi.n	8007100 <_realloc_r+0x34>
 80070fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070fe:	d812      	bhi.n	8007126 <_realloc_r+0x5a>
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff fc36 	bl	8006974 <_malloc_r>
 8007108:	4605      	mov	r5, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d0ed      	beq.n	80070ea <_realloc_r+0x1e>
 800710e:	42bc      	cmp	r4, r7
 8007110:	4622      	mov	r2, r4
 8007112:	4631      	mov	r1, r6
 8007114:	bf28      	it	cs
 8007116:	463a      	movcs	r2, r7
 8007118:	f7ff ffca 	bl	80070b0 <memcpy>
 800711c:	4631      	mov	r1, r6
 800711e:	4640      	mov	r0, r8
 8007120:	f7ff fbbc 	bl	800689c <_free_r>
 8007124:	e7e1      	b.n	80070ea <_realloc_r+0x1e>
 8007126:	4635      	mov	r5, r6
 8007128:	e7df      	b.n	80070ea <_realloc_r+0x1e>

0800712a <_malloc_usable_size_r>:
 800712a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800712e:	1f18      	subs	r0, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbc      	itt	lt
 8007134:	580b      	ldrlt	r3, [r1, r0]
 8007136:	18c0      	addlt	r0, r0, r3
 8007138:	4770      	bx	lr
	...

0800713c <_init>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr

08007148 <_fini>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr
