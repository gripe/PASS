
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  2000005c  080069a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  080069a4  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014495  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2b  00000000  00000000  00034564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00037190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1d  00000000  00000000  00038268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267d3  00000000  00000000  00038f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001626f  00000000  00000000  0005f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efd16  00000000  00000000  000759c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c50  00000000  00000000  001656e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006884 	.word	0x08006884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08006884 	.word	0x08006884

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_SAI_TxCpltCallback>:
//	adc_avg += adc_get;
//	avg_count ++;
//
//}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

//  for (int i = 15; i > 0; i --)
//	  sai_fifo[i] = sai_fifo[i - 1];
//  adc_avg = (adc_avg / avg_count);
  sai_fifo[0] = (uint16_t)((short)((adc_get << 4) - (1 << 15)) >> 0) & (~0x3);
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_SAI_TxCpltCallback+0x34>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_SAI_TxCpltCallback+0x38>)
 80005d4:	801a      	strh	r2, [r3, #0]
//  sai_fifo[0] = 0x7000;//(adc_get << 4) - (1 << 15);
  adc_avg = 0;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_SAI_TxCpltCallback+0x3c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
  avg_count = 0;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <HAL_SAI_TxCpltCallback+0x40>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200007e8 	.word	0x200007e8
 80005f4:	200007ec 	.word	0x200007ec
 80005f8:	2000080c 	.word	0x2000080c
 80005fc:	20000810 	.word	0x20000810

08000600 <write_register>:
#define DAC_MUTE1 0x09
#define PLL_CLK_CTRL0 0x00
#define DAC_CTRL0 0x06


void write_register(uint8_t reg, uint8_t* data) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b0ba      	sub	sp, #232	; 0xe8
 8000604:	af04      	add	r7, sp, #16
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, ADAU_ADDR << 1, reg,
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b29a      	uxth	r2, r3
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	2301      	movs	r3, #1
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2108      	movs	r1, #8
 8000622:	4825      	ldr	r0, [pc, #148]	; (80006b8 <write_register+0xb8>)
 8000624:	f002 fa50 	bl	8002ac8 <HAL_I2C_Mem_Write>
 8000628:	4603      	mov	r3, r0
 800062a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);



	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <write_register+0xbc>)
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	461d      	mov	r5, r3
 8000636:	6828      	ldr	r0, [r5, #0]
 8000638:	6869      	ldr	r1, [r5, #4]
 800063a:	68aa      	ldr	r2, [r5, #8]
 800063c:	68eb      	ldr	r3, [r5, #12]
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	8a2b      	ldrh	r3, [r5, #16]
 8000642:	7caa      	ldrb	r2, [r5, #18]
 8000644:	8023      	strh	r3, [r4, #0]
 8000646:	4613      	mov	r3, r2
 8000648:	70a3      	strb	r3, [r4, #2]
 800064a:	f107 031f 	add.w	r3, r7, #31
 800064e:	2251      	movs	r2, #81	; 0x51
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fc92 	bl	8005f7c <memset>
	if (ret != HAL_OK) {
 8000658:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800065c:	2b00      	cmp	r3, #0
 800065e:	d018      	beq.n	8000692 <write_register+0x92>
		sprintf(str_fail, "Error is %d", HAL_I2C_GetError(&hi2c2));
 8000660:	4815      	ldr	r0, [pc, #84]	; (80006b8 <write_register+0xb8>)
 8000662:	f002 fb45 	bl	8002cf0 <HAL_I2C_GetError>
 8000666:	4602      	mov	r2, r0
 8000668:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800066c:	4914      	ldr	r1, [pc, #80]	; (80006c0 <write_register+0xc0>)
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fc64 	bl	8005f3c <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 8000674:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdc9 	bl	8000210 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <write_register+0xc4>)
 800068c:	f004 fcdb 	bl	8005046 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}

}
 8000690:	e00d      	b.n	80006ae <write_register+0xae>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdba 	bl	8000210 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <write_register+0xc4>)
 80006aa:	f004 fccc 	bl	8005046 <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	37d8      	adds	r7, #216	; 0xd8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000120 	.word	0x20000120
 80006bc:	080068a8 	.word	0x080068a8
 80006c0:	0800689c 	.word	0x0800689c
 80006c4:	20000258 	.word	0x20000258

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0b4      	sub	sp, #208	; 0xd0
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fe6c 	bl	80013aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f891 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 fa6b 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006da:	f000 fa43 	bl	8000b64 <MX_DMA_Init>
  MX_SAI1_Init();
 80006de:	f000 f987 	bl	80009f0 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e2:	f000 fa11 	bl	8000b08 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006e6:	f000 f943 	bl	8000970 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80006ea:	f000 f9dd 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80006ee:	f000 f8ed 	bl	80008cc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, &adc_get, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	4939      	ldr	r1, [pc, #228]	; (80007dc <main+0x114>)
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <main+0x118>)
 80006f8:	f000 ff1c 	bl	8001534 <HAL_ADC_Start_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, &sai_fifo, 16);
 80006fc:	2210      	movs	r2, #16
 80006fe:	4939      	ldr	r1, [pc, #228]	; (80007e4 <main+0x11c>)
 8000700:	4839      	ldr	r0, [pc, #228]	; (80007e8 <main+0x120>)
 8000702:	f004 faaf 	bl	8004c64 <HAL_SAI_Transmit_DMA>
  sai_fifo[0] = 0x7000U;
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <main+0x11c>)
 8000708:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800070c:	801a      	strh	r2, [r3, #0]

  HAL_Delay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000712:	f000 fea7 	bl	8001464 <HAL_Delay>

  char str[100] = "check\r\n";
 8000716:	4a35      	ldr	r2, [pc, #212]	; (80007ec <main+0x124>)
 8000718:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800071c:	6810      	ldr	r0, [r2, #0]
 800071e:	6851      	ldr	r1, [r2, #4]
 8000720:	c303      	stmia	r3!, {r0, r1}
 8000722:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000726:	225c      	movs	r2, #92	; 0x5c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fc26 	bl	8005f7c <memset>
  uint8_t mute_data = 0;	//0 is normal operation, 1 is muted
 8000730:	2300      	movs	r3, #0
 8000732:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint8_t pll_clk_data = 0b01000001; //assert reset and pllin = 01 to use DLRCLK reference
 8000736:	2341      	movs	r3, #65	; 0x41
 8000738:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  uint8_t dac_ctrl0 = 0b01100000;
 800073c:	2360      	movs	r3, #96	; 0x60
 800073e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  uint8_t pll_clk_data1 = 0b11000000;
 8000742:	23c0      	movs	r3, #192	; 0xc0
 8000744:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  uint8_t dac_ctl1 = 0b10000;
 8000748:	2310      	movs	r3, #16
 800074a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 800074e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd5c 	bl	8000210 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	4822      	ldr	r0, [pc, #136]	; (80007f0 <main+0x128>)
 8000766:	f004 fc6e 	bl	8005046 <HAL_UART_Transmit>


  write_register(PLL_CLK_CTRL0, &pll_clk_data);
 800076a:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 800076e:	4619      	mov	r1, r3
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff45 	bl	8000600 <write_register>
  write_register(DAC_MUTE1, &mute_data);
 8000776:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800077a:	4619      	mov	r1, r3
 800077c:	2009      	movs	r0, #9
 800077e:	f7ff ff3f 	bl	8000600 <write_register>
  write_register(DAC_CTRL0, &dac_ctrl0);
 8000782:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8000786:	4619      	mov	r1, r3
 8000788:	2006      	movs	r0, #6
 800078a:	f7ff ff39 	bl	8000600 <write_register>
  write_register(0x07, &pll_clk_data1);
 800078e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000792:	4619      	mov	r1, r3
 8000794:	2007      	movs	r0, #7
 8000796:	f7ff ff33 	bl	8000600 <write_register>
  write_register(0x08, &dac_ctl1);
 800079a:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800079e:	4619      	mov	r1, r3
 80007a0:	2008      	movs	r0, #8
 80007a2:	f7ff ff2d 	bl	8000600 <write_register>



  char str2[100] = "check2\r\n";
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <main+0x12c>)
 80007a8:	463b      	mov	r3, r7
 80007aa:	6810      	ldr	r0, [r2, #0]
 80007ac:	6851      	ldr	r1, [r2, #4]
 80007ae:	c303      	stmia	r3!, {r0, r1}
 80007b0:	7a12      	ldrb	r2, [r2, #8]
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	f107 0309 	add.w	r3, r7, #9
 80007b8:	225b      	movs	r2, #91	; 0x5b
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 fbdd 	bl	8005f7c <memset>
  HAL_UART_Transmit(&huart3, str2, strlen((char*)str2), HAL_MAX_DELAY);
 80007c2:	463b      	mov	r3, r7
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd23 	bl	8000210 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4639      	mov	r1, r7
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <main+0x128>)
 80007d6:	f004 fc36 	bl	8005046 <HAL_UART_Transmit>

  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x112>
 80007dc:	200007e8 	.word	0x200007e8
 80007e0:	20000078 	.word	0x20000078
 80007e4:	200007ec 	.word	0x200007ec
 80007e8:	20000174 	.word	0x20000174
 80007ec:	080068bc 	.word	0x080068bc
 80007f0:	20000258 	.word	0x20000258
 80007f4:	080068c4 	.word	0x080068c4

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fbb8 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800081c:	f002 fe9a 	bl	8003554 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <SystemClock_Config+0xcc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000840:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <SystemClock_Config+0xd0>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800086c:	2348      	movs	r3, #72	; 0x48
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000874:	2303      	movs	r3, #3
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fe79 	bl	8003574 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000888:	f000 fa4c 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800089e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2102      	movs	r1, #2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f906 	bl	8003abc <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b6:	f000 fa35 	bl	8000d24 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	; 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_ADC1_Init+0x98>)
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <MX_ADC1_Init+0x9c>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0x98>)
 80008e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ADC1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC1_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_ADC1_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_ADC1_Init+0x98>)
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_ADC1_Init+0xa0>)
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_ADC1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_ADC1_Init+0x98>)
 800091a:	2201      	movs	r2, #1
 800091c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_ADC1_Init+0x98>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_ADC1_Init+0x98>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_ADC1_Init+0x98>)
 800092e:	f000 fdbd 	bl	80014ac <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 f9f4 	bl	8000d24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_ADC1_Init+0x98>)
 800094e:	f000 ff09 	bl	8001764 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 f9e4 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000078 	.word	0x20000078
 8000968:	40012000 	.word	0x40012000
 800096c:	0f000001 	.word	0x0f000001

08000970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_I2C2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x601015E9;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_I2C2_Init+0x74>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <MX_I2C2_Init+0x7c>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009ac:	f001 fffc 	bl	80029a8 <HAL_I2C_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f000 f9b5 	bl	8000d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009be:	f002 fbe9 	bl	8003194 <HAL_I2CEx_ConfigAnalogFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f000 f9ac 	bl	8000d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_I2C2_Init+0x74>)
 80009d0:	f002 fc2b 	bl	800322a <HAL_I2CEx_ConfigDigitalFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f9a3 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000120 	.word	0x20000120
 80009e8:	40005800 	.word	0x40005800
 80009ec:	601015e9 	.word	0x601015e9

080009f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 80009f6:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <MX_SAI1_Init+0xb4>)
 80009f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a36:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a56:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_SAI1_Init+0xb0>)
 8000a8e:	f003 ff6b 	bl	8004968 <HAL_SAI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SAI1_Init+0xac>
  {
    Error_Handler();
 8000a98:	f000 f944 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000174 	.word	0x20000174
 8000aa4:	40015804 	.word	0x40015804

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MX_USART3_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART3_UART_Init+0x58>)
 8000aec:	f004 fa5d 	bl	8004faa <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f915 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000258 	.word	0x20000258
 8000b04:	40004800 	.word	0x40004800

08000b08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b16:	2206      	movs	r2, #6
 8000b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	f002 fbb9 	bl	80032c2 <HAL_PCD_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f8e5 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002e0 	.word	0x200002e0

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_DMA_Init+0x48>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <MX_DMA_Init+0x48>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_DMA_Init+0x48>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2038      	movs	r0, #56	; 0x38
 8000b88:	f001 f999 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b8c:	2038      	movs	r0, #56	; 0x38
 8000b8e:	f001 f9b2 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2039      	movs	r0, #57	; 0x39
 8000b98:	f001 f991 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b9c:	2039      	movs	r0, #57	; 0x39
 8000b9e:	f001 f9aa 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a47      	ldr	r2, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_GPIO_Init+0x168>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4823      	ldr	r0, [pc, #140]	; (8000d1c <MX_GPIO_Init+0x16c>)
 8000c8e:	f001 fe71 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4822      	ldr	r0, [pc, #136]	; (8000d20 <MX_GPIO_Init+0x170>)
 8000c98:	f001 fe6c 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MX_GPIO_Init+0x16c>)
 8000cba:	f001 fcaf 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cc4:	2311      	movs	r3, #17
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_GPIO_Init+0x16c>)
 8000cd8:	f001 fca0 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cdc:	2340      	movs	r3, #64	; 0x40
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <MX_GPIO_Init+0x170>)
 8000cf4:	f001 fc92 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_GPIO_Init+0x170>)
 8000d0c:	f001 fc86 	bl	800261c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	; 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40021800 	.word	0x40021800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b5b0      	push	{r4, r5, r7, lr}
 8000d26:	b09a      	sub	sp, #104	; 0x68
 8000d28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
}
 8000d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <Error_Handler+0x48>)
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	461d      	mov	r5, r3
 8000d34:	6828      	ldr	r0, [r5, #0]
 8000d36:	6869      	ldr	r1, [r5, #4]
 8000d38:	68aa      	ldr	r2, [r5, #8]
 8000d3a:	68eb      	ldr	r3, [r5, #12]
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	7c2b      	ldrb	r3, [r5, #16]
 8000d40:	7023      	strb	r3, [r4, #0]
 8000d42:	f107 0315 	add.w	r3, r7, #21
 8000d46:	2253      	movs	r2, #83	; 0x53
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f005 f916 	bl	8005f7c <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fa5c 	bl	8000210 <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	1d39      	adds	r1, r7, #4
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <Error_Handler+0x4c>)
 8000d64:	f004 f96f 	bl	8005046 <HAL_UART_Transmit>

  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x44>
 8000d6a:	bf00      	nop
 8000d6c:	080068d0 	.word	0x080068d0
 8000d70:	20000258 	.word	0x20000258

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <HAL_ADC_MspInit+0xd4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d153      	bne.n	8000e86 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a2c      	ldr	r2, [pc, #176]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_ADC_MspInit+0xd8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481d      	ldr	r0, [pc, #116]	; (8000e98 <HAL_ADC_MspInit+0xdc>)
 8000e22:	f001 fbfb 	bl	800261c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <HAL_ADC_MspInit+0xe4>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e6c:	f001 f85e 	bl	8001f2c <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000e76:	f7ff ff55 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_ADC_MspInit+0xe0>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40012000 	.word	0x40012000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	200000c0 	.word	0x200000c0
 8000ea0:	40026410 	.word	0x40026410

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0aa      	sub	sp, #168	; 0xa8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	2284      	movs	r2, #132	; 0x84
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 f859 	bl	8005f7c <memset>
  if(hi2c->Instance==I2C2)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_I2C_MspInit+0xb0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d13b      	bne.n	8000f4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f810 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff ff19 	bl	8000d24 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f22:	2304      	movs	r3, #4
 8000f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_I2C_MspInit+0xb8>)
 8000f30:	f001 fb74 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_I2C_MspInit+0xb4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	37a8      	adds	r7, #168	; 0xa8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005800 	.word	0x40005800
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40021400 	.word	0x40021400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0aa      	sub	sp, #168	; 0xa8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2284      	movs	r2, #132	; 0x84
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fffb 	bl	8005f7c <memset>
  if(huart->Instance==USART3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_UART_MspInit+0xb4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13c      	bne.n	800100a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ffb2 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000faa:	f7ff febb 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0xb8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0xbc>)
 8001006:	f001 fb09 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	37a8      	adds	r7, #168	; 0xa8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004800 	.word	0x40004800
 8001018:	40023800 	.word	0x40023800
 800101c:	40020c00 	.word	0x40020c00

08001020 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ac      	sub	sp, #176	; 0xb0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	2284      	movs	r2, #132	; 0x84
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f004 ff9b 	bl	8005f7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104e:	d159      	bne.n	8001104 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001054:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f002 ff51 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800106c:	f7ff fe5a 	bl	8000d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_PCD_MspInit+0xec>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <HAL_PCD_MspInit+0xec>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <HAL_PCD_MspInit+0xec>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001088:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800108c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a2:	230a      	movs	r3, #10
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <HAL_PCD_MspInit+0xf0>)
 80010b0:	f001 fab4 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4810      	ldr	r0, [pc, #64]	; (8001110 <HAL_PCD_MspInit+0xf0>)
 80010d0:	f001 faa4 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010de:	6353      	str	r3, [r2, #52]	; 0x34
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6453      	str	r3, [r2, #68]	; 0x44
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_PCD_MspInit+0xec>)
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	37b0      	adds	r7, #176	; 0xb0
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0aa      	sub	sp, #168	; 0xa8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2284      	movs	r2, #132	; 0x84
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f004 ff29 	bl	8005f7c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a41      	ldr	r2, [pc, #260]	; (8001234 <HAL_SAI_MspInit+0x120>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d17b      	bne.n	800122c <HAL_SAI_MspInit+0x118>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001134:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001138:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800113a:	2332      	movs	r3, #50	; 0x32
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800114e:	2300      	movs	r3, #0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001152:	2300      	movs	r3, #0
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fed4 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001166:	f7ff fddd 	bl	8000d24 <Error_Handler>
    }

    if (SAI1_client == 0)
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <HAL_SAI_MspInit+0x124>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10b      	bne.n	800118a <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_SAI_MspInit+0x128>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <HAL_SAI_MspInit+0x128>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HAL_SAI_MspInit+0x128>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_SAI_MspInit+0x124>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_SAI_MspInit+0x124>)
 8001192:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001194:	2374      	movs	r3, #116	; 0x74
 8001196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011b6:	4619      	mov	r1, r3
 80011b8:	4821      	ldr	r0, [pc, #132]	; (8001240 <HAL_SAI_MspInit+0x12c>)
 80011ba:	f001 fa2f 	bl	800261c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_SAI_MspInit+0x134>)
 80011c2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011dc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_SAI_MspInit+0x130>)
 80011f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011fc:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_SAI_MspInit+0x130>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_SAI_MspInit+0x130>)
 8001206:	f000 fe91 	bl	8001f2c <HAL_DMA_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001210:	f7ff fd88 	bl	8000d24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_SAI_MspInit+0x130>)
 8001218:	671a      	str	r2, [r3, #112]	; 0x70
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_SAI_MspInit+0x130>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_SAI_MspInit+0x130>)
 8001224:	66da      	str	r2, [r3, #108]	; 0x6c
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_SAI_MspInit+0x130>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800122c:	bf00      	nop
 800122e:	37a8      	adds	r7, #168	; 0xa8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40015804 	.word	0x40015804
 8001238:	20000814 	.word	0x20000814
 800123c:	40023800 	.word	0x40023800
 8001240:	40021000 	.word	0x40021000
 8001244:	200001f8 	.word	0x200001f8
 8001248:	40026428 	.word	0x40026428

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f8c4 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA2_Stream0_IRQHandler+0x10>)
 80012a6:	f000 ff4f 	bl	8002148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000c0 	.word	0x200000c0

080012b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA2_Stream1_IRQHandler+0x10>)
 80012ba:	f000 ff45 	bl	8002148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f004 fe48 	bl	8005f8c <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20050000 	.word	0x20050000
 8001328:	00000400 	.word	0x00000400
 800132c:	20000818 	.word	0x20000818
 8001330:	20000968 	.word	0x20000968

08001334 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001382:	f7ff ffd7 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f004 fe07 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f99d 	bl	80006c8 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800139c:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 80013a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013a4:	20000968 	.word	0x20000968

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>

080013aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f000 fd7a 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 f805 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ba:	f7ff fcdb 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fd95 	bl	8001f12 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 fd5d 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	2000081c 	.word	0x2000081c

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000081c 	.word	0x2000081c

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e031      	b.n	8001526 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc76 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_ADC_Init+0x84>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa88 	bl	8001a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
 8001516:	e001      	b.n	800151c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	ffffeefd 	.word	0xffffeefd

08001534 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Start_DMA+0x1e>
 800154e:	2302      	movs	r3, #2
 8001550:	e0d4      	b.n	80016fc <HAL_ADC_Start_DMA+0x1c8>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d018      	beq.n	800159a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_ADC_Start_DMA+0x1d0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a62      	ldr	r2, [pc, #392]	; (8001708 <HAL_ADC_Start_DMA+0x1d4>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9a      	lsrs	r2, r3, #18
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800158c:	e002      	b.n	8001594 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3b01      	subs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 809c 	bne.w	80016e2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_ADC_Start_DMA+0x1d8>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e4:	d106      	bne.n	80015f4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f023 0206 	bic.w	r2, r3, #6
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
 80015f2:	e002      	b.n	80015fa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	4a42      	ldr	r2, [pc, #264]	; (8001710 <HAL_ADC_Start_DMA+0x1dc>)
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160e:	4a41      	ldr	r2, [pc, #260]	; (8001714 <HAL_ADC_Start_DMA+0x1e0>)
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	4a40      	ldr	r2, [pc, #256]	; (8001718 <HAL_ADC_Start_DMA+0x1e4>)
 8001618:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001622:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001632:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	334c      	adds	r3, #76	; 0x4c
 800164e:	4619      	mov	r1, r3
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f000 fd18 	bl	8002088 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_ADC_Start_DMA+0x1e8>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10f      	bne.n	8001684 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d143      	bne.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	e03a      	b.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a25      	ldr	r2, [pc, #148]	; (8001720 <HAL_ADC_Start_DMA+0x1ec>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10e      	bne.n	80016ac <HAL_ADC_Start_DMA+0x178>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016aa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_ADC_Start_DMA+0x1e8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d120      	bne.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_ADC_Start_DMA+0x1f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11b      	bne.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d114      	bne.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e00b      	b.n	80016fa <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f043 0210 	orr.w	r2, r3, #16
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	431bde83 	.word	0x431bde83
 800170c:	fffff8fe 	.word	0xfffff8fe
 8001710:	08001c05 	.word	0x08001c05
 8001714:	08001cbf 	.word	0x08001cbf
 8001718:	08001cdb 	.word	0x08001cdb
 800171c:	40012300 	.word	0x40012300
 8001720:	40012000 	.word	0x40012000
 8001724:	40012200 	.word	0x40012200

08001728 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1c>
 800177c:	2302      	movs	r3, #2
 800177e:	e136      	b.n	80019ee <HAL_ADC_ConfigChannel+0x28a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d93a      	bls.n	8001806 <HAL_ADC_ConfigChannel+0xa2>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001798:	d035      	beq.n	8001806 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68d9      	ldr	r1, [r3, #12]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	3b1e      	subs	r3, #30
 80017b0:	2207      	movs	r2, #7
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a8d      	ldr	r2, [pc, #564]	; (80019fc <HAL_ADC_ConfigChannel+0x298>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10a      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68d9      	ldr	r1, [r3, #12]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	061a      	lsls	r2, r3, #24
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017de:	e035      	b.n	800184c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68d9      	ldr	r1, [r3, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4403      	add	r3, r0
 80017f8:	3b1e      	subs	r3, #30
 80017fa:	409a      	lsls	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001804:	e022      	b.n	800184c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6919      	ldr	r1, [r3, #16]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	2207      	movs	r2, #7
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6919      	ldr	r1, [r3, #16]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	4603      	mov	r3, r0
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4403      	add	r3, r0
 8001842:	409a      	lsls	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b06      	cmp	r3, #6
 8001852:	d824      	bhi.n	800189e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b05      	subs	r3, #5
 8001866:	221f      	movs	r2, #31
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3b05      	subs	r3, #5
 8001890:	fa00 f203 	lsl.w	r2, r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
 800189c:	e04c      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d824      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b23      	subs	r3, #35	; 0x23
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b23      	subs	r3, #35	; 0x23
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	e023      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	3b41      	subs	r3, #65	; 0x41
 8001902:	221f      	movs	r2, #31
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43da      	mvns	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	400a      	ands	r2, r1
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b41      	subs	r3, #65	; 0x41
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <HAL_ADC_ConfigChannel+0x29c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10a      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1f4>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a2c      	ldr	r2, [pc, #176]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001952:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001956:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_ADC_ConfigChannel+0x29c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10f      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x21e>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d10b      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001970:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001974:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 800197c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001980:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_ADC_ConfigChannel+0x29c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d12b      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x280>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_ADC_ConfigChannel+0x298>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d003      	beq.n	800199e <HAL_ADC_ConfigChannel+0x23a>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b11      	cmp	r3, #17
 800199c:	d122      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019a8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80019b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_ADC_ConfigChannel+0x298>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_ADC_ConfigChannel+0x2a4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9a      	lsrs	r2, r3, #18
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019d6:	e002      	b.n	80019de <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f9      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	10000012 	.word	0x10000012
 8001a00:	40012000 	.word	0x40012000
 8001a04:	40012300 	.word	0x40012300
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a18:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <ADC_Init+0x1ec>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a77      	ldr	r2, [pc, #476]	; (8001bfc <ADC_Init+0x1ec>)
 8001a1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a24:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <ADC_Init+0x1ec>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4973      	ldr	r1, [pc, #460]	; (8001bfc <ADC_Init+0x1ec>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <ADC_Init+0x1f0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	e00f      	b.n	8001b0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0202 	bic.w	r2, r2, #2
 8001b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	005a      	lsls	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	3b01      	subs	r3, #1
 8001b64:	035a      	lsls	r2, r3, #13
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e007      	b.n	8001b80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	051a      	lsls	r2, r3, #20
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc2:	025a      	lsls	r2, r3, #9
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6899      	ldr	r1, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	029a      	lsls	r2, r3, #10
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	609a      	str	r2, [r3, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40012300 	.word	0x40012300
 8001c00:	0f000001 	.word	0x0f000001

08001c04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d13c      	bne.n	8001c98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d12b      	bne.n	8001c90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d127      	bne.n	8001c90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d119      	bne.n	8001c90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0220 	bic.w	r2, r2, #32
 8001c6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fd49 	bl	8001728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c96:	e00e      	b.n	8001cb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fd53 	bl	8001750 <HAL_ADC_ErrorCallback>
}
 8001caa:	e004      	b.n	8001cb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fd35 	bl	800173c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff fd28 	bl	8001750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <__NVIC_SetPriorityGrouping+0x40>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x40>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00
 8001d4c:	05fa0000 	.word	0x05fa0000

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff fa88 	bl	800144c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e099      	b.n	800207c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f68:	e00f      	b.n	8001f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f6a:	f7ff fa6f 	bl	800144c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d908      	bls.n	8001f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e078      	b.n	800207c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e8      	bne.n	8001f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_DMA_Init+0x158>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4313      	orrs	r3, r2
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0307 	bic.w	r3, r3, #7
 800200a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b04      	cmp	r3, #4
 800201c:	d117      	bne.n	800204e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00e      	beq.n	800204e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fa77 	bl	8002524 <DMA_CheckFifoParam>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800204a:	2301      	movs	r3, #1
 800204c:	e016      	b.n	800207c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa2e 	bl	80024b8 <DMA_CalcBaseAndBitshift>
 800205c:	4603      	mov	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	223f      	movs	r2, #63	; 0x3f
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	f010803f 	.word	0xf010803f

08002088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Start_IT+0x26>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e048      	b.n	8002140 <HAL_DMA_Start_IT+0xb8>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d137      	bne.n	8002132 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9c0 	bl	800245c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	223f      	movs	r2, #63	; 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0216 	orr.w	r2, r2, #22
 80020f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002106:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e005      	b.n	800213e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800213a:	2302      	movs	r3, #2
 800213c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800213e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002154:	4b8e      	ldr	r3, [pc, #568]	; (8002390 <HAL_DMA_IRQHandler+0x248>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a8e      	ldr	r2, [pc, #568]	; (8002394 <HAL_DMA_IRQHandler+0x24c>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a9b      	lsrs	r3, r3, #10
 8002160:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2208      	movs	r2, #8
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01a      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0204 	bic.w	r2, r2, #4
 800219a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2208      	movs	r2, #8
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2201      	movs	r2, #1
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d012      	beq.n	80021ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0202 	orr.w	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2204      	movs	r2, #4
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2204      	movs	r2, #4
 800220e:	409a      	lsls	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	2210      	movs	r2, #16
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d043      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03c      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2210      	movs	r2, #16
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d018      	beq.n	800228a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d108      	bne.n	8002278 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d024      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
 8002276:	e01f      	b.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e016      	b.n	80022b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0208 	bic.w	r2, r2, #8
 80022a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2220      	movs	r2, #32
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 808f 	beq.w	80023e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8087 	beq.w	80023e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2220      	movs	r2, #32
 80022e0:	409a      	lsls	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d136      	bne.n	8002360 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0216 	bic.w	r2, r2, #22
 8002300:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002310:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_DMA_IRQHandler+0x1da>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0208 	bic.w	r2, r2, #8
 8002330:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	223f      	movs	r2, #63	; 0x3f
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4798      	blx	r3
        }
        return;
 800235e:	e079      	b.n	8002454 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01d      	beq.n	80023aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	2b00      	cmp	r3, #0
 8002382:	d031      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e02c      	b.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000
 8002394:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e01e      	b.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0210 	bic.w	r2, r2, #16
 80023c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d032      	beq.n	8002456 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2205      	movs	r2, #5
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d307      	bcc.n	8002430 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f2      	bne.n	8002414 <HAL_DMA_IRQHandler+0x2cc>
 800242e:	e000      	b.n	8002432 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002430:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
 8002452:	e000      	b.n	8002456 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002454:	bf00      	nop
    }
  }
}
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002478:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d108      	bne.n	800249c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800249a:	e007      	b.n	80024ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3b10      	subs	r3, #16
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <DMA_CalcBaseAndBitshift+0x60>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <DMA_CalcBaseAndBitshift+0x64>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d908      	bls.n	80024f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <DMA_CalcBaseAndBitshift+0x68>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	1d1a      	adds	r2, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58
 80024f6:	e006      	b.n	8002506 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <DMA_CalcBaseAndBitshift+0x68>)
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	aaaaaaab 	.word	0xaaaaaaab
 800251c:	080068fc 	.word	0x080068fc
 8002520:	fffffc00 	.word	0xfffffc00

08002524 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11f      	bne.n	800257e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d856      	bhi.n	80025f2 <DMA_CheckFifoParam+0xce>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <DMA_CheckFifoParam+0x28>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	0800256f 	.word	0x0800256f
 8002554:	0800255d 	.word	0x0800255d
 8002558:	080025f3 	.word	0x080025f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d046      	beq.n	80025f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256c:	e043      	b.n	80025f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002576:	d140      	bne.n	80025fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e03d      	b.n	80025fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d121      	bne.n	80025cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d837      	bhi.n	80025fe <DMA_CheckFifoParam+0xda>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <DMA_CheckFifoParam+0x70>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025ab 	.word	0x080025ab
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	080025bd 	.word	0x080025bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      break;
 80025a8:	e030      	b.n	800260c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d025      	beq.n	8002602 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e022      	b.n	8002602 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ca:	e01c      	b.n	8002606 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d903      	bls.n	80025da <DMA_CheckFifoParam+0xb6>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d003      	beq.n	80025e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d8:	e018      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      break;
 80025de:	e015      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e00b      	b.n	800260a <DMA_CheckFifoParam+0xe6>
      break;
 80025f2:	bf00      	nop
 80025f4:	e00a      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e008      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e006      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e004      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;   
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
    }
  } 
  
  return status; 
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e175      	b.n	8002928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 8164 	bne.w	8002922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x56>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80be 	beq.w	8002922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027be:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_GPIO_Init+0x328>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_GPIO_Init+0x32c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d037      	beq.n	800285a <HAL_GPIO_Init+0x23e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_GPIO_Init+0x330>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_GPIO_Init+0x23a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a56      	ldr	r2, [pc, #344]	; (8002950 <HAL_GPIO_Init+0x334>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d02b      	beq.n	8002852 <HAL_GPIO_Init+0x236>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_GPIO_Init+0x338>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d025      	beq.n	800284e <HAL_GPIO_Init+0x232>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a54      	ldr	r2, [pc, #336]	; (8002958 <HAL_GPIO_Init+0x33c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01f      	beq.n	800284a <HAL_GPIO_Init+0x22e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a53      	ldr	r2, [pc, #332]	; (800295c <HAL_GPIO_Init+0x340>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x22a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_GPIO_Init+0x344>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x226>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_GPIO_Init+0x348>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x222>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_GPIO_Init+0x34c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x21e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4f      	ldr	r2, [pc, #316]	; (800296c <HAL_GPIO_Init+0x350>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x21a>
 8002832:	2309      	movs	r3, #9
 8002834:	e012      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002836:	230a      	movs	r3, #10
 8002838:	e010      	b.n	800285c <HAL_GPIO_Init+0x240>
 800283a:	2308      	movs	r3, #8
 800283c:	e00e      	b.n	800285c <HAL_GPIO_Init+0x240>
 800283e:	2307      	movs	r3, #7
 8002840:	e00c      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002842:	2306      	movs	r3, #6
 8002844:	e00a      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002846:	2305      	movs	r3, #5
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x240>
 800284a:	2304      	movs	r3, #4
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x240>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x240>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <HAL_GPIO_Init+0x328>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_GPIO_Init+0x354>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289e:	4a34      	ldr	r2, [pc, #208]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c8:	4a29      	ldr	r2, [pc, #164]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_GPIO_Init+0x354>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f ae86 	bls.w	800263c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40013800 	.word	0x40013800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40021400 	.word	0x40021400
 8002960:	40021800 	.word	0x40021800
 8002964:	40021c00 	.word	0x40021c00
 8002968:	40022000 	.word	0x40022000
 800296c:	40022400 	.word	0x40022400
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fa68 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e006      	b.n	8002a30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d104      	bne.n	8002a42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_I2C_Init+0x11c>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	02008000 	.word	0x02008000

08002ac8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	817b      	strh	r3, [r7, #10]
 8002ada:	460b      	mov	r3, r1
 8002adc:	813b      	strh	r3, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	f040 80f9 	bne.w	8002ce2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_I2C_Mem_Write+0x34>
 8002af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0ed      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Mem_Write+0x4e>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0e6      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b1e:	f7fe fc95 	bl	800144c <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2319      	movs	r3, #25
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f961 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0d1      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2221      	movs	r2, #33	; 0x21
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b68:	88f8      	ldrh	r0, [r7, #6]
 8002b6a:	893a      	ldrh	r2, [r7, #8]
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4603      	mov	r3, r0
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f8c5 	bl	8002d08 <I2C_RequestMemoryWrite>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0a9      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d90e      	bls.n	8002bb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22ff      	movs	r2, #255	; 0xff
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fabd 	bl	8003130 <I2C_TransferConfig>
 8002bb6:	e00f      	b.n	8002bd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 faac 	bl	8003130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f94b 	bl	8002e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e07b      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d034      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x1c8>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d130      	bne.n	8002c90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	2200      	movs	r2, #0
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f8dd 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e04d      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d90e      	bls.n	8002c70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	22ff      	movs	r2, #255	; 0xff
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa61 	bl	8003130 <I2C_TransferConfig>
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	8979      	ldrh	r1, [r7, #10]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa50 	bl	8003130 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d19e      	bne.n	8002bd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f92a 	bl	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e01a      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_I2C_Mem_Write+0x224>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <I2C_RequestMemoryWrite+0xa4>)
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f9fd 	bl	8003130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f89c 	bl	8002e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02c      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d50:	893b      	ldrh	r3, [r7, #8]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
 8002d5a:	e015      	b.n	8002d88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f882 	bl	8002e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e012      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7e:	893b      	ldrh	r3, [r7, #8]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f830 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	80002000 	.word	0x80002000

08002db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d103      	bne.n	8002dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d007      	beq.n	8002dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	619a      	str	r2, [r3, #24]
  }
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e022      	b.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d01e      	beq.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fb1b 	bl	800144c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d113      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e00f      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d0cd      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e84:	e02c      	b.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f870 	bl	8002f70 <I2C_IsErrorOccurred>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e02a      	b.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d01e      	beq.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fe fad3 	bl	800144c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d113      	bne.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d1cb      	bne.n	8002e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f04:	e028      	b.n	8002f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f830 	bl	8002f70 <I2C_IsErrorOccurred>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e026      	b.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fa97 	bl	800144c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d113      	bne.n	8002f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e007      	b.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d1cf      	bne.n	8002f06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d068      	beq.n	800306e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fa4:	e049      	b.n	800303a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d045      	beq.n	800303a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fa4d 	bl	800144c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_IsErrorOccurred+0x54>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d13a      	bne.n	800303a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d121      	bne.n	800302c <I2C_IsErrorOccurred+0xbc>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fee:	d01d      	beq.n	800302c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d01a      	beq.n	800302c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003004:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003006:	f7fe fa21 	bl	800144c <HAL_GetTick>
 800300a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	e00e      	b.n	800302c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800300e:	f7fe fa1d 	bl	800144c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b19      	cmp	r3, #25
 800301a:	d907      	bls.n	800302c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800302a:	e006      	b.n	800303a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d1e9      	bne.n	800300e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d003      	beq.n	8003050 <I2C_IsErrorOccurred+0xe0>
 8003048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0aa      	beq.n	8002fa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003054:	2b00      	cmp	r3, #0
 8003056:	d103      	bne.n	8003060 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2220      	movs	r2, #32
 800305e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003090:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01c      	beq.n	800311e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fe63 	bl	8002db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <I2C_IsErrorOccurred+0x1bc>)
 80030f6:	400b      	ands	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800311e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003122:	4618      	mov	r0, r3
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	4613      	mov	r3, r2
 8003140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003148:	7a7b      	ldrb	r3, [r7, #9]
 800314a:	041b      	lsls	r3, r3, #16
 800314c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003150:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	4313      	orrs	r3, r2
 800315a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800315e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	0d5b      	lsrs	r3, r3, #21
 800316a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <I2C_TransferConfig+0x60>)
 8003170:	430b      	orrs	r3, r1
 8003172:	43db      	mvns	r3, r3
 8003174:	ea02 0103 	and.w	r1, r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	03ff63ff 	.word	0x03ff63ff

08003194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d138      	bne.n	800321c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e032      	b.n	800321e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	d139      	bne.n	80032b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800324a:	2302      	movs	r3, #2
 800324c:	e033      	b.n	80032b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2224      	movs	r2, #36	; 0x24
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800327c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c4:	b08f      	sub	sp, #60	; 0x3c
 80032c6:	af0a      	add	r7, sp, #40	; 0x28
 80032c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e116      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fe96 	bl	8001020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fb76 	bl	8005a04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	687e      	ldr	r6, [r7, #4]
 8003320:	466d      	mov	r5, sp
 8003322:	f106 0410 	add.w	r4, r6, #16
 8003326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003332:	e885 0003 	stmia.w	r5, {r0, r1}
 8003336:	1d33      	adds	r3, r6, #4
 8003338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f002 fb0a 	bl	8005954 <USB_CoreInit>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0d7      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fb64 	bl	8005a26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e04a      	b.n	80033fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	333c      	adds	r3, #60	; 0x3c
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	b298      	uxth	r0, r3
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3344      	adds	r3, #68	; 0x44
 80033a0:	4602      	mov	r2, r0
 80033a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3340      	adds	r3, #64	; 0x40
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3348      	adds	r3, #72	; 0x48
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334c      	adds	r3, #76	; 0x4c
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3354      	adds	r3, #84	; 0x54
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	3301      	adds	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3af      	bcc.n	8003364 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e044      	b.n	8003494 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3b5      	bcc.n	800340a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	687e      	ldr	r6, [r7, #4]
 80034a6:	466d      	mov	r5, sp
 80034a8:	f106 0410 	add.w	r4, r6, #16
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f002 fafd 	bl	8005ac0 <USB_DevInit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e014      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f80b 	bl	800350c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fcbb 	bl	8005e76 <USB_DevDisconnect>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800350c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_PCDEx_ActivateLPM+0x44>)
 800353c:	4313      	orrs	r3, r2
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	10000003 	.word	0x10000003

08003554 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40007000 	.word	0x40007000

08003574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800357c:	2300      	movs	r3, #0
 800357e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e291      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8087 	beq.w	80036a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003598:	4b96      	ldr	r3, [pc, #600]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d00c      	beq.n	80035be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a4:	4b93      	ldr	r3, [pc, #588]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d112      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62>
 80035b0:	4b90      	ldr	r3, [pc, #576]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035be:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d06c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x130>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d168      	bne.n	80036a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e26b      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x7a>
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a83      	ldr	r2, [pc, #524]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e02e      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x9c>
 80035f6:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7e      	ldr	r2, [pc, #504]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7b      	ldr	r2, [pc, #492]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e01d      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0xc0>
 800361a:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a72      	ldr	r2, [pc, #456]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0xd8>
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6b      	ldr	r2, [pc, #428]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fefa 	bl	800144c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fd fef6 	bl	800144c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e21f      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0xe8>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fee6 	bl	800144c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fd fee2 	bl	800144c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e20b      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x110>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d069      	beq.n	8003786 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b2:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x190>
 80036ca:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x17a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1df      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	493d      	ldr	r1, [pc, #244]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e040      	b.n	8003786 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fe98 	bl	800144c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fd fe94 	bl	800144c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1bd      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4929      	ldr	r1, [pc, #164]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
 8003752:	e018      	b.n	8003786 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd fe74 	bl	800144c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003768:	f7fd fe70 	bl	800144c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e199      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d038      	beq.n	8003804 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd fe51 	bl	800144c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd fe4d 	bl	800144c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e176      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x23a>
 80037cc:	e01a      	b.n	8003804 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_RCC_OscConfig+0x280>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7fd fe37 	bl	800144c <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e2:	f7fd fe33 	bl	800144c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d903      	bls.n	80037f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e15c      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
 80037f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b91      	ldr	r3, [pc, #580]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a4 	beq.w	800395a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	4a87      	ldr	r2, [pc, #540]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	6413      	str	r3, [r2, #64]	; 0x40
 800382a:	4b85      	ldr	r3, [pc, #532]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383a:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_OscConfig+0x4d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x4d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x4d0>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fd fdfb 	bl	800144c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fd fdf7 	bl	800144c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	; 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e120      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x4d0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x31a>
 8003880:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	e02d      	b.n	80038ea <HAL_RCC_OscConfig+0x376>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x33c>
 8003896:	4b6a      	ldr	r3, [pc, #424]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a69      	ldr	r2, [pc, #420]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	4b67      	ldr	r3, [pc, #412]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a66      	ldr	r2, [pc, #408]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
 80038ae:	e01c      	b.n	80038ea <HAL_RCC_OscConfig+0x376>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x35e>
 80038b8:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a60      	ldr	r2, [pc, #384]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	4b5e      	ldr	r3, [pc, #376]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a5d      	ldr	r2, [pc, #372]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	e00b      	b.n	80038ea <HAL_RCC_OscConfig+0x376>
 80038d2:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a5a      	ldr	r2, [pc, #360]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d015      	beq.n	800391e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fdab 	bl	800144c <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fda7 	bl	800144c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0ce      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ee      	beq.n	80038fa <HAL_RCC_OscConfig+0x386>
 800391c:	e014      	b.n	8003948 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fd95 	bl	800144c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fd fd91 	bl	800144c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0b8      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ee      	bne.n	8003926 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a3b      	ldr	r2, [pc, #236]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a4 	beq.w	8003aac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d06b      	beq.n	8003a48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d149      	bne.n	8003a0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd fd62 	bl	800144c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd fd5e 	bl	800144c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e087      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	4313      	orrs	r3, r2
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fd32 	bl	800144c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fd2e 	bl	800144c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e057      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x478>
 8003a0a:	e04f      	b.n	8003aac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fd18 	bl	800144c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fd fd14 	bl	800144c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e03d      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4ac>
 8003a3e:	e035      	b.n	8003aac <HAL_RCC_OscConfig+0x538>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x544>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	3b01      	subs	r3, #1
 8003a92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0d0      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	4965      	ldr	r1, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d040      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d115      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e073      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06b      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4936      	ldr	r1, [pc, #216]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fc4c 	bl	800144c <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fc48 	bl	800144c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e053      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d210      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 020f 	bic.w	r2, r3, #15
 8003bf6:	4922      	ldr	r1, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1cc>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1d0>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1d4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fba8 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	080068e4 	.word	0x080068e4
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b094      	sub	sp, #80	; 0x50
 8003c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	f200 80e1 	bhi.w	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc6:	e0db      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ccc:	e0db      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e0d8      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d06:	4622      	mov	r2, r4
 8003d08:	462b      	mov	r3, r5
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4621      	mov	r1, r4
 8003d20:	1a51      	subs	r1, r2, r1
 8003d22:	6139      	str	r1, [r7, #16]
 8003d24:	4629      	mov	r1, r5
 8003d26:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	018b      	lsls	r3, r1, #6
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d42:	4651      	mov	r1, sl
 8003d44:	018a      	lsls	r2, r1, #6
 8003d46:	4651      	mov	r1, sl
 8003d48:	ebb2 0801 	subs.w	r8, r2, r1
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	462b      	mov	r3, r5
 8003d74:	eb49 0303 	adc.w	r3, r9, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d86:	4629      	mov	r1, r5
 8003d88:	024b      	lsls	r3, r1, #9
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d90:	4621      	mov	r1, r4
 8003d92:	024a      	lsls	r2, r1, #9
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da4:	f7fc fa8c 	bl	80002c0 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	e058      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	2200      	movs	r2, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4641      	mov	r1, r8
 8003de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e04:	ebb2 040a 	subs.w	r4, r2, sl
 8003e08:	eb63 050b 	sbc.w	r5, r3, fp
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	464b      	mov	r3, r9
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	028b      	lsls	r3, r1, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e44:	4621      	mov	r1, r4
 8003e46:	028a      	lsls	r2, r1, #10
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	61fa      	str	r2, [r7, #28]
 8003e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e58:	f7fc fa32 	bl	80002c0 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4613      	mov	r3, r2
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3750      	adds	r7, #80	; 0x50
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0a9b      	lsrs	r3, r3, #10
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	080068f4 	.word	0x080068f4

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee4:	f7ff ffdc 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0b5b      	lsrs	r3, r3, #13
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	080068f4 	.word	0x080068f4

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a68      	ldr	r2, [pc, #416]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f3a:	6093      	str	r3, [r2, #8]
 8003f3c:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	4964      	ldr	r1, [pc, #400]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d017      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f62:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	4959      	ldr	r1, [pc, #356]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d017      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f9e:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	494a      	ldr	r1, [pc, #296]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 808b 	beq.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fec:	4b3a      	ldr	r3, [pc, #232]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	4a39      	ldr	r2, [pc, #228]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004004:	4b35      	ldr	r3, [pc, #212]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a34      	ldr	r2, [pc, #208]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd fa1c 	bl	800144c <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fd fa18 	bl	800144c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e357      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004036:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d035      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d114      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd f9e0 	bl	800144c <HAL_GetTick>
 800408c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fd f9dc 	bl	800144c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e319      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ee      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040be:	d111      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ce:	400b      	ands	r3, r1
 80040d0:	4901      	ldr	r1, [pc, #4]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40007000 	.word	0x40007000
 80040e0:	0ffffcff 	.word	0x0ffffcff
 80040e4:	4baa      	ldr	r3, [pc, #680]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4aa9      	ldr	r2, [pc, #676]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	4ba7      	ldr	r3, [pc, #668]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	49a4      	ldr	r1, [pc, #656]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800410e:	4ba0      	ldr	r3, [pc, #640]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004114:	4a9e      	ldr	r2, [pc, #632]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800411e:	4b9c      	ldr	r3, [pc, #624]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004120:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	4999      	ldr	r1, [pc, #612]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414a:	4991      	ldr	r1, [pc, #580]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800415e:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416c:	4988      	ldr	r1, [pc, #544]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004180:	4b83      	ldr	r3, [pc, #524]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418e:	4980      	ldr	r1, [pc, #512]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a2:	4b7b      	ldr	r3, [pc, #492]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4977      	ldr	r1, [pc, #476]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c4:	4b72      	ldr	r3, [pc, #456]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	496f      	ldr	r1, [pc, #444]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041e6:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f023 020c 	bic.w	r2, r3, #12
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	4966      	ldr	r1, [pc, #408]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	495e      	ldr	r1, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800422a:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	4955      	ldr	r1, [pc, #340]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4944      	ldr	r1, [pc, #272]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004290:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	493c      	ldr	r1, [pc, #240]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	4933      	ldr	r1, [pc, #204]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042d4:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e2:	492b      	ldr	r1, [pc, #172]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004304:	4922      	ldr	r1, [pc, #136]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	4912      	ldr	r1, [pc, #72]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004368:	4909      	ldr	r1, [pc, #36]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d006      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80d9 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a01      	ldr	r2, [pc, #4]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004390:	40023800 	.word	0x40023800
 8004394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fd f859 	bl	800144c <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fd f855 	bl	800144c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b64      	cmp	r3, #100	; 0x64
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e194      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b0:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d021      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	0e1b      	lsrs	r3, r3, #24
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	019a      	lsls	r2, r3, #6
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	071b      	lsls	r3, r3, #28
 8004404:	4957      	ldr	r1, [pc, #348]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02e      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d129      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	0f1b      	lsrs	r3, r3, #28
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	431a      	orrs	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	071b      	lsls	r3, r3, #28
 800446c:	493d      	ldr	r1, [pc, #244]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447a:	f023 021f 	bic.w	r2, r3, #31
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	3b01      	subs	r3, #1
 8004484:	4937      	ldr	r1, [pc, #220]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	0e1b      	lsrs	r3, r3, #24
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	0f1b      	lsrs	r3, r3, #28
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	019a      	lsls	r2, r3, #6
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	071b      	lsls	r3, r3, #28
 80044cc:	4925      	ldr	r1, [pc, #148]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d011      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	019a      	lsls	r2, r3, #6
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	071b      	lsls	r3, r3, #28
 80044fc:	4919      	ldr	r1, [pc, #100]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fc ff9c 	bl	800144c <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004518:	f7fc ff98 	bl	800144c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0d7      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	f040 80cd 	bne.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc ff7f 	bl	800144c <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004552:	f7fc ff7b 	bl	800144c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	; 0x64
 800455e:	d903      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0ba      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004564:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004568:	4b5e      	ldr	r3, [pc, #376]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004574:	d0ed      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d12a      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800459e:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045ac:	4b4d      	ldr	r3, [pc, #308]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	0f1b      	lsrs	r3, r3, #28
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	019a      	lsls	r2, r3, #6
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	4944      	ldr	r1, [pc, #272]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045da:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	493d      	ldr	r1, [pc, #244]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d022      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004608:	d11d      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	0f1b      	lsrs	r3, r3, #28
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	431a      	orrs	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	4929      	ldr	r1, [pc, #164]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	0e1b      	lsrs	r3, r3, #24
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004660:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	019a      	lsls	r2, r3, #6
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	4917      	ldr	r1, [pc, #92]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	4911      	ldr	r1, [pc, #68]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fc fecc 	bl	800144c <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046b8:	f7fc fec8 	bl	800144c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e007      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d6:	d1ef      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800

080046e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004706:	f040 808d 	bne.w	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800470a:	4b93      	ldr	r3, [pc, #588]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004710:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004718:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004720:	d07c      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004728:	d87b      	bhi.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004736:	d039      	beq.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004738:	e073      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800473a:	4b87      	ldr	r3, [pc, #540]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004746:	4b84      	ldr	r3, [pc, #528]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474e:	4a83      	ldr	r2, [pc, #524]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e007      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004758:	4b7f      	ldr	r3, [pc, #508]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	4a7f      	ldr	r2, [pc, #508]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004768:	4b7b      	ldr	r3, [pc, #492]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	0e1b      	lsrs	r3, r3, #24
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004776:	4b78      	ldr	r3, [pc, #480]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	fb03 f202 	mul.w	r2, r3, r2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004790:	4b71      	ldr	r3, [pc, #452]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
        break;
 80047aa:	e03b      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047ac:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047b8:	4b67      	ldr	r3, [pc, #412]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	4a66      	ldr	r2, [pc, #408]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e007      	b.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047ca:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d2:	4a63      	ldr	r2, [pc, #396]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80047e8:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	fb03 f202 	mul.w	r2, r3, r2
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004802:	4b55      	ldr	r3, [pc, #340]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
        break;
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800481c:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800481e:	617b      	str	r3, [r7, #20]
        break;
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004822:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	f040 808d 	bne.w	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800483c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004844:	d07c      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800484c:	d87b      	bhi.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485a:	d039      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800485c:	e073      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800485e:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e007      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800487c:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004884:	4a36      	ldr	r2, [pc, #216]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	0e1b      	lsrs	r3, r3, #24
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	fb03 f202 	mul.w	r2, r3, r2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
        break;
 80048ce:	e03b      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d108      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e007      	b.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	fb03 f202 	mul.w	r2, r3, r2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]
        break;
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004942:	617b      	str	r3, [r7, #20]
        break;
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8004946:	bf00      	nop
      }
    }
  }

  return frequency;
 8004948:	697b      	ldr	r3, [r7, #20]
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400
 8004960:	007a1200 	.word	0x007a1200
 8004964:	00bb8000 	.word	0x00bb8000

08004968 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e156      	b.n	8004c34 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fbba 	bl	8001114 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa55 	bl	8004e58 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d00c      	beq.n	80049d0 <HAL_SAI_Init+0x68>
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d80d      	bhi.n	80049d6 <HAL_SAI_Init+0x6e>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SAI_Init+0x5c>
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d003      	beq.n	80049ca <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80049c2:	e008      	b.n	80049d6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
      break;
 80049c8:	e006      	b.n	80049d8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80049ca:	2310      	movs	r3, #16
 80049cc:	61fb      	str	r3, [r7, #28]
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80049d0:	2320      	movs	r3, #32
 80049d2:	61fb      	str	r3, [r7, #28]
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_SAI_Init+0x70>
      break;
 80049d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d81e      	bhi.n	8004a1e <HAL_SAI_Init+0xb6>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <HAL_SAI_Init+0x80>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	080049ff 	.word	0x080049ff
 80049f0:	08004a07 	.word	0x08004a07
 80049f4:	08004a0f 	.word	0x08004a0f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
    }
    break;
 80049fc:	e010      	b.n	8004a20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80049fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a02:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a04:	e00c      	b.n	8004a20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a0a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a0c:	e008      	b.n	8004a20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a12:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004a1c:	e000      	b.n	8004a20 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004a1e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a85      	ldr	r2, [pc, #532]	; (8004c3c <HAL_SAI_Init+0x2d4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_SAI_Init+0xcc>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a84      	ldr	r2, [pc, #528]	; (8004c40 <HAL_SAI_Init+0x2d8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d103      	bne.n	8004a3c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a34:	4a83      	ldr	r2, [pc, #524]	; (8004c44 <HAL_SAI_Init+0x2dc>)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e002      	b.n	8004a42 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a3c:	4a82      	ldr	r2, [pc, #520]	; (8004c48 <HAL_SAI_Init+0x2e0>)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04c      	beq.n	8004ae4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_SAI_Init+0x2d4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_SAI_Init+0xfa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a78      	ldr	r2, [pc, #480]	; (8004c40 <HAL_SAI_Init+0x2d8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d104      	bne.n	8004a6c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a66:	f7ff fe3f 	bl	80046e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a6a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a76      	ldr	r2, [pc, #472]	; (8004c4c <HAL_SAI_Init+0x2e4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_SAI_Init+0x118>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <HAL_SAI_Init+0x2e8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d104      	bne.n	8004a8a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004a80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a84:	f7ff fe30 	bl	80046e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a88:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	461a      	mov	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	025b      	lsls	r3, r3, #9
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	; (8004c54 <HAL_SAI_Init+0x2ec>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	08da      	lsrs	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <HAL_SAI_Init+0x2ec>)
 8004ab4:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	1aca      	subs	r2, r1, r3
 8004ac4:	2a08      	cmp	r2, #8
 8004ac6:	d904      	bls.n	8004ad2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d104      	bne.n	8004ae4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	085a      	lsrs	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_SAI_Init+0x18c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d109      	bne.n	8004b08 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SAI_Init+0x198>
 8004afc:	2300      	movs	r3, #0
 8004afe:	e001      	b.n	8004b04 <HAL_SAI_Init+0x19c>
 8004b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e008      	b.n	8004b1a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d102      	bne.n	8004b16 <HAL_SAI_Init+0x1ae>
 8004b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b14:	e000      	b.n	8004b18 <HAL_SAI_Init+0x1b0>
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <HAL_SAI_Init+0x2f0>)
 8004b26:	400b      	ands	r3, r1
 8004b28:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b3e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	431a      	orrs	r2, r3
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004b52:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b5e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	051b      	lsls	r3, r3, #20
 8004b66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <HAL_SAI_Init+0x2f4>)
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6899      	ldr	r1, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_SAI_Init+0x2f8>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bbe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004bc4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004bca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004bd4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68d9      	ldr	r1, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004bec:	400b      	ands	r3, r1
 8004bee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68d9      	ldr	r1, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40015804 	.word	0x40015804
 8004c40:	40015824 	.word	0x40015824
 8004c44:	40015800 	.word	0x40015800
 8004c48:	40015c00 	.word	0x40015c00
 8004c4c:	40015c04 	.word	0x40015c04
 8004c50:	40015c24 	.word	0x40015c24
 8004c54:	cccccccd 	.word	0xcccccccd
 8004c58:	ff05c010 	.word	0xff05c010
 8004c5c:	ffff1ff0 	.word	0xffff1ff0
 8004c60:	fff88000 	.word	0xfff88000

08004c64 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004c72:	f7fc fbeb 	bl	800144c <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SAI_Transmit_DMA+0x20>
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e093      	b.n	8004db0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 808c 	bne.w	8004dae <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SAI_Transmit_DMA+0x40>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e085      	b.n	8004db0 <HAL_SAI_Transmit_DMA+0x14c>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2212      	movs	r2, #18
 8004cce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd6:	4a38      	ldr	r2, [pc, #224]	; (8004db8 <HAL_SAI_Transmit_DMA+0x154>)
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cde:	4a37      	ldr	r2, [pc, #220]	; (8004dbc <HAL_SAI_Transmit_DMA+0x158>)
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce6:	4a36      	ldr	r2, [pc, #216]	; (8004dc0 <HAL_SAI_Transmit_DMA+0x15c>)
 8004ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	331c      	adds	r3, #28
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d0a:	f7fd f9bd 	bl	8002088 <HAL_DMA_Start_IT>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e047      	b.n	8004db0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004d20:	2100      	movs	r1, #0
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f862 	bl	8004dec <SAI_InterruptFlag>
 8004d28:	4601      	mov	r1, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d46:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004d48:	e015      	b.n	8004d76 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004d4a:	f7fc fb7f 	bl	800144c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d90d      	bls.n	8004d76 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e01c      	b.n	8004db0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0e2      	beq.n	8004d4a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004da0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08004f29 	.word	0x08004f29
 8004dbc:	08004ec9 	.word	0x08004ec9
 8004dc0:	08004f45 	.word	0x08004f45

08004dc4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d103      	bne.n	8004e08 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f043 0308 	orr.w	r3, r3, #8
 8004e06:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d10b      	bne.n	8004e28 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d003      	beq.n	8004e20 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d103      	bne.n	8004e28 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f043 0310 	orr.w	r3, r3, #16
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d003      	beq.n	8004e38 <SAI_InterruptFlag+0x4c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d104      	bne.n	8004e42 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e003      	b.n	8004e4a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004e60:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <SAI_Disable+0x68>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <SAI_Disable+0x6c>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0b1b      	lsrs	r3, r3, #12
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e82:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	60fa      	str	r2, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	72fb      	strb	r3, [r7, #11]
      break;
 8004ea2:	e006      	b.n	8004eb2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e8      	bne.n	8004e84 <SAI_Disable+0x2c>

  return status;
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	95cbec1b 	.word	0x95cbec1b

08004ec8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ede:	d01c      	beq.n	8004f1a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004ef8:	2100      	movs	r1, #0
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff76 	bl	8004dec <SAI_InterruptFlag>
 8004f00:	4603      	mov	r3, r0
 8004f02:	43d9      	mvns	r1, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	400a      	ands	r2, r1
 8004f10:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7fb fb4e 	bl	80005bc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff ff44 	bl	8004dc4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d004      	beq.n	8004f76 <SAI_DMAError+0x32>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d112      	bne.n	8004f9c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004f84:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff ff66 	bl	8004e58 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff ff1b 	bl	8004dd8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e040      	b.n	800503e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fb ffc7 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8af 	bl	800514c <UART_SetConfig>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e022      	b.n	800503e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fb07 	bl	8005614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb8e 	bl	8005758 <UART_CheckIdleState>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08a      	sub	sp, #40	; 0x28
 800504a:	af02      	add	r7, sp, #8
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505a:	2b20      	cmp	r3, #32
 800505c:	d171      	bne.n	8005142 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_UART_Transmit+0x24>
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e06a      	b.n	8005144 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507c:	f7fc f9e6 	bl	800144c <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	d108      	bne.n	80050ae <HAL_UART_Transmit+0x68>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e003      	b.n	80050b6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050b6:	e02c      	b.n	8005112 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fb7f 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e038      	b.n	8005144 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	3302      	adds	r3, #2
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e007      	b.n	8005100 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1cc      	bne.n	80050b8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	2140      	movs	r1, #64	; 0x40
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fb4c 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e005      	b.n	8005144 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4ba6      	ldr	r3, [pc, #664]	; (8005410 <UART_SetConfig+0x2c4>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6979      	ldr	r1, [r7, #20]
 8005180:	430b      	orrs	r3, r1
 8005182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a94      	ldr	r2, [pc, #592]	; (8005414 <UART_SetConfig+0x2c8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d120      	bne.n	800520a <UART_SetConfig+0xbe>
 80051c8:	4b93      	ldr	r3, [pc, #588]	; (8005418 <UART_SetConfig+0x2cc>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d816      	bhi.n	8005204 <UART_SetConfig+0xb8>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x90>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	080051f3 	.word	0x080051f3
 80051e8:	080051ff 	.word	0x080051ff
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e150      	b.n	8005494 <UART_SetConfig+0x348>
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e14d      	b.n	8005494 <UART_SetConfig+0x348>
 80051f8:	2304      	movs	r3, #4
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e14a      	b.n	8005494 <UART_SetConfig+0x348>
 80051fe:	2308      	movs	r3, #8
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e147      	b.n	8005494 <UART_SetConfig+0x348>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e144      	b.n	8005494 <UART_SetConfig+0x348>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a83      	ldr	r2, [pc, #524]	; (800541c <UART_SetConfig+0x2d0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d132      	bne.n	800527a <UART_SetConfig+0x12e>
 8005214:	4b80      	ldr	r3, [pc, #512]	; (8005418 <UART_SetConfig+0x2cc>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d828      	bhi.n	8005274 <UART_SetConfig+0x128>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0xdc>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800525d 	.word	0x0800525d
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	08005269 	.word	0x08005269
 800523c:	08005275 	.word	0x08005275
 8005240:	08005275 	.word	0x08005275
 8005244:	08005275 	.word	0x08005275
 8005248:	08005263 	.word	0x08005263
 800524c:	08005275 	.word	0x08005275
 8005250:	08005275 	.word	0x08005275
 8005254:	08005275 	.word	0x08005275
 8005258:	0800526f 	.word	0x0800526f
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e118      	b.n	8005494 <UART_SetConfig+0x348>
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e115      	b.n	8005494 <UART_SetConfig+0x348>
 8005268:	2304      	movs	r3, #4
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e112      	b.n	8005494 <UART_SetConfig+0x348>
 800526e:	2308      	movs	r3, #8
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e10f      	b.n	8005494 <UART_SetConfig+0x348>
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e10c      	b.n	8005494 <UART_SetConfig+0x348>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a68      	ldr	r2, [pc, #416]	; (8005420 <UART_SetConfig+0x2d4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d120      	bne.n	80052c6 <UART_SetConfig+0x17a>
 8005284:	4b64      	ldr	r3, [pc, #400]	; (8005418 <UART_SetConfig+0x2cc>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800528e:	2b30      	cmp	r3, #48	; 0x30
 8005290:	d013      	beq.n	80052ba <UART_SetConfig+0x16e>
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d814      	bhi.n	80052c0 <UART_SetConfig+0x174>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d009      	beq.n	80052ae <UART_SetConfig+0x162>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d810      	bhi.n	80052c0 <UART_SetConfig+0x174>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <UART_SetConfig+0x15c>
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d006      	beq.n	80052b4 <UART_SetConfig+0x168>
 80052a6:	e00b      	b.n	80052c0 <UART_SetConfig+0x174>
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0f2      	b.n	8005494 <UART_SetConfig+0x348>
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e0ef      	b.n	8005494 <UART_SetConfig+0x348>
 80052b4:	2304      	movs	r3, #4
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0ec      	b.n	8005494 <UART_SetConfig+0x348>
 80052ba:	2308      	movs	r3, #8
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e0e9      	b.n	8005494 <UART_SetConfig+0x348>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e0e6      	b.n	8005494 <UART_SetConfig+0x348>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a56      	ldr	r2, [pc, #344]	; (8005424 <UART_SetConfig+0x2d8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d120      	bne.n	8005312 <UART_SetConfig+0x1c6>
 80052d0:	4b51      	ldr	r3, [pc, #324]	; (8005418 <UART_SetConfig+0x2cc>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052da:	2bc0      	cmp	r3, #192	; 0xc0
 80052dc:	d013      	beq.n	8005306 <UART_SetConfig+0x1ba>
 80052de:	2bc0      	cmp	r3, #192	; 0xc0
 80052e0:	d814      	bhi.n	800530c <UART_SetConfig+0x1c0>
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0x1ae>
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	d810      	bhi.n	800530c <UART_SetConfig+0x1c0>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <UART_SetConfig+0x1a8>
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d006      	beq.n	8005300 <UART_SetConfig+0x1b4>
 80052f2:	e00b      	b.n	800530c <UART_SetConfig+0x1c0>
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0cc      	b.n	8005494 <UART_SetConfig+0x348>
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0c9      	b.n	8005494 <UART_SetConfig+0x348>
 8005300:	2304      	movs	r3, #4
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0c6      	b.n	8005494 <UART_SetConfig+0x348>
 8005306:	2308      	movs	r3, #8
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0c3      	b.n	8005494 <UART_SetConfig+0x348>
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e0c0      	b.n	8005494 <UART_SetConfig+0x348>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a44      	ldr	r2, [pc, #272]	; (8005428 <UART_SetConfig+0x2dc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d125      	bne.n	8005368 <UART_SetConfig+0x21c>
 800531c:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <UART_SetConfig+0x2cc>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532a:	d017      	beq.n	800535c <UART_SetConfig+0x210>
 800532c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005330:	d817      	bhi.n	8005362 <UART_SetConfig+0x216>
 8005332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005336:	d00b      	beq.n	8005350 <UART_SetConfig+0x204>
 8005338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533c:	d811      	bhi.n	8005362 <UART_SetConfig+0x216>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <UART_SetConfig+0x1fe>
 8005342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005346:	d006      	beq.n	8005356 <UART_SetConfig+0x20a>
 8005348:	e00b      	b.n	8005362 <UART_SetConfig+0x216>
 800534a:	2300      	movs	r3, #0
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0a1      	b.n	8005494 <UART_SetConfig+0x348>
 8005350:	2302      	movs	r3, #2
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e09e      	b.n	8005494 <UART_SetConfig+0x348>
 8005356:	2304      	movs	r3, #4
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e09b      	b.n	8005494 <UART_SetConfig+0x348>
 800535c:	2308      	movs	r3, #8
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e098      	b.n	8005494 <UART_SetConfig+0x348>
 8005362:	2310      	movs	r3, #16
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e095      	b.n	8005494 <UART_SetConfig+0x348>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2f      	ldr	r2, [pc, #188]	; (800542c <UART_SetConfig+0x2e0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d125      	bne.n	80053be <UART_SetConfig+0x272>
 8005372:	4b29      	ldr	r3, [pc, #164]	; (8005418 <UART_SetConfig+0x2cc>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800537c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005380:	d017      	beq.n	80053b2 <UART_SetConfig+0x266>
 8005382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005386:	d817      	bhi.n	80053b8 <UART_SetConfig+0x26c>
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538c:	d00b      	beq.n	80053a6 <UART_SetConfig+0x25a>
 800538e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005392:	d811      	bhi.n	80053b8 <UART_SetConfig+0x26c>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <UART_SetConfig+0x254>
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539c:	d006      	beq.n	80053ac <UART_SetConfig+0x260>
 800539e:	e00b      	b.n	80053b8 <UART_SetConfig+0x26c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e076      	b.n	8005494 <UART_SetConfig+0x348>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e073      	b.n	8005494 <UART_SetConfig+0x348>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e070      	b.n	8005494 <UART_SetConfig+0x348>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e06d      	b.n	8005494 <UART_SetConfig+0x348>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e06a      	b.n	8005494 <UART_SetConfig+0x348>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <UART_SetConfig+0x2e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d138      	bne.n	800543a <UART_SetConfig+0x2ee>
 80053c8:	4b13      	ldr	r3, [pc, #76]	; (8005418 <UART_SetConfig+0x2cc>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d6:	d017      	beq.n	8005408 <UART_SetConfig+0x2bc>
 80053d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053dc:	d82a      	bhi.n	8005434 <UART_SetConfig+0x2e8>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	d00b      	beq.n	80053fc <UART_SetConfig+0x2b0>
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d824      	bhi.n	8005434 <UART_SetConfig+0x2e8>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <UART_SetConfig+0x2aa>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d006      	beq.n	8005402 <UART_SetConfig+0x2b6>
 80053f4:	e01e      	b.n	8005434 <UART_SetConfig+0x2e8>
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e04b      	b.n	8005494 <UART_SetConfig+0x348>
 80053fc:	2302      	movs	r3, #2
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e048      	b.n	8005494 <UART_SetConfig+0x348>
 8005402:	2304      	movs	r3, #4
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e045      	b.n	8005494 <UART_SetConfig+0x348>
 8005408:	2308      	movs	r3, #8
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e042      	b.n	8005494 <UART_SetConfig+0x348>
 800540e:	bf00      	nop
 8005410:	efff69f3 	.word	0xefff69f3
 8005414:	40011000 	.word	0x40011000
 8005418:	40023800 	.word	0x40023800
 800541c:	40004400 	.word	0x40004400
 8005420:	40004800 	.word	0x40004800
 8005424:	40004c00 	.word	0x40004c00
 8005428:	40005000 	.word	0x40005000
 800542c:	40011400 	.word	0x40011400
 8005430:	40007800 	.word	0x40007800
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e02c      	b.n	8005494 <UART_SetConfig+0x348>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a72      	ldr	r2, [pc, #456]	; (8005608 <UART_SetConfig+0x4bc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d125      	bne.n	8005490 <UART_SetConfig+0x344>
 8005444:	4b71      	ldr	r3, [pc, #452]	; (800560c <UART_SetConfig+0x4c0>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800544e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005452:	d017      	beq.n	8005484 <UART_SetConfig+0x338>
 8005454:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005458:	d817      	bhi.n	800548a <UART_SetConfig+0x33e>
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	d00b      	beq.n	8005478 <UART_SetConfig+0x32c>
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005464:	d811      	bhi.n	800548a <UART_SetConfig+0x33e>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <UART_SetConfig+0x326>
 800546a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546e:	d006      	beq.n	800547e <UART_SetConfig+0x332>
 8005470:	e00b      	b.n	800548a <UART_SetConfig+0x33e>
 8005472:	2300      	movs	r3, #0
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e00d      	b.n	8005494 <UART_SetConfig+0x348>
 8005478:	2302      	movs	r3, #2
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e00a      	b.n	8005494 <UART_SetConfig+0x348>
 800547e:	2304      	movs	r3, #4
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e007      	b.n	8005494 <UART_SetConfig+0x348>
 8005484:	2308      	movs	r3, #8
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e004      	b.n	8005494 <UART_SetConfig+0x348>
 800548a:	2310      	movs	r3, #16
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e001      	b.n	8005494 <UART_SetConfig+0x348>
 8005490:	2310      	movs	r3, #16
 8005492:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d15b      	bne.n	8005556 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800549e:	7ffb      	ldrb	r3, [r7, #31]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d828      	bhi.n	80054f6 <UART_SetConfig+0x3aa>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x360>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fcf2 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 80054d4:	61b8      	str	r0, [r7, #24]
        break;
 80054d6:	e013      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe fd02 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 80054dc:	61b8      	str	r0, [r7, #24]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <UART_SetConfig+0x4c4>)
 80054e2:	61bb      	str	r3, [r7, #24]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fbd5 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 80054ea:	61b8      	str	r0, [r7, #24]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	61bb      	str	r3, [r7, #24]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	77bb      	strb	r3, [r7, #30]
        break;
 80054fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d074      	beq.n	80055f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d916      	bls.n	8005550 <UART_SetConfig+0x404>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d212      	bcs.n	8005550 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f023 030f 	bic.w	r3, r3, #15
 8005532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b29a      	uxth	r2, r3
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	4313      	orrs	r3, r2
 8005544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	89fa      	ldrh	r2, [r7, #14]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e04f      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77bb      	strb	r3, [r7, #30]
 8005554:	e04c      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d828      	bhi.n	80055ae <UART_SetConfig+0x462>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x418>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fc96 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fca6 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8005594:	61b8      	str	r0, [r7, #24]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <UART_SetConfig+0x4c4>)
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fb79 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 80055a2:	61b8      	str	r0, [r7, #24]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77bb      	strb	r3, [r7, #30]
        break;
 80055b6:	bf00      	nop
    }

    if (pclk != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085a      	lsrs	r2, r3, #1
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b0f      	cmp	r3, #15
 80055d6:	d909      	bls.n	80055ec <UART_SetConfig+0x4a0>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055de:	d205      	bcs.n	80055ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e001      	b.n	80055f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40007c00 	.word	0x40007c00
 800560c:	40023800 	.word	0x40023800
 8005610:	00f42400 	.word	0x00f42400

08005614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005712:	d10a      	bne.n	800572a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fb fe70 	bl	800144c <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10e      	bne.n	800579a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f81b 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e011      	b.n	80057be <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b09c      	sub	sp, #112	; 0x70
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	e0a7      	b.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	f000 80a3 	beq.w	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fb fe33 	bl	800144c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13f      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800580c:	667b      	str	r3, [r7, #100]	; 0x64
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005818:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800581c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	663b      	str	r3, [r7, #96]	; 0x60
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800584a:	64ba      	str	r2, [r7, #72]	; 0x48
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e068      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d050      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005894:	d148      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800589e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
 80058c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058f2:	623a      	str	r2, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e010      	b.n	800594a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	429a      	cmp	r2, r3
 8005944:	f43f af48 	beq.w	80057d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3770      	adds	r7, #112	; 0x70
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d120      	bne.n	80059ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <USB_CoreInit+0xac>)
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa96 	bl	8005ed4 <USB_CoreReset>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	e010      	b.n	80059d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa8a 	bl	8005ed4 <USB_CoreReset>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10b      	bne.n	80059ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f043 0206 	orr.w	r2, r3, #6
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f043 0220 	orr.w	r2, r3, #32
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fa:	b004      	add	sp, #16
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	ffbdffbf 	.word	0xffbdffbf

08005a04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 0201 	bic.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d115      	bne.n	8005a74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7fb fd05 	bl	8001464 <HAL_Delay>
      ms++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fa29 	bl	8005eb8 <USB_GetMode>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d01e      	beq.n	8005aaa <USB_SetCurrentMode+0x84>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b31      	cmp	r3, #49	; 0x31
 8005a70:	d9f0      	bls.n	8005a54 <USB_SetCurrentMode+0x2e>
 8005a72:	e01a      	b.n	8005aaa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d115      	bne.n	8005aa6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a86:	2001      	movs	r0, #1
 8005a88:	f7fb fcec 	bl	8001464 <HAL_Delay>
      ms++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa10 	bl	8005eb8 <USB_GetMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <USB_SetCurrentMode+0x84>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b31      	cmp	r3, #49	; 0x31
 8005aa2:	d9f0      	bls.n	8005a86 <USB_SetCurrentMode+0x60>
 8005aa4:	e001      	b.n	8005aaa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e005      	b.n	8005ab6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b32      	cmp	r3, #50	; 0x32
 8005aae:	d101      	bne.n	8005ab4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e009      	b.n	8005af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3340      	adds	r3, #64	; 0x40
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	2200      	movs	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b0e      	cmp	r3, #14
 8005af8:	d9f2      	bls.n	8005ae0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11c      	bne.n	8005b3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f043 0302 	orr.w	r3, r3, #2
 8005b12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e005      	b.n	8005b46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	4619      	mov	r1, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	461a      	mov	r2, r3
 8005b62:	680b      	ldr	r3, [r1, #0]
 8005b64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d10c      	bne.n	8005b86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f965 	bl	8005e44 <USB_SetDevSpeed>
 8005b7a:	e008      	b.n	8005b8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f960 	bl	8005e44 <USB_SetDevSpeed>
 8005b84:	e003      	b.n	8005b8e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b86:	2103      	movs	r1, #3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f95b 	bl	8005e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b8e:	2110      	movs	r1, #16
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8f3 	bl	8005d7c <USB_FlushTxFifo>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f91f 	bl	8005de4 <USB_FlushRxFifo>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	e043      	b.n	8005c62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf0:	d118      	bne.n	8005c24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	461a      	mov	r2, r3
 8005c06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e013      	b.n	8005c36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e008      	b.n	8005c36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d3b7      	bcc.n	8005bda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e043      	b.n	8005cf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	d118      	bne.n	8005cba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e013      	b.n	8005ccc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e008      	b.n	8005ccc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	461a      	mov	r2, r3
 8005cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3b7      	bcc.n	8005c70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f043 0210 	orr.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <USB_DevInit+0x2b4>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f043 0208 	orr.w	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <USB_DevInit+0x2b8>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	803c3800 	.word	0x803c3800
 8005d78:	40000004 	.word	0x40000004

08005d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <USB_FlushTxFifo+0x64>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e01b      	b.n	8005dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	daf2      	bge.n	8005d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	019b      	lsls	r3, r3, #6
 8005dac:	f043 0220 	orr.w	r2, r3, #32
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <USB_FlushTxFifo+0x64>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e006      	b.n	8005dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d0f0      	beq.n	8005db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	00030d40 	.word	0x00030d40

08005de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <USB_FlushRxFifo+0x5c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e018      	b.n	8005e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	daf2      	bge.n	8005df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2210      	movs	r2, #16
 8005e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a08      	ldr	r2, [pc, #32]	; (8005e40 <USB_FlushRxFifo+0x5c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e006      	b.n	8005e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d0f0      	beq.n	8005e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	00030d40 	.word	0x00030d40

08005e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e90:	f023 0303 	bic.w	r3, r3, #3
 8005e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea4:	f043 0302 	orr.w	r3, r3, #2
 8005ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <USB_CoreReset+0x64>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e01b      	b.n	8005f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	daf2      	bge.n	8005ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <USB_CoreReset+0x64>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d901      	bls.n	8005f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e006      	b.n	8005f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d0f0      	beq.n	8005f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	00030d40 	.word	0x00030d40

08005f3c <siprintf>:
 8005f3c:	b40e      	push	{r1, r2, r3}
 8005f3e:	b500      	push	{lr}
 8005f40:	b09c      	sub	sp, #112	; 0x70
 8005f42:	ab1d      	add	r3, sp, #116	; 0x74
 8005f44:	9002      	str	r0, [sp, #8]
 8005f46:	9006      	str	r0, [sp, #24]
 8005f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f4c:	4809      	ldr	r0, [pc, #36]	; (8005f74 <siprintf+0x38>)
 8005f4e:	9107      	str	r1, [sp, #28]
 8005f50:	9104      	str	r1, [sp, #16]
 8005f52:	4909      	ldr	r1, [pc, #36]	; (8005f78 <siprintf+0x3c>)
 8005f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f58:	9105      	str	r1, [sp, #20]
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	a902      	add	r1, sp, #8
 8005f60:	f000 f992 	bl	8006288 <_svfiprintf_r>
 8005f64:	9b02      	ldr	r3, [sp, #8]
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	b01c      	add	sp, #112	; 0x70
 8005f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f70:	b003      	add	sp, #12
 8005f72:	4770      	bx	lr
 8005f74:	20000058 	.word	0x20000058
 8005f78:	ffff0208 	.word	0xffff0208

08005f7c <memset>:
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <__errno>:
 8005f8c:	4b01      	ldr	r3, [pc, #4]	; (8005f94 <__errno+0x8>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000058 	.word	0x20000058

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	; (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	; (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4d0b      	ldr	r5, [pc, #44]	; (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	; (8005fdc <__libc_init_array+0x44>)
 8005fac:	f000 fc6a 	bl	8006884 <_init>
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08006940 	.word	0x08006940
 8005fd4:	08006940 	.word	0x08006940
 8005fd8:	08006940 	.word	0x08006940
 8005fdc:	08006944 	.word	0x08006944

08005fe0 <__retarget_lock_acquire_recursive>:
 8005fe0:	4770      	bx	lr

08005fe2 <__retarget_lock_release_recursive>:
 8005fe2:	4770      	bx	lr

08005fe4 <_free_r>:
 8005fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	d044      	beq.n	8006074 <_free_r+0x90>
 8005fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fee:	9001      	str	r0, [sp, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ff6:	bfb8      	it	lt
 8005ff8:	18e4      	addlt	r4, r4, r3
 8005ffa:	f000 f8df 	bl	80061bc <__malloc_lock>
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <_free_r+0x94>)
 8006000:	9801      	ldr	r0, [sp, #4]
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	b933      	cbnz	r3, 8006014 <_free_r+0x30>
 8006006:	6063      	str	r3, [r4, #4]
 8006008:	6014      	str	r4, [r2, #0]
 800600a:	b003      	add	sp, #12
 800600c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006010:	f000 b8da 	b.w	80061c8 <__malloc_unlock>
 8006014:	42a3      	cmp	r3, r4
 8006016:	d908      	bls.n	800602a <_free_r+0x46>
 8006018:	6825      	ldr	r5, [r4, #0]
 800601a:	1961      	adds	r1, r4, r5
 800601c:	428b      	cmp	r3, r1
 800601e:	bf01      	itttt	eq
 8006020:	6819      	ldreq	r1, [r3, #0]
 8006022:	685b      	ldreq	r3, [r3, #4]
 8006024:	1949      	addeq	r1, r1, r5
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	e7ed      	b.n	8006006 <_free_r+0x22>
 800602a:	461a      	mov	r2, r3
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	b10b      	cbz	r3, 8006034 <_free_r+0x50>
 8006030:	42a3      	cmp	r3, r4
 8006032:	d9fa      	bls.n	800602a <_free_r+0x46>
 8006034:	6811      	ldr	r1, [r2, #0]
 8006036:	1855      	adds	r5, r2, r1
 8006038:	42a5      	cmp	r5, r4
 800603a:	d10b      	bne.n	8006054 <_free_r+0x70>
 800603c:	6824      	ldr	r4, [r4, #0]
 800603e:	4421      	add	r1, r4
 8006040:	1854      	adds	r4, r2, r1
 8006042:	42a3      	cmp	r3, r4
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	d1e0      	bne.n	800600a <_free_r+0x26>
 8006048:	681c      	ldr	r4, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	6053      	str	r3, [r2, #4]
 800604e:	440c      	add	r4, r1
 8006050:	6014      	str	r4, [r2, #0]
 8006052:	e7da      	b.n	800600a <_free_r+0x26>
 8006054:	d902      	bls.n	800605c <_free_r+0x78>
 8006056:	230c      	movs	r3, #12
 8006058:	6003      	str	r3, [r0, #0]
 800605a:	e7d6      	b.n	800600a <_free_r+0x26>
 800605c:	6825      	ldr	r5, [r4, #0]
 800605e:	1961      	adds	r1, r4, r5
 8006060:	428b      	cmp	r3, r1
 8006062:	bf04      	itt	eq
 8006064:	6819      	ldreq	r1, [r3, #0]
 8006066:	685b      	ldreq	r3, [r3, #4]
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	bf04      	itt	eq
 800606c:	1949      	addeq	r1, r1, r5
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	6054      	str	r4, [r2, #4]
 8006072:	e7ca      	b.n	800600a <_free_r+0x26>
 8006074:	b003      	add	sp, #12
 8006076:	bd30      	pop	{r4, r5, pc}
 8006078:	20000960 	.word	0x20000960

0800607c <sbrk_aligned>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4e0e      	ldr	r6, [pc, #56]	; (80060b8 <sbrk_aligned+0x3c>)
 8006080:	460c      	mov	r4, r1
 8006082:	6831      	ldr	r1, [r6, #0]
 8006084:	4605      	mov	r5, r0
 8006086:	b911      	cbnz	r1, 800608e <sbrk_aligned+0x12>
 8006088:	f000 fba6 	bl	80067d8 <_sbrk_r>
 800608c:	6030      	str	r0, [r6, #0]
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f000 fba1 	bl	80067d8 <_sbrk_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d00a      	beq.n	80060b0 <sbrk_aligned+0x34>
 800609a:	1cc4      	adds	r4, r0, #3
 800609c:	f024 0403 	bic.w	r4, r4, #3
 80060a0:	42a0      	cmp	r0, r4
 80060a2:	d007      	beq.n	80060b4 <sbrk_aligned+0x38>
 80060a4:	1a21      	subs	r1, r4, r0
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 fb96 	bl	80067d8 <_sbrk_r>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d101      	bne.n	80060b4 <sbrk_aligned+0x38>
 80060b0:	f04f 34ff 	mov.w	r4, #4294967295
 80060b4:	4620      	mov	r0, r4
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	20000964 	.word	0x20000964

080060bc <_malloc_r>:
 80060bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c0:	1ccd      	adds	r5, r1, #3
 80060c2:	f025 0503 	bic.w	r5, r5, #3
 80060c6:	3508      	adds	r5, #8
 80060c8:	2d0c      	cmp	r5, #12
 80060ca:	bf38      	it	cc
 80060cc:	250c      	movcc	r5, #12
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	4607      	mov	r7, r0
 80060d2:	db01      	blt.n	80060d8 <_malloc_r+0x1c>
 80060d4:	42a9      	cmp	r1, r5
 80060d6:	d905      	bls.n	80060e4 <_malloc_r+0x28>
 80060d8:	230c      	movs	r3, #12
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	2600      	movs	r6, #0
 80060de:	4630      	mov	r0, r6
 80060e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061b8 <_malloc_r+0xfc>
 80060e8:	f000 f868 	bl	80061bc <__malloc_lock>
 80060ec:	f8d8 3000 	ldr.w	r3, [r8]
 80060f0:	461c      	mov	r4, r3
 80060f2:	bb5c      	cbnz	r4, 800614c <_malloc_r+0x90>
 80060f4:	4629      	mov	r1, r5
 80060f6:	4638      	mov	r0, r7
 80060f8:	f7ff ffc0 	bl	800607c <sbrk_aligned>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	4604      	mov	r4, r0
 8006100:	d155      	bne.n	80061ae <_malloc_r+0xf2>
 8006102:	f8d8 4000 	ldr.w	r4, [r8]
 8006106:	4626      	mov	r6, r4
 8006108:	2e00      	cmp	r6, #0
 800610a:	d145      	bne.n	8006198 <_malloc_r+0xdc>
 800610c:	2c00      	cmp	r4, #0
 800610e:	d048      	beq.n	80061a2 <_malloc_r+0xe6>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	4631      	mov	r1, r6
 8006114:	4638      	mov	r0, r7
 8006116:	eb04 0903 	add.w	r9, r4, r3
 800611a:	f000 fb5d 	bl	80067d8 <_sbrk_r>
 800611e:	4581      	cmp	r9, r0
 8006120:	d13f      	bne.n	80061a2 <_malloc_r+0xe6>
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	1a6d      	subs	r5, r5, r1
 8006126:	4629      	mov	r1, r5
 8006128:	4638      	mov	r0, r7
 800612a:	f7ff ffa7 	bl	800607c <sbrk_aligned>
 800612e:	3001      	adds	r0, #1
 8006130:	d037      	beq.n	80061a2 <_malloc_r+0xe6>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	442b      	add	r3, r5
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	f8d8 3000 	ldr.w	r3, [r8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d038      	beq.n	80061b2 <_malloc_r+0xf6>
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	42a2      	cmp	r2, r4
 8006144:	d12b      	bne.n	800619e <_malloc_r+0xe2>
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	e00f      	b.n	800616c <_malloc_r+0xb0>
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	1b52      	subs	r2, r2, r5
 8006150:	d41f      	bmi.n	8006192 <_malloc_r+0xd6>
 8006152:	2a0b      	cmp	r2, #11
 8006154:	d917      	bls.n	8006186 <_malloc_r+0xca>
 8006156:	1961      	adds	r1, r4, r5
 8006158:	42a3      	cmp	r3, r4
 800615a:	6025      	str	r5, [r4, #0]
 800615c:	bf18      	it	ne
 800615e:	6059      	strne	r1, [r3, #4]
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	bf08      	it	eq
 8006164:	f8c8 1000 	streq.w	r1, [r8]
 8006168:	5162      	str	r2, [r4, r5]
 800616a:	604b      	str	r3, [r1, #4]
 800616c:	4638      	mov	r0, r7
 800616e:	f104 060b 	add.w	r6, r4, #11
 8006172:	f000 f829 	bl	80061c8 <__malloc_unlock>
 8006176:	f026 0607 	bic.w	r6, r6, #7
 800617a:	1d23      	adds	r3, r4, #4
 800617c:	1af2      	subs	r2, r6, r3
 800617e:	d0ae      	beq.n	80060de <_malloc_r+0x22>
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	50a3      	str	r3, [r4, r2]
 8006184:	e7ab      	b.n	80060de <_malloc_r+0x22>
 8006186:	42a3      	cmp	r3, r4
 8006188:	6862      	ldr	r2, [r4, #4]
 800618a:	d1dd      	bne.n	8006148 <_malloc_r+0x8c>
 800618c:	f8c8 2000 	str.w	r2, [r8]
 8006190:	e7ec      	b.n	800616c <_malloc_r+0xb0>
 8006192:	4623      	mov	r3, r4
 8006194:	6864      	ldr	r4, [r4, #4]
 8006196:	e7ac      	b.n	80060f2 <_malloc_r+0x36>
 8006198:	4634      	mov	r4, r6
 800619a:	6876      	ldr	r6, [r6, #4]
 800619c:	e7b4      	b.n	8006108 <_malloc_r+0x4c>
 800619e:	4613      	mov	r3, r2
 80061a0:	e7cc      	b.n	800613c <_malloc_r+0x80>
 80061a2:	230c      	movs	r3, #12
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4638      	mov	r0, r7
 80061a8:	f000 f80e 	bl	80061c8 <__malloc_unlock>
 80061ac:	e797      	b.n	80060de <_malloc_r+0x22>
 80061ae:	6025      	str	r5, [r4, #0]
 80061b0:	e7dc      	b.n	800616c <_malloc_r+0xb0>
 80061b2:	605b      	str	r3, [r3, #4]
 80061b4:	deff      	udf	#255	; 0xff
 80061b6:	bf00      	nop
 80061b8:	20000960 	.word	0x20000960

080061bc <__malloc_lock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_lock+0x8>)
 80061be:	f7ff bf0f 	b.w	8005fe0 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	2000095c 	.word	0x2000095c

080061c8 <__malloc_unlock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_unlock+0x8>)
 80061ca:	f7ff bf0a 	b.w	8005fe2 <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	2000095c 	.word	0x2000095c

080061d4 <__ssputs_r>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	688e      	ldr	r6, [r1, #8]
 80061da:	461f      	mov	r7, r3
 80061dc:	42be      	cmp	r6, r7
 80061de:	680b      	ldr	r3, [r1, #0]
 80061e0:	4682      	mov	sl, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4690      	mov	r8, r2
 80061e6:	d82c      	bhi.n	8006242 <__ssputs_r+0x6e>
 80061e8:	898a      	ldrh	r2, [r1, #12]
 80061ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061ee:	d026      	beq.n	800623e <__ssputs_r+0x6a>
 80061f0:	6965      	ldr	r5, [r4, #20]
 80061f2:	6909      	ldr	r1, [r1, #16]
 80061f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061f8:	eba3 0901 	sub.w	r9, r3, r1
 80061fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006200:	1c7b      	adds	r3, r7, #1
 8006202:	444b      	add	r3, r9
 8006204:	106d      	asrs	r5, r5, #1
 8006206:	429d      	cmp	r5, r3
 8006208:	bf38      	it	cc
 800620a:	461d      	movcc	r5, r3
 800620c:	0553      	lsls	r3, r2, #21
 800620e:	d527      	bpl.n	8006260 <__ssputs_r+0x8c>
 8006210:	4629      	mov	r1, r5
 8006212:	f7ff ff53 	bl	80060bc <_malloc_r>
 8006216:	4606      	mov	r6, r0
 8006218:	b360      	cbz	r0, 8006274 <__ssputs_r+0xa0>
 800621a:	6921      	ldr	r1, [r4, #16]
 800621c:	464a      	mov	r2, r9
 800621e:	f000 faeb 	bl	80067f8 <memcpy>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622c:	81a3      	strh	r3, [r4, #12]
 800622e:	6126      	str	r6, [r4, #16]
 8006230:	6165      	str	r5, [r4, #20]
 8006232:	444e      	add	r6, r9
 8006234:	eba5 0509 	sub.w	r5, r5, r9
 8006238:	6026      	str	r6, [r4, #0]
 800623a:	60a5      	str	r5, [r4, #8]
 800623c:	463e      	mov	r6, r7
 800623e:	42be      	cmp	r6, r7
 8006240:	d900      	bls.n	8006244 <__ssputs_r+0x70>
 8006242:	463e      	mov	r6, r7
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	4632      	mov	r2, r6
 8006248:	4641      	mov	r1, r8
 800624a:	f000 faab 	bl	80067a4 <memmove>
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	1b9b      	subs	r3, r3, r6
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	4433      	add	r3, r6
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	2000      	movs	r0, #0
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	462a      	mov	r2, r5
 8006262:	f000 fad7 	bl	8006814 <_realloc_r>
 8006266:	4606      	mov	r6, r0
 8006268:	2800      	cmp	r0, #0
 800626a:	d1e0      	bne.n	800622e <__ssputs_r+0x5a>
 800626c:	6921      	ldr	r1, [r4, #16]
 800626e:	4650      	mov	r0, sl
 8006270:	f7ff feb8 	bl	8005fe4 <_free_r>
 8006274:	230c      	movs	r3, #12
 8006276:	f8ca 3000 	str.w	r3, [sl]
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	e7e9      	b.n	800625c <__ssputs_r+0x88>

08006288 <_svfiprintf_r>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	4698      	mov	r8, r3
 800628e:	898b      	ldrh	r3, [r1, #12]
 8006290:	061b      	lsls	r3, r3, #24
 8006292:	b09d      	sub	sp, #116	; 0x74
 8006294:	4607      	mov	r7, r0
 8006296:	460d      	mov	r5, r1
 8006298:	4614      	mov	r4, r2
 800629a:	d50e      	bpl.n	80062ba <_svfiprintf_r+0x32>
 800629c:	690b      	ldr	r3, [r1, #16]
 800629e:	b963      	cbnz	r3, 80062ba <_svfiprintf_r+0x32>
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	f7ff ff0b 	bl	80060bc <_malloc_r>
 80062a6:	6028      	str	r0, [r5, #0]
 80062a8:	6128      	str	r0, [r5, #16]
 80062aa:	b920      	cbnz	r0, 80062b6 <_svfiprintf_r+0x2e>
 80062ac:	230c      	movs	r3, #12
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e0d0      	b.n	8006458 <_svfiprintf_r+0x1d0>
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	616b      	str	r3, [r5, #20]
 80062ba:	2300      	movs	r3, #0
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	2320      	movs	r3, #32
 80062c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c8:	2330      	movs	r3, #48	; 0x30
 80062ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006470 <_svfiprintf_r+0x1e8>
 80062ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062d2:	f04f 0901 	mov.w	r9, #1
 80062d6:	4623      	mov	r3, r4
 80062d8:	469a      	mov	sl, r3
 80062da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062de:	b10a      	cbz	r2, 80062e4 <_svfiprintf_r+0x5c>
 80062e0:	2a25      	cmp	r2, #37	; 0x25
 80062e2:	d1f9      	bne.n	80062d8 <_svfiprintf_r+0x50>
 80062e4:	ebba 0b04 	subs.w	fp, sl, r4
 80062e8:	d00b      	beq.n	8006302 <_svfiprintf_r+0x7a>
 80062ea:	465b      	mov	r3, fp
 80062ec:	4622      	mov	r2, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	4638      	mov	r0, r7
 80062f2:	f7ff ff6f 	bl	80061d4 <__ssputs_r>
 80062f6:	3001      	adds	r0, #1
 80062f8:	f000 80a9 	beq.w	800644e <_svfiprintf_r+0x1c6>
 80062fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fe:	445a      	add	r2, fp
 8006300:	9209      	str	r2, [sp, #36]	; 0x24
 8006302:	f89a 3000 	ldrb.w	r3, [sl]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a1 	beq.w	800644e <_svfiprintf_r+0x1c6>
 800630c:	2300      	movs	r3, #0
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006316:	f10a 0a01 	add.w	sl, sl, #1
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	9307      	str	r3, [sp, #28]
 800631e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006322:	931a      	str	r3, [sp, #104]	; 0x68
 8006324:	4654      	mov	r4, sl
 8006326:	2205      	movs	r2, #5
 8006328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632c:	4850      	ldr	r0, [pc, #320]	; (8006470 <_svfiprintf_r+0x1e8>)
 800632e:	f7f9 ff77 	bl	8000220 <memchr>
 8006332:	9a04      	ldr	r2, [sp, #16]
 8006334:	b9d8      	cbnz	r0, 800636e <_svfiprintf_r+0xe6>
 8006336:	06d0      	lsls	r0, r2, #27
 8006338:	bf44      	itt	mi
 800633a:	2320      	movmi	r3, #32
 800633c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006340:	0711      	lsls	r1, r2, #28
 8006342:	bf44      	itt	mi
 8006344:	232b      	movmi	r3, #43	; 0x2b
 8006346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800634a:	f89a 3000 	ldrb.w	r3, [sl]
 800634e:	2b2a      	cmp	r3, #42	; 0x2a
 8006350:	d015      	beq.n	800637e <_svfiprintf_r+0xf6>
 8006352:	9a07      	ldr	r2, [sp, #28]
 8006354:	4654      	mov	r4, sl
 8006356:	2000      	movs	r0, #0
 8006358:	f04f 0c0a 	mov.w	ip, #10
 800635c:	4621      	mov	r1, r4
 800635e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006362:	3b30      	subs	r3, #48	; 0x30
 8006364:	2b09      	cmp	r3, #9
 8006366:	d94d      	bls.n	8006404 <_svfiprintf_r+0x17c>
 8006368:	b1b0      	cbz	r0, 8006398 <_svfiprintf_r+0x110>
 800636a:	9207      	str	r2, [sp, #28]
 800636c:	e014      	b.n	8006398 <_svfiprintf_r+0x110>
 800636e:	eba0 0308 	sub.w	r3, r0, r8
 8006372:	fa09 f303 	lsl.w	r3, r9, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	46a2      	mov	sl, r4
 800637c:	e7d2      	b.n	8006324 <_svfiprintf_r+0x9c>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	1d19      	adds	r1, r3, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	9103      	str	r1, [sp, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfbb      	ittet	lt
 800638a:	425b      	neglt	r3, r3
 800638c:	f042 0202 	orrlt.w	r2, r2, #2
 8006390:	9307      	strge	r3, [sp, #28]
 8006392:	9307      	strlt	r3, [sp, #28]
 8006394:	bfb8      	it	lt
 8006396:	9204      	strlt	r2, [sp, #16]
 8006398:	7823      	ldrb	r3, [r4, #0]
 800639a:	2b2e      	cmp	r3, #46	; 0x2e
 800639c:	d10c      	bne.n	80063b8 <_svfiprintf_r+0x130>
 800639e:	7863      	ldrb	r3, [r4, #1]
 80063a0:	2b2a      	cmp	r3, #42	; 0x2a
 80063a2:	d134      	bne.n	800640e <_svfiprintf_r+0x186>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfb8      	it	lt
 80063b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063b4:	3402      	adds	r4, #2
 80063b6:	9305      	str	r3, [sp, #20]
 80063b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006480 <_svfiprintf_r+0x1f8>
 80063bc:	7821      	ldrb	r1, [r4, #0]
 80063be:	2203      	movs	r2, #3
 80063c0:	4650      	mov	r0, sl
 80063c2:	f7f9 ff2d 	bl	8000220 <memchr>
 80063c6:	b138      	cbz	r0, 80063d8 <_svfiprintf_r+0x150>
 80063c8:	9b04      	ldr	r3, [sp, #16]
 80063ca:	eba0 000a 	sub.w	r0, r0, sl
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	4082      	lsls	r2, r0
 80063d2:	4313      	orrs	r3, r2
 80063d4:	3401      	adds	r4, #1
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063dc:	4825      	ldr	r0, [pc, #148]	; (8006474 <_svfiprintf_r+0x1ec>)
 80063de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063e2:	2206      	movs	r2, #6
 80063e4:	f7f9 ff1c 	bl	8000220 <memchr>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d038      	beq.n	800645e <_svfiprintf_r+0x1d6>
 80063ec:	4b22      	ldr	r3, [pc, #136]	; (8006478 <_svfiprintf_r+0x1f0>)
 80063ee:	bb1b      	cbnz	r3, 8006438 <_svfiprintf_r+0x1b0>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	3307      	adds	r3, #7
 80063f4:	f023 0307 	bic.w	r3, r3, #7
 80063f8:	3308      	adds	r3, #8
 80063fa:	9303      	str	r3, [sp, #12]
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fe:	4433      	add	r3, r6
 8006400:	9309      	str	r3, [sp, #36]	; 0x24
 8006402:	e768      	b.n	80062d6 <_svfiprintf_r+0x4e>
 8006404:	fb0c 3202 	mla	r2, ip, r2, r3
 8006408:	460c      	mov	r4, r1
 800640a:	2001      	movs	r0, #1
 800640c:	e7a6      	b.n	800635c <_svfiprintf_r+0xd4>
 800640e:	2300      	movs	r3, #0
 8006410:	3401      	adds	r4, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	4619      	mov	r1, r3
 8006416:	f04f 0c0a 	mov.w	ip, #10
 800641a:	4620      	mov	r0, r4
 800641c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006420:	3a30      	subs	r2, #48	; 0x30
 8006422:	2a09      	cmp	r2, #9
 8006424:	d903      	bls.n	800642e <_svfiprintf_r+0x1a6>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0c6      	beq.n	80063b8 <_svfiprintf_r+0x130>
 800642a:	9105      	str	r1, [sp, #20]
 800642c:	e7c4      	b.n	80063b8 <_svfiprintf_r+0x130>
 800642e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006432:	4604      	mov	r4, r0
 8006434:	2301      	movs	r3, #1
 8006436:	e7f0      	b.n	800641a <_svfiprintf_r+0x192>
 8006438:	ab03      	add	r3, sp, #12
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	462a      	mov	r2, r5
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <_svfiprintf_r+0x1f4>)
 8006440:	a904      	add	r1, sp, #16
 8006442:	4638      	mov	r0, r7
 8006444:	f3af 8000 	nop.w
 8006448:	1c42      	adds	r2, r0, #1
 800644a:	4606      	mov	r6, r0
 800644c:	d1d6      	bne.n	80063fc <_svfiprintf_r+0x174>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	065b      	lsls	r3, r3, #25
 8006452:	f53f af2d 	bmi.w	80062b0 <_svfiprintf_r+0x28>
 8006456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006458:	b01d      	add	sp, #116	; 0x74
 800645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645e:	ab03      	add	r3, sp, #12
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	462a      	mov	r2, r5
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <_svfiprintf_r+0x1f4>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	4638      	mov	r0, r7
 800646a:	f000 f879 	bl	8006560 <_printf_i>
 800646e:	e7eb      	b.n	8006448 <_svfiprintf_r+0x1c0>
 8006470:	08006904 	.word	0x08006904
 8006474:	0800690e 	.word	0x0800690e
 8006478:	00000000 	.word	0x00000000
 800647c:	080061d5 	.word	0x080061d5
 8006480:	0800690a 	.word	0x0800690a

08006484 <_printf_common>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	4616      	mov	r6, r2
 800648a:	4699      	mov	r9, r3
 800648c:	688a      	ldr	r2, [r1, #8]
 800648e:	690b      	ldr	r3, [r1, #16]
 8006490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006494:	4293      	cmp	r3, r2
 8006496:	bfb8      	it	lt
 8006498:	4613      	movlt	r3, r2
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a0:	4607      	mov	r7, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b10a      	cbz	r2, 80064aa <_printf_common+0x26>
 80064a6:	3301      	adds	r3, #1
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	0699      	lsls	r1, r3, #26
 80064ae:	bf42      	ittt	mi
 80064b0:	6833      	ldrmi	r3, [r6, #0]
 80064b2:	3302      	addmi	r3, #2
 80064b4:	6033      	strmi	r3, [r6, #0]
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	f015 0506 	ands.w	r5, r5, #6
 80064bc:	d106      	bne.n	80064cc <_printf_common+0x48>
 80064be:	f104 0a19 	add.w	sl, r4, #25
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	6832      	ldr	r2, [r6, #0]
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dc26      	bgt.n	800651a <_printf_common+0x96>
 80064cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d0:	1e13      	subs	r3, r2, #0
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	bf18      	it	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	0692      	lsls	r2, r2, #26
 80064da:	d42b      	bmi.n	8006534 <_printf_common+0xb0>
 80064dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e0:	4649      	mov	r1, r9
 80064e2:	4638      	mov	r0, r7
 80064e4:	47c0      	blx	r8
 80064e6:	3001      	adds	r0, #1
 80064e8:	d01e      	beq.n	8006528 <_printf_common+0xa4>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	6922      	ldr	r2, [r4, #16]
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	bf02      	ittt	eq
 80064f6:	68e5      	ldreq	r5, [r4, #12]
 80064f8:	6833      	ldreq	r3, [r6, #0]
 80064fa:	1aed      	subeq	r5, r5, r3
 80064fc:	68a3      	ldr	r3, [r4, #8]
 80064fe:	bf0c      	ite	eq
 8006500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006504:	2500      	movne	r5, #0
 8006506:	4293      	cmp	r3, r2
 8006508:	bfc4      	itt	gt
 800650a:	1a9b      	subgt	r3, r3, r2
 800650c:	18ed      	addgt	r5, r5, r3
 800650e:	2600      	movs	r6, #0
 8006510:	341a      	adds	r4, #26
 8006512:	42b5      	cmp	r5, r6
 8006514:	d11a      	bne.n	800654c <_printf_common+0xc8>
 8006516:	2000      	movs	r0, #0
 8006518:	e008      	b.n	800652c <_printf_common+0xa8>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4649      	mov	r1, r9
 8006520:	4638      	mov	r0, r7
 8006522:	47c0      	blx	r8
 8006524:	3001      	adds	r0, #1
 8006526:	d103      	bne.n	8006530 <_printf_common+0xac>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	3501      	adds	r5, #1
 8006532:	e7c6      	b.n	80064c2 <_printf_common+0x3e>
 8006534:	18e1      	adds	r1, r4, r3
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	2030      	movs	r0, #48	; 0x30
 800653a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653e:	4422      	add	r2, r4
 8006540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006548:	3302      	adds	r3, #2
 800654a:	e7c7      	b.n	80064dc <_printf_common+0x58>
 800654c:	2301      	movs	r3, #1
 800654e:	4622      	mov	r2, r4
 8006550:	4649      	mov	r1, r9
 8006552:	4638      	mov	r0, r7
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d0e6      	beq.n	8006528 <_printf_common+0xa4>
 800655a:	3601      	adds	r6, #1
 800655c:	e7d9      	b.n	8006512 <_printf_common+0x8e>
	...

08006560 <_printf_i>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	7e0f      	ldrb	r7, [r1, #24]
 8006566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006568:	2f78      	cmp	r7, #120	; 0x78
 800656a:	4691      	mov	r9, r2
 800656c:	4680      	mov	r8, r0
 800656e:	460c      	mov	r4, r1
 8006570:	469a      	mov	sl, r3
 8006572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006576:	d807      	bhi.n	8006588 <_printf_i+0x28>
 8006578:	2f62      	cmp	r7, #98	; 0x62
 800657a:	d80a      	bhi.n	8006592 <_printf_i+0x32>
 800657c:	2f00      	cmp	r7, #0
 800657e:	f000 80d4 	beq.w	800672a <_printf_i+0x1ca>
 8006582:	2f58      	cmp	r7, #88	; 0x58
 8006584:	f000 80c0 	beq.w	8006708 <_printf_i+0x1a8>
 8006588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006590:	e03a      	b.n	8006608 <_printf_i+0xa8>
 8006592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006596:	2b15      	cmp	r3, #21
 8006598:	d8f6      	bhi.n	8006588 <_printf_i+0x28>
 800659a:	a101      	add	r1, pc, #4	; (adr r1, 80065a0 <_printf_i+0x40>)
 800659c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a0:	080065f9 	.word	0x080065f9
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	08006589 	.word	0x08006589
 80065ac:	08006589 	.word	0x08006589
 80065b0:	08006589 	.word	0x08006589
 80065b4:	08006589 	.word	0x08006589
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006589 	.word	0x08006589
 80065c0:	08006589 	.word	0x08006589
 80065c4:	08006589 	.word	0x08006589
 80065c8:	08006589 	.word	0x08006589
 80065cc:	08006711 	.word	0x08006711
 80065d0:	08006639 	.word	0x08006639
 80065d4:	080066cb 	.word	0x080066cb
 80065d8:	08006589 	.word	0x08006589
 80065dc:	08006589 	.word	0x08006589
 80065e0:	08006733 	.word	0x08006733
 80065e4:	08006589 	.word	0x08006589
 80065e8:	08006639 	.word	0x08006639
 80065ec:	08006589 	.word	0x08006589
 80065f0:	08006589 	.word	0x08006589
 80065f4:	080066d3 	.word	0x080066d3
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006608:	2301      	movs	r3, #1
 800660a:	e09f      	b.n	800674c <_printf_i+0x1ec>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	0607      	lsls	r7, r0, #24
 8006612:	f103 0104 	add.w	r1, r3, #4
 8006616:	6029      	str	r1, [r5, #0]
 8006618:	d501      	bpl.n	800661e <_printf_i+0xbe>
 800661a:	681e      	ldr	r6, [r3, #0]
 800661c:	e003      	b.n	8006626 <_printf_i+0xc6>
 800661e:	0646      	lsls	r6, r0, #25
 8006620:	d5fb      	bpl.n	800661a <_printf_i+0xba>
 8006622:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006626:	2e00      	cmp	r6, #0
 8006628:	da03      	bge.n	8006632 <_printf_i+0xd2>
 800662a:	232d      	movs	r3, #45	; 0x2d
 800662c:	4276      	negs	r6, r6
 800662e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006632:	485a      	ldr	r0, [pc, #360]	; (800679c <_printf_i+0x23c>)
 8006634:	230a      	movs	r3, #10
 8006636:	e012      	b.n	800665e <_printf_i+0xfe>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	1d19      	adds	r1, r3, #4
 800663e:	6029      	str	r1, [r5, #0]
 8006640:	0605      	lsls	r5, r0, #24
 8006642:	d501      	bpl.n	8006648 <_printf_i+0xe8>
 8006644:	681e      	ldr	r6, [r3, #0]
 8006646:	e002      	b.n	800664e <_printf_i+0xee>
 8006648:	0641      	lsls	r1, r0, #25
 800664a:	d5fb      	bpl.n	8006644 <_printf_i+0xe4>
 800664c:	881e      	ldrh	r6, [r3, #0]
 800664e:	4853      	ldr	r0, [pc, #332]	; (800679c <_printf_i+0x23c>)
 8006650:	2f6f      	cmp	r7, #111	; 0x6f
 8006652:	bf0c      	ite	eq
 8006654:	2308      	moveq	r3, #8
 8006656:	230a      	movne	r3, #10
 8006658:	2100      	movs	r1, #0
 800665a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800665e:	6865      	ldr	r5, [r4, #4]
 8006660:	60a5      	str	r5, [r4, #8]
 8006662:	2d00      	cmp	r5, #0
 8006664:	bfa2      	ittt	ge
 8006666:	6821      	ldrge	r1, [r4, #0]
 8006668:	f021 0104 	bicge.w	r1, r1, #4
 800666c:	6021      	strge	r1, [r4, #0]
 800666e:	b90e      	cbnz	r6, 8006674 <_printf_i+0x114>
 8006670:	2d00      	cmp	r5, #0
 8006672:	d04b      	beq.n	800670c <_printf_i+0x1ac>
 8006674:	4615      	mov	r5, r2
 8006676:	fbb6 f1f3 	udiv	r1, r6, r3
 800667a:	fb03 6711 	mls	r7, r3, r1, r6
 800667e:	5dc7      	ldrb	r7, [r0, r7]
 8006680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006684:	4637      	mov	r7, r6
 8006686:	42bb      	cmp	r3, r7
 8006688:	460e      	mov	r6, r1
 800668a:	d9f4      	bls.n	8006676 <_printf_i+0x116>
 800668c:	2b08      	cmp	r3, #8
 800668e:	d10b      	bne.n	80066a8 <_printf_i+0x148>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	07de      	lsls	r6, r3, #31
 8006694:	d508      	bpl.n	80066a8 <_printf_i+0x148>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	6861      	ldr	r1, [r4, #4]
 800669a:	4299      	cmp	r1, r3
 800669c:	bfde      	ittt	le
 800669e:	2330      	movle	r3, #48	; 0x30
 80066a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066a8:	1b52      	subs	r2, r2, r5
 80066aa:	6122      	str	r2, [r4, #16]
 80066ac:	f8cd a000 	str.w	sl, [sp]
 80066b0:	464b      	mov	r3, r9
 80066b2:	aa03      	add	r2, sp, #12
 80066b4:	4621      	mov	r1, r4
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7ff fee4 	bl	8006484 <_printf_common>
 80066bc:	3001      	adds	r0, #1
 80066be:	d14a      	bne.n	8006756 <_printf_i+0x1f6>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	b004      	add	sp, #16
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f043 0320 	orr.w	r3, r3, #32
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	4833      	ldr	r0, [pc, #204]	; (80067a0 <_printf_i+0x240>)
 80066d4:	2778      	movs	r7, #120	; 0x78
 80066d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	6829      	ldr	r1, [r5, #0]
 80066de:	061f      	lsls	r7, r3, #24
 80066e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0x18c>
 80066e6:	065f      	lsls	r7, r3, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2b6      	uxthmi	r6, r6
 80066ec:	07df      	lsls	r7, r3, #31
 80066ee:	bf48      	it	mi
 80066f0:	f043 0320 	orrmi.w	r3, r3, #32
 80066f4:	6029      	str	r1, [r5, #0]
 80066f6:	bf48      	it	mi
 80066f8:	6023      	strmi	r3, [r4, #0]
 80066fa:	b91e      	cbnz	r6, 8006704 <_printf_i+0x1a4>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f023 0320 	bic.w	r3, r3, #32
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	2310      	movs	r3, #16
 8006706:	e7a7      	b.n	8006658 <_printf_i+0xf8>
 8006708:	4824      	ldr	r0, [pc, #144]	; (800679c <_printf_i+0x23c>)
 800670a:	e7e4      	b.n	80066d6 <_printf_i+0x176>
 800670c:	4615      	mov	r5, r2
 800670e:	e7bd      	b.n	800668c <_printf_i+0x12c>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	6826      	ldr	r6, [r4, #0]
 8006714:	6961      	ldr	r1, [r4, #20]
 8006716:	1d18      	adds	r0, r3, #4
 8006718:	6028      	str	r0, [r5, #0]
 800671a:	0635      	lsls	r5, r6, #24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	d501      	bpl.n	8006724 <_printf_i+0x1c4>
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	e002      	b.n	800672a <_printf_i+0x1ca>
 8006724:	0670      	lsls	r0, r6, #25
 8006726:	d5fb      	bpl.n	8006720 <_printf_i+0x1c0>
 8006728:	8019      	strh	r1, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	4615      	mov	r5, r2
 8006730:	e7bc      	b.n	80066ac <_printf_i+0x14c>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	1d1a      	adds	r2, r3, #4
 8006736:	602a      	str	r2, [r5, #0]
 8006738:	681d      	ldr	r5, [r3, #0]
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	2100      	movs	r1, #0
 800673e:	4628      	mov	r0, r5
 8006740:	f7f9 fd6e 	bl	8000220 <memchr>
 8006744:	b108      	cbz	r0, 800674a <_printf_i+0x1ea>
 8006746:	1b40      	subs	r0, r0, r5
 8006748:	6060      	str	r0, [r4, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	2300      	movs	r3, #0
 8006750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006754:	e7aa      	b.n	80066ac <_printf_i+0x14c>
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	462a      	mov	r2, r5
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d0ad      	beq.n	80066c0 <_printf_i+0x160>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	079b      	lsls	r3, r3, #30
 8006768:	d413      	bmi.n	8006792 <_printf_i+0x232>
 800676a:	68e0      	ldr	r0, [r4, #12]
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	4298      	cmp	r0, r3
 8006770:	bfb8      	it	lt
 8006772:	4618      	movlt	r0, r3
 8006774:	e7a6      	b.n	80066c4 <_printf_i+0x164>
 8006776:	2301      	movs	r3, #1
 8006778:	4632      	mov	r2, r6
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d09d      	beq.n	80066c0 <_printf_i+0x160>
 8006784:	3501      	adds	r5, #1
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	9903      	ldr	r1, [sp, #12]
 800678a:	1a5b      	subs	r3, r3, r1
 800678c:	42ab      	cmp	r3, r5
 800678e:	dcf2      	bgt.n	8006776 <_printf_i+0x216>
 8006790:	e7eb      	b.n	800676a <_printf_i+0x20a>
 8006792:	2500      	movs	r5, #0
 8006794:	f104 0619 	add.w	r6, r4, #25
 8006798:	e7f5      	b.n	8006786 <_printf_i+0x226>
 800679a:	bf00      	nop
 800679c:	08006915 	.word	0x08006915
 80067a0:	08006926 	.word	0x08006926

080067a4 <memmove>:
 80067a4:	4288      	cmp	r0, r1
 80067a6:	b510      	push	{r4, lr}
 80067a8:	eb01 0402 	add.w	r4, r1, r2
 80067ac:	d902      	bls.n	80067b4 <memmove+0x10>
 80067ae:	4284      	cmp	r4, r0
 80067b0:	4623      	mov	r3, r4
 80067b2:	d807      	bhi.n	80067c4 <memmove+0x20>
 80067b4:	1e43      	subs	r3, r0, #1
 80067b6:	42a1      	cmp	r1, r4
 80067b8:	d008      	beq.n	80067cc <memmove+0x28>
 80067ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067c2:	e7f8      	b.n	80067b6 <memmove+0x12>
 80067c4:	4402      	add	r2, r0
 80067c6:	4601      	mov	r1, r0
 80067c8:	428a      	cmp	r2, r1
 80067ca:	d100      	bne.n	80067ce <memmove+0x2a>
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067d6:	e7f7      	b.n	80067c8 <memmove+0x24>

080067d8 <_sbrk_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d06      	ldr	r5, [pc, #24]	; (80067f4 <_sbrk_r+0x1c>)
 80067dc:	2300      	movs	r3, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa fd70 	bl	80012c8 <_sbrk>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_sbrk_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_sbrk_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000958 	.word	0x20000958

080067f8 <memcpy>:
 80067f8:	440a      	add	r2, r1
 80067fa:	4291      	cmp	r1, r2
 80067fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006800:	d100      	bne.n	8006804 <memcpy+0xc>
 8006802:	4770      	bx	lr
 8006804:	b510      	push	{r4, lr}
 8006806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800680a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800680e:	4291      	cmp	r1, r2
 8006810:	d1f9      	bne.n	8006806 <memcpy+0xe>
 8006812:	bd10      	pop	{r4, pc}

08006814 <_realloc_r>:
 8006814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006818:	4680      	mov	r8, r0
 800681a:	4614      	mov	r4, r2
 800681c:	460e      	mov	r6, r1
 800681e:	b921      	cbnz	r1, 800682a <_realloc_r+0x16>
 8006820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	4611      	mov	r1, r2
 8006826:	f7ff bc49 	b.w	80060bc <_malloc_r>
 800682a:	b92a      	cbnz	r2, 8006838 <_realloc_r+0x24>
 800682c:	f7ff fbda 	bl	8005fe4 <_free_r>
 8006830:	4625      	mov	r5, r4
 8006832:	4628      	mov	r0, r5
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	f000 f81b 	bl	8006872 <_malloc_usable_size_r>
 800683c:	4284      	cmp	r4, r0
 800683e:	4607      	mov	r7, r0
 8006840:	d802      	bhi.n	8006848 <_realloc_r+0x34>
 8006842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006846:	d812      	bhi.n	800686e <_realloc_r+0x5a>
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fc36 	bl	80060bc <_malloc_r>
 8006850:	4605      	mov	r5, r0
 8006852:	2800      	cmp	r0, #0
 8006854:	d0ed      	beq.n	8006832 <_realloc_r+0x1e>
 8006856:	42bc      	cmp	r4, r7
 8006858:	4622      	mov	r2, r4
 800685a:	4631      	mov	r1, r6
 800685c:	bf28      	it	cs
 800685e:	463a      	movcs	r2, r7
 8006860:	f7ff ffca 	bl	80067f8 <memcpy>
 8006864:	4631      	mov	r1, r6
 8006866:	4640      	mov	r0, r8
 8006868:	f7ff fbbc 	bl	8005fe4 <_free_r>
 800686c:	e7e1      	b.n	8006832 <_realloc_r+0x1e>
 800686e:	4635      	mov	r5, r6
 8006870:	e7df      	b.n	8006832 <_realloc_r+0x1e>

08006872 <_malloc_usable_size_r>:
 8006872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006876:	1f18      	subs	r0, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfbc      	itt	lt
 800687c:	580b      	ldrlt	r3, [r1, r0]
 800687e:	18c0      	addlt	r0, r0, r3
 8006880:	4770      	bx	lr
	...

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
